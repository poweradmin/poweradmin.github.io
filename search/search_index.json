{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Poweradmin Documentation Welcome to the official documentation for Poweradmin, a web-based administration tool for PowerDNS. Overview Poweradmin is a friendly web interface for managing PowerDNS. It allows you to manage DNS zones and records with ease. Features User Management : Manage users and roles with different permissions DNS Management : Create, update, and delete DNS zones and records Templates : Use templates for bulk operations Dynamic DNS : Configure and manage dynamic DNS settings Security : Implement best practices for securing your DNS infrastructure Logging and Monitoring : Configure logging and monitor your DNS setup API : Access and manage your DNS data programmatically using the Poweradmin API Quick Start Guide Installation : See the Installation Overview for installation options Configuration : Check the Basic Configuration guide to set up your instance User Management : Learn how to manage Users and Roles Using the System : Follow our guides for everyday DNS management tasks Documentation Sections Getting Started : System requirements and feature overview Installation : Detailed installation guides for different environments Configuration : All configuration options and settings User Guide : Practical usage instructions Advanced Topics : Detailed technical information Upgrading : Version-specific upgrade guides Troubleshooting : Solutions for common issues Contributing : How to contribute to the project Community and Support Join our community for support and discussions: GitHub Repository Issue Tracker Discussions License and Disclaimer Poweradmin is licensed under the GPL-3.0 License . This project is not associated with PowerDNS.com , Open-Xchange , or any other external parties. It is independently funded and maintained. Thank you for using Poweradmin!","title":"Home"},{"location":"#poweradmin-documentation","text":"Welcome to the official documentation for Poweradmin, a web-based administration tool for PowerDNS.","title":"Poweradmin Documentation"},{"location":"#overview","text":"Poweradmin is a friendly web interface for managing PowerDNS. It allows you to manage DNS zones and records with ease.","title":"Overview"},{"location":"#features","text":"User Management : Manage users and roles with different permissions DNS Management : Create, update, and delete DNS zones and records Templates : Use templates for bulk operations Dynamic DNS : Configure and manage dynamic DNS settings Security : Implement best practices for securing your DNS infrastructure Logging and Monitoring : Configure logging and monitor your DNS setup API : Access and manage your DNS data programmatically using the Poweradmin API","title":"Features"},{"location":"#quick-start-guide","text":"Installation : See the Installation Overview for installation options Configuration : Check the Basic Configuration guide to set up your instance User Management : Learn how to manage Users and Roles Using the System : Follow our guides for everyday DNS management tasks","title":"Quick Start Guide"},{"location":"#documentation-sections","text":"Getting Started : System requirements and feature overview Installation : Detailed installation guides for different environments Configuration : All configuration options and settings User Guide : Practical usage instructions Advanced Topics : Detailed technical information Upgrading : Version-specific upgrade guides Troubleshooting : Solutions for common issues Contributing : How to contribute to the project","title":"Documentation Sections"},{"location":"#community-and-support","text":"Join our community for support and discussions: GitHub Repository Issue Tracker Discussions","title":"Community and Support"},{"location":"#license-and-disclaimer","text":"Poweradmin is licensed under the GPL-3.0 License . This project is not associated with PowerDNS.com , Open-Xchange , or any other external parties. It is independently funded and maintained. Thank you for using Poweradmin!","title":"License and Disclaimer"},{"location":"advanced/logging-config/","text":"Advanced Logging Configuration This guide provides detailed information about Poweradmin's advanced logging capabilities and configuration options. For basic logging setup, see the Basic Logging Configuration . Log Types in Detail Poweradmin supports several logging methods that can be combined for comprehensive monitoring: 1. Native Logging Uses PHP's error_log() function to write logs to the configured PHP error log destination. 'logging' => [ 'type' => 'native', 'level' => 'info', // other settings... ], 2. Null Logging Disables all application logging (except database logging if enabled separately). 'logging' => [ 'type' => 'null', // other settings... ], 3. Database Logging Logs user actions and zone changes to the Poweradmin database. This is independent of the main logger type. 'logging' => [ // Can be combined with any type 'database_enabled' => true, // other settings... ], 4. Syslog Logging Logs authentication and security events to the system's syslog. 'logging' => [ 'syslog_enabled' => true, 'syslog_identity' => 'poweradmin', // Program identifier in syslog 'syslog_facility' => LOG_USER, // Standard PHP syslog facility constant // other settings... ], Environment-Specific Configurations Production Environment Configuration For a standard production environment: 'logging' => [ 'type' => 'native', 'level' => 'warning', // Only log warning and above 'database_enabled' => true, // Track user actions and zone changes 'syslog_enabled' => true, // Log security events to syslog 'syslog_identity' => 'poweradmin', 'syslog_facility' => LOG_LOCAL0, ], Development Environment Configuration For a development environment: 'logging' => [ 'type' => 'native', 'level' => 'debug', // Log everything including debug messages 'database_enabled' => true, // Track changes for debugging 'syslog_enabled' => false, // Usually not needed in development ], Minimal Logging Configuration For minimal performance impact: 'logging' => [ 'type' => 'null', // Disable application logging 'database_enabled' => false, // Disable database logging 'syslog_enabled' => true, // Keep security logging 'syslog_identity' => 'poweradmin', 'syslog_facility' => LOG_USER, ], Best Practices Production environments : Use warning or error levels to avoid excessive logging Debug temporary issues : Temporarily enable debug level, then return to normal settings Database logging : Useful for audit trails but may impact performance on high-traffic systems Syslog logging : Recommended for security events to integrate with system monitoring Advanced Configuration Custom Log Paths If using native logging, you can control the log file location by configuring PHP's error_log setting in your php.ini file. Log Rotation For production systems, ensure log rotation is configured at the system level: - For syslog: Configure logrotate for your syslog files - For PHP error logs: Configure logrotate for your PHP error log files - For database logs: Implement periodic pruning of old log entries Database Log Tables When database_enabled is true, logs are stored in: - log_users table: Authentication and user management events - log_zones table: DNS zone and record changes","title":"Log Configuration"},{"location":"advanced/logging-config/#advanced-logging-configuration","text":"This guide provides detailed information about Poweradmin's advanced logging capabilities and configuration options. For basic logging setup, see the Basic Logging Configuration .","title":"Advanced Logging Configuration"},{"location":"advanced/logging-config/#log-types-in-detail","text":"Poweradmin supports several logging methods that can be combined for comprehensive monitoring:","title":"Log Types in Detail"},{"location":"advanced/logging-config/#1-native-logging","text":"Uses PHP's error_log() function to write logs to the configured PHP error log destination. 'logging' => [ 'type' => 'native', 'level' => 'info', // other settings... ],","title":"1. Native Logging"},{"location":"advanced/logging-config/#2-null-logging","text":"Disables all application logging (except database logging if enabled separately). 'logging' => [ 'type' => 'null', // other settings... ],","title":"2. Null Logging"},{"location":"advanced/logging-config/#3-database-logging","text":"Logs user actions and zone changes to the Poweradmin database. This is independent of the main logger type. 'logging' => [ // Can be combined with any type 'database_enabled' => true, // other settings... ],","title":"3. Database Logging"},{"location":"advanced/logging-config/#4-syslog-logging","text":"Logs authentication and security events to the system's syslog. 'logging' => [ 'syslog_enabled' => true, 'syslog_identity' => 'poweradmin', // Program identifier in syslog 'syslog_facility' => LOG_USER, // Standard PHP syslog facility constant // other settings... ],","title":"4. Syslog Logging"},{"location":"advanced/logging-config/#environment-specific-configurations","text":"","title":"Environment-Specific Configurations"},{"location":"advanced/logging-config/#production-environment-configuration","text":"For a standard production environment: 'logging' => [ 'type' => 'native', 'level' => 'warning', // Only log warning and above 'database_enabled' => true, // Track user actions and zone changes 'syslog_enabled' => true, // Log security events to syslog 'syslog_identity' => 'poweradmin', 'syslog_facility' => LOG_LOCAL0, ],","title":"Production Environment Configuration"},{"location":"advanced/logging-config/#development-environment-configuration","text":"For a development environment: 'logging' => [ 'type' => 'native', 'level' => 'debug', // Log everything including debug messages 'database_enabled' => true, // Track changes for debugging 'syslog_enabled' => false, // Usually not needed in development ],","title":"Development Environment Configuration"},{"location":"advanced/logging-config/#minimal-logging-configuration","text":"For minimal performance impact: 'logging' => [ 'type' => 'null', // Disable application logging 'database_enabled' => false, // Disable database logging 'syslog_enabled' => true, // Keep security logging 'syslog_identity' => 'poweradmin', 'syslog_facility' => LOG_USER, ],","title":"Minimal Logging Configuration"},{"location":"advanced/logging-config/#best-practices","text":"Production environments : Use warning or error levels to avoid excessive logging Debug temporary issues : Temporarily enable debug level, then return to normal settings Database logging : Useful for audit trails but may impact performance on high-traffic systems Syslog logging : Recommended for security events to integrate with system monitoring","title":"Best Practices"},{"location":"advanced/logging-config/#advanced-configuration","text":"","title":"Advanced Configuration"},{"location":"advanced/logging-config/#custom-log-paths","text":"If using native logging, you can control the log file location by configuring PHP's error_log setting in your php.ini file.","title":"Custom Log Paths"},{"location":"advanced/logging-config/#log-rotation","text":"For production systems, ensure log rotation is configured at the system level: - For syslog: Configure logrotate for your syslog files - For PHP error logs: Configure logrotate for your PHP error log files - For database logs: Implement periodic pruning of old log entries","title":"Log Rotation"},{"location":"advanced/logging-config/#database-log-tables","text":"When database_enabled is true, logs are stored in: - log_users table: Authentication and user management events - log_zones table: DNS zone and record changes","title":"Database Log Tables"},{"location":"configuration/api/","text":"API Configuration Overview Poweradmin includes a RESTful API that allows external applications to interact with DNS records and zones programmatically. The API supports both API key authentication and HTTP Basic Authentication. Configuration Options API settings can be configured in the config/settings.php file under the api section. Setting Default Description enabled false Enable API functionality (including API keys) basic_auth_enabled false Enable HTTP Basic Authentication for public API endpoints basic_auth_realm Poweradmin API Realm name for HTTP Basic Authentication log_requests false Log all API requests docs_enabled false Enable API documentation at /api/docs endpoint Configuration Example return [ 'api' => [ 'enabled' => true, 'basic_auth_enabled' => true, 'basic_auth_realm' => 'DNS Management API', 'log_requests' => true, 'docs_enabled' => true, ], ]; Authentication Methods API Key Authentication API keys provide secure, token-based authentication: Generate API keys - Create keys for each application Permissions - Restrict access to specific operations Revocation - Easily revoke compromised keys Using API Keys curl -H \"X-API-Key: your-api-key-here\" \\ -H \"Content-Type: application/json\" \\ https://your-domain.com/api/v1/zones HTTP Basic Authentication Traditional username/password authentication: curl -u username:password \\ -H \"Content-Type: application/json\" \\ https://your-domain.com/api/v1/zones API Endpoints Zone Management GET /api/v1/zones - List all zones GET /api/v1/zones/{id} - Get zone details POST /api/v1/zones - Create new zone PUT /api/v1/zones/{id} - Update zone DELETE /api/v1/zones/{id} - Delete zone Record Management GET /api/v1/zones/{id}/records - List zone records GET /api/v1/records/{id} - Get record details POST /api/v1/zones/{id}/records - Create record PUT /api/v1/records/{id} - Update record DELETE /api/v1/records/{id} - Delete record User Management GET /api/v1/users - List users (admin only) GET /api/v1/users/{id} - Get user details POST /api/v1/users - Create user (admin only) PUT /api/v1/users/{id} - Update user DELETE /api/v1/users/{id} - Delete user (admin only) Permission Management GET /api/v1/permissions - List available permissions GET /api/v1/permissions/{id} - Get permission details Permission Templates GET /api/v1/permission-templates - List permission templates GET /api/v1/permission-templates/{id} - Get permission template details POST /api/v1/permission-templates - Create permission template PUT /api/v1/permission-templates/{id} - Update permission template DELETE /api/v1/permission-templates/{id} - Delete permission template Internal API Endpoints The following endpoints are available for internal use (session-based authentication): GET /api/internal/zones/{id}/validate - Validate zone configuration GET /api/internal/users/{id}/preferences - Get user preferences PUT /api/internal/users/{id}/preferences - Update user preferences POST /api/internal/validation - Validate various data types API Documentation When docs_enabled is true, interactive API documentation is available at /api/docs . This provides: Interactive testing - Test API endpoints directly Request/response examples - See data formats Authentication guide - Learn how to authenticate Error codes - Understand error responses Security Considerations Production Setup 'api' => [ 'enabled' => true, 'basic_auth_enabled' => false, // Use API keys only 'log_requests' => true, // Enable audit logging 'docs_enabled' => false, // Disable docs in production ], Security Best Practices Use HTTPS only - Never expose API over HTTP API key rotation - Regularly rotate API keys Access control - Restrict API access by IP if possible Audit logging - Log all API requests and responses Request/Response Format Request Format { \"name\": \"example.com\", \"type\": \"A\", \"content\": \"192.168.1.100\", \"ttl\": 3600 } Response Format { \"success\": true, \"data\": { \"id\": 123, \"name\": \"example.com\", \"type\": \"A\", \"content\": \"192.168.1.100\", \"ttl\": 3600, \"created_at\": \"2023-01-01T12:00:00Z\", \"updated_at\": \"2023-01-01T12:00:00Z\" } } Error Response { \"success\": false, \"error\": { \"code\": \"VALIDATION_ERROR\", \"message\": \"Invalid record type\", \"details\": { \"field\": \"type\", \"value\": \"INVALID\" } } } Troubleshooting Common Issues 401 Unauthorized : Invalid API key or credentials 403 Forbidden : Insufficient permissions 500 Internal Server Error : Server configuration issue Debugging Enable request logging for troubleshooting: 'api' => [ 'log_requests' => true, ], Check logs in your configured logging destination for detailed request/response information.","title":"API Configuration"},{"location":"configuration/api/#api-configuration","text":"","title":"API Configuration"},{"location":"configuration/api/#overview","text":"Poweradmin includes a RESTful API that allows external applications to interact with DNS records and zones programmatically. The API supports both API key authentication and HTTP Basic Authentication.","title":"Overview"},{"location":"configuration/api/#configuration-options","text":"API settings can be configured in the config/settings.php file under the api section. Setting Default Description enabled false Enable API functionality (including API keys) basic_auth_enabled false Enable HTTP Basic Authentication for public API endpoints basic_auth_realm Poweradmin API Realm name for HTTP Basic Authentication log_requests false Log all API requests docs_enabled false Enable API documentation at /api/docs endpoint","title":"Configuration Options"},{"location":"configuration/api/#configuration-example","text":"return [ 'api' => [ 'enabled' => true, 'basic_auth_enabled' => true, 'basic_auth_realm' => 'DNS Management API', 'log_requests' => true, 'docs_enabled' => true, ], ];","title":"Configuration Example"},{"location":"configuration/api/#authentication-methods","text":"","title":"Authentication Methods"},{"location":"configuration/api/#api-key-authentication","text":"API keys provide secure, token-based authentication: Generate API keys - Create keys for each application Permissions - Restrict access to specific operations Revocation - Easily revoke compromised keys","title":"API Key Authentication"},{"location":"configuration/api/#using-api-keys","text":"curl -H \"X-API-Key: your-api-key-here\" \\ -H \"Content-Type: application/json\" \\ https://your-domain.com/api/v1/zones","title":"Using API Keys"},{"location":"configuration/api/#http-basic-authentication","text":"Traditional username/password authentication: curl -u username:password \\ -H \"Content-Type: application/json\" \\ https://your-domain.com/api/v1/zones","title":"HTTP Basic Authentication"},{"location":"configuration/api/#api-endpoints","text":"","title":"API Endpoints"},{"location":"configuration/api/#zone-management","text":"GET /api/v1/zones - List all zones GET /api/v1/zones/{id} - Get zone details POST /api/v1/zones - Create new zone PUT /api/v1/zones/{id} - Update zone DELETE /api/v1/zones/{id} - Delete zone","title":"Zone Management"},{"location":"configuration/api/#record-management","text":"GET /api/v1/zones/{id}/records - List zone records GET /api/v1/records/{id} - Get record details POST /api/v1/zones/{id}/records - Create record PUT /api/v1/records/{id} - Update record DELETE /api/v1/records/{id} - Delete record","title":"Record Management"},{"location":"configuration/api/#user-management","text":"GET /api/v1/users - List users (admin only) GET /api/v1/users/{id} - Get user details POST /api/v1/users - Create user (admin only) PUT /api/v1/users/{id} - Update user DELETE /api/v1/users/{id} - Delete user (admin only)","title":"User Management"},{"location":"configuration/api/#permission-management","text":"GET /api/v1/permissions - List available permissions GET /api/v1/permissions/{id} - Get permission details","title":"Permission Management"},{"location":"configuration/api/#permission-templates","text":"GET /api/v1/permission-templates - List permission templates GET /api/v1/permission-templates/{id} - Get permission template details POST /api/v1/permission-templates - Create permission template PUT /api/v1/permission-templates/{id} - Update permission template DELETE /api/v1/permission-templates/{id} - Delete permission template","title":"Permission Templates"},{"location":"configuration/api/#internal-api-endpoints","text":"The following endpoints are available for internal use (session-based authentication): GET /api/internal/zones/{id}/validate - Validate zone configuration GET /api/internal/users/{id}/preferences - Get user preferences PUT /api/internal/users/{id}/preferences - Update user preferences POST /api/internal/validation - Validate various data types","title":"Internal API Endpoints"},{"location":"configuration/api/#api-documentation","text":"When docs_enabled is true, interactive API documentation is available at /api/docs . This provides: Interactive testing - Test API endpoints directly Request/response examples - See data formats Authentication guide - Learn how to authenticate Error codes - Understand error responses","title":"API Documentation"},{"location":"configuration/api/#security-considerations","text":"","title":"Security Considerations"},{"location":"configuration/api/#production-setup","text":"'api' => [ 'enabled' => true, 'basic_auth_enabled' => false, // Use API keys only 'log_requests' => true, // Enable audit logging 'docs_enabled' => false, // Disable docs in production ],","title":"Production Setup"},{"location":"configuration/api/#security-best-practices","text":"Use HTTPS only - Never expose API over HTTP API key rotation - Regularly rotate API keys Access control - Restrict API access by IP if possible Audit logging - Log all API requests and responses","title":"Security Best Practices"},{"location":"configuration/api/#requestresponse-format","text":"","title":"Request/Response Format"},{"location":"configuration/api/#request-format","text":"{ \"name\": \"example.com\", \"type\": \"A\", \"content\": \"192.168.1.100\", \"ttl\": 3600 }","title":"Request Format"},{"location":"configuration/api/#response-format","text":"{ \"success\": true, \"data\": { \"id\": 123, \"name\": \"example.com\", \"type\": \"A\", \"content\": \"192.168.1.100\", \"ttl\": 3600, \"created_at\": \"2023-01-01T12:00:00Z\", \"updated_at\": \"2023-01-01T12:00:00Z\" } }","title":"Response Format"},{"location":"configuration/api/#error-response","text":"{ \"success\": false, \"error\": { \"code\": \"VALIDATION_ERROR\", \"message\": \"Invalid record type\", \"details\": { \"field\": \"type\", \"value\": \"INVALID\" } } }","title":"Error Response"},{"location":"configuration/api/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"configuration/api/#common-issues","text":"401 Unauthorized : Invalid API key or credentials 403 Forbidden : Insufficient permissions 500 Internal Server Error : Server configuration issue","title":"Common Issues"},{"location":"configuration/api/#debugging","text":"Enable request logging for troubleshooting: 'api' => [ 'log_requests' => true, ], Check logs in your configured logging destination for detailed request/response information.","title":"Debugging"},{"location":"configuration/basic/","text":"Basic Configuration Poweradmin supports two configuration formats: legacy (individual PHP variables) and modern (array-based configuration). Configuration Files With any new installation, the file config/settings.defaults.php (or in legacy versions, inc/config-defaults.inc.php ) is distributed. You should not edit this file as your changes will likely be overwritten during upgrades. Instead: - Modern format: Create config/settings.php - Legacy format: Create inc/config.inc.php Your custom settings will override the defaults. This way, new configuration options can be added with sensible defaults without breaking your existing configuration. Legacy Configuration Format This is the traditional format, still supported for backwards compatibility: <?php $db_host = 'localhost'; $db_name = 'powerdns-db'; $db_user = 'poweradmin-db-user'; $db_pass = 'poweradmin-db-user-password'; $db_type = 'mysql'; $session_key = 'generate-some-random-text-here'; $dns_hostmaster = 'hostmaster.example.net'; $dns_ns1 = 'ns1.example.net'; $dns_ns2 = 'ns2.example.net'; Modern Configuration Format The recommended modern format uses a PHP array structure: <?php return [ 'database' => [ 'host' => 'localhost', 'name' => 'powerdns-db', 'user' => 'poweradmin-db-user', 'password' => 'poweradmin-db-user-password', 'type' => 'mysql', ], 'security' => [ 'session_key' => 'change_this_key', ], 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', ], ]; Configuration Sections The modern configuration format is organized into logical sections: database : Database connection settings security : Security-related settings including password policies and session management dns : DNS-specific configurations including nameserver details interface : UI and display preferences logging : Logging configuration pdns_api : PowerDNS API integration settings mail : Email configuration for notifications dnssec : DNSSEC functionality settings ldap : LDAP authentication settings whois : WHOIS lookup functionality settings rdap : RDAP (Registration Data Access Protocol) settings api : REST API configuration user_agreement : User agreement system settings misc : Miscellaneous settings like timezone and edit conflict handling Configuration Variables The following configuration variables are available in the legacy format, with their modern array format equivalents: Database Settings Legacy variable Modern equivalent Default value Description Added in version $db_host database.host no default The host to connect to for access to the database. $db_port database.port no default The port to use for database connection. $db_user database.user no default The username to use to access the database. $db_pass database.password no default The password to use to access the database. $db_name database.name no default The name of the database of PowerDNS. $db_type database.type no default The type of the database of PowerDNS. Poweradmin currently has support for 'mysql', 'mysqli', 'pgsql' and 'sqlite'. mysqli - 2.1.5, sqlite - 2.1.6 $db_charset database.charset no default The charset set which is used for communication with database (for example - 'utf8' for MySQL) 2.1.8 $db_file database.file no default Used only for SQLite, provide full path to database file 2.1.6 $db_debug database.debug false Show all executed SQL queries (if true) 2.1.6 $pdns_db_name database.pdns_db_name powerdns Used for a separate database for PowerDNS 3.8.0 API Settings Legacy variable Modern equivalent Default value Description Added in version $pdns_api_url pdns_api.url no default The endpoint for establishing a connection to the PowerDNS API. 3.7.0 $pdns_api_key pdns_api.key no default The authentication key required for establishing a connection with the PowerDNS API. 3.7.0 Security Settings Legacy variable Modern equivalent Default value Description Added in version $session_key security.session_key p0w3r4dm1n The key used for session data encryption 2.1.6 $password_encryption security.password_encryption \"bcrypt\" The type of encryption used for keeping user passwords in database. Other possible values - md5, md5salt (compatible with WHMCS), argon2i, argon2id 2.1.6 $password_encryption_cost security.password_encryption_cost 12 The algorithmic cost (needed for bcrypt) 2.1.8 $login_token_validation security.login_token_validation true Enable or disable login token validation 3.9.0 $global_token_validation security.global_token_validation true Enable or disable global token validation 3.9.0 Interface Settings Legacy variable Modern equivalent Default value Description Added in version $iface_lang interface.lang en_EN The language for the interface. $iface_enabled_languages interface.enabled_languages multiple* Languages enabled in the interface. 3.8.0 $iface_style interface.style ignite The CSS template to use as skin of web interface. See \"style/\" directory. If you want a dark theme, use 'spark'. $iface_templates interface.templates templates The HTML templates to use for web interface. See \"templates/\" directory. 2.2.3 $iface_rowamount interface.rowamount 10 The maximum number of rows that should be shown (usefull if you have a large number of zones or records). $iface_expire interface.expire 1800 Session time-out in seconds. After this timeout, you are automagically logged out. $iface_zonelist_serial interface.zonelist_serial false Enable (true) or disable (false) display of zone's serial in the zone listing. $iface_zonelist_template interface.zonelist_template false Enable (true) or disable (false) display of zone's template in the zone listing. $iface_title interface.title Poweradmin The title which is showed in header 2.1.5 $iface_add_reverse_record interface.add_reverse_record true Displays a checkbox for adding a reverse record 2.1.7 $iface_add_domain_record interface.add_domain_record true Displays a checkbox for adding an A/AAAA record from the reverse zone view $iface_zone_type_default interface.zone_type_default MASTER Default zone type when creating new zones 2.1.9 $iface_zone_comments interface.zone_comments true Show or hide zone comments 2.2.3 $iface_record_comments interface.record_comments false Show or hide record comments 3.9.0 $iface_index interface.index cards Interface display mode (cards or list) 3.2.0 $iface_search_group_records interface.search_group_records false Group records by name and content in search results 3.8.0 $iface_edit_show_id interface.edit_show_id true Show or hide record ID in edit form 3.9.0 $iface_edit_add_record_top interface.edit_add_record_top false Add new record fields on top of the list 3.9.0 $iface_edit_save_changes_top interface.edit_save_changes_top false Save changes button on top of the list 3.9.0 $iface_migrations_show interface.migrations_show false Show or hide migrations in the menu (experimental) * Default enabled languages: cs_CZ, de_DE, en_EN, fr_FR, it_IT, ja_JP, lt_LT, nb_NO, nl_NL, pl_PL, ru_RU, tr_TR, zh_CN DNS Settings Legacy variable Modern equivalent Default value Description Added in version $dns_hostmaster dns.hostmaster no default The default emailaddress to use for the RP in the SOA record. For example: 'hostmaster.example.net'. $dns_ns1 dns.ns1 no default The default primary nameserver. $dns_ns2 dns.ns2 no default The default secondary nameserver. $dns_ns3 dns.ns3 no default The third secondary nameserver. $dns_ns4 dns.ns4 no default The fourth secondary nameserver. $dns_ttl dns.ttl 86400 The default TTL for records (in seconds of course). $dns_soa dns.soa 28800 7200 604800 86400 SOA settings for refresh, retry, expire and minimum 2.2.3 $dns_strict_tld_check dns.strict_tld_check false If enabled (true), allow official TLD's only. $dns_top_level_tld_check dns.top_level_tld_check false Don't allow to create top level TLDs 2.1.7 $dns_third_level_check dns.third_level_check false Don't allow to create third level domains 2.1.7 $dns_txt_auto_quote dns.txt_auto_quote false Automatically quote TXT records 3.9.2 Timezone Settings Legacy variable Modern equivalent Default value Description Added in version $timezone timezone UTC Set timezone (for php 5.1.0+). See http://www.php.net/manual/en/timezones.php for list of supported timezones. Logging Settings Legacy variable Modern equivalent Default value Description Added in version $logger_type logging.type null Logger type (null, native) 3.9.0 $logger_level logging.level info Logging level (debug, info, notice, warning, error, critical, alert, emergency) 3.9.0 $syslog_use logging.syslog.use false Enable (true) or disable (false) logging of authentication attempts and other operations to syslog 2.1.6 $syslog_ident logging.syslog.ident poweradmin Specifies program name which is added to syslog message 2.1.6 $syslog_facility logging.syslog.facility LOG_USER Specifies what type of program is logging the message 2.1.6 $dblog_use logging.dblog.use false Enable (true) or disable (false) logging to database 3.2.0 DNSSEC Settings Legacy variable Modern equivalent Default value Description Added in version $pdnssec_use dnssec.use false Enable (true) or disable (false) DNSSEC support 2.1.7 $pdnssec_debug dnssec.debug false Enable debug for DNSSEC operations 2.1.9 $pdnssec_command dnssec.command /usr/bin/pdnsutil Full path to pdnsutil utility (will be deprecated in the future) 2.1.7 LDAP Settings Legacy variable Modern equivalent Default value Description Added in version $ldap_use ldap.use false Authenticate against directory service (LDAP/Active Directory) 2.1.7 $ldap_debug ldap.debug false Enable debug for LDAP connection 2.1.7 $ldap_uri ldap.uri ldap://domaincontroller.example.com LDAP URI 2.1.7 $ldap_basedn ldap.basedn ou=users,dc=example,dc=com The top level of the LDAP directory tree 2.1.7 $ldap_search_filter ldap.search_filter no default Filter for LDAP search 2.1.7 $ldap_binddn ldap.binddn cn=admin,dc=example,dc=com LDAP user 2.1.7 $ldap_bindpw ldap.bindpw some_password password for LDAP user 2.1.7 $ldap_user_attribute ldap.user_attribute uid username attribute used in LDAP search filter 2.1.7 $ldap_proto ldap.proto 3 LDAP protocol version 2.1.7 LDAP search filter examples: $ldap_search_filter = '(memberOf=cn=powerdns,ou=groups,dc=poweradmin,dc=org)'; $ldap_search_filter = '(objectClass=account)'; $ldap_search_filter = '(objectClass=person)(memberOf=cn=admins,ou=groups,dc=poweradmin,dc=org)'; $ldap_search_filter = '(cn=*admin*)'; Other Settings Legacy variable Modern equivalent Default value Description Added in version $display_stats misc.display_stats false Displays the memory consumption and execution time of an application $experimental_edit_conflict_resolution misc.edit_conflict_resolution last_writer_wins Controls how concurrent updates are handled (last_writer_wins, only_latest_version, 3_way_merge) $record_comments_sync misc.record_comments_sync false Enable bidirectional comment synchronization between A and PTR records 3.9.0 N/A misc.timezone UTC Default timezone for the application N/A misc.display_errors false Display PHP errors (false for production) 4.0.0 N/A misc.show_generated_passwords true Show generated passwords on user creation 4.0.0 For detailed information about specific settings, see: Database Configuration DNS Settings Security Policies PowerDNS API LDAP Integration Logging Setup WHOIS Configuration RDAP Configuration API Configuration User Agreements Important Notes When using the modern format, all settings should be included in the array structure The legacy format is maintained for backward compatibility but new installations should use the modern format Never commit sensitive information like passwords to version control Always change default values, especially the session_key , in production environments Make sure to set appropriate file permissions on your configuration file","title":"Basic Configuration"},{"location":"configuration/basic/#basic-configuration","text":"Poweradmin supports two configuration formats: legacy (individual PHP variables) and modern (array-based configuration).","title":"Basic Configuration"},{"location":"configuration/basic/#configuration-files","text":"With any new installation, the file config/settings.defaults.php (or in legacy versions, inc/config-defaults.inc.php ) is distributed. You should not edit this file as your changes will likely be overwritten during upgrades. Instead: - Modern format: Create config/settings.php - Legacy format: Create inc/config.inc.php Your custom settings will override the defaults. This way, new configuration options can be added with sensible defaults without breaking your existing configuration.","title":"Configuration Files"},{"location":"configuration/basic/#legacy-configuration-format","text":"This is the traditional format, still supported for backwards compatibility: <?php $db_host = 'localhost'; $db_name = 'powerdns-db'; $db_user = 'poweradmin-db-user'; $db_pass = 'poweradmin-db-user-password'; $db_type = 'mysql'; $session_key = 'generate-some-random-text-here'; $dns_hostmaster = 'hostmaster.example.net'; $dns_ns1 = 'ns1.example.net'; $dns_ns2 = 'ns2.example.net';","title":"Legacy Configuration Format"},{"location":"configuration/basic/#modern-configuration-format","text":"The recommended modern format uses a PHP array structure: <?php return [ 'database' => [ 'host' => 'localhost', 'name' => 'powerdns-db', 'user' => 'poweradmin-db-user', 'password' => 'poweradmin-db-user-password', 'type' => 'mysql', ], 'security' => [ 'session_key' => 'change_this_key', ], 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', ], ];","title":"Modern Configuration Format"},{"location":"configuration/basic/#configuration-sections","text":"The modern configuration format is organized into logical sections: database : Database connection settings security : Security-related settings including password policies and session management dns : DNS-specific configurations including nameserver details interface : UI and display preferences logging : Logging configuration pdns_api : PowerDNS API integration settings mail : Email configuration for notifications dnssec : DNSSEC functionality settings ldap : LDAP authentication settings whois : WHOIS lookup functionality settings rdap : RDAP (Registration Data Access Protocol) settings api : REST API configuration user_agreement : User agreement system settings misc : Miscellaneous settings like timezone and edit conflict handling","title":"Configuration Sections"},{"location":"configuration/basic/#configuration-variables","text":"The following configuration variables are available in the legacy format, with their modern array format equivalents:","title":"Configuration Variables"},{"location":"configuration/basic/#database-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $db_host database.host no default The host to connect to for access to the database. $db_port database.port no default The port to use for database connection. $db_user database.user no default The username to use to access the database. $db_pass database.password no default The password to use to access the database. $db_name database.name no default The name of the database of PowerDNS. $db_type database.type no default The type of the database of PowerDNS. Poweradmin currently has support for 'mysql', 'mysqli', 'pgsql' and 'sqlite'. mysqli - 2.1.5, sqlite - 2.1.6 $db_charset database.charset no default The charset set which is used for communication with database (for example - 'utf8' for MySQL) 2.1.8 $db_file database.file no default Used only for SQLite, provide full path to database file 2.1.6 $db_debug database.debug false Show all executed SQL queries (if true) 2.1.6 $pdns_db_name database.pdns_db_name powerdns Used for a separate database for PowerDNS 3.8.0","title":"Database Settings"},{"location":"configuration/basic/#api-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $pdns_api_url pdns_api.url no default The endpoint for establishing a connection to the PowerDNS API. 3.7.0 $pdns_api_key pdns_api.key no default The authentication key required for establishing a connection with the PowerDNS API. 3.7.0","title":"API Settings"},{"location":"configuration/basic/#security-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $session_key security.session_key p0w3r4dm1n The key used for session data encryption 2.1.6 $password_encryption security.password_encryption \"bcrypt\" The type of encryption used for keeping user passwords in database. Other possible values - md5, md5salt (compatible with WHMCS), argon2i, argon2id 2.1.6 $password_encryption_cost security.password_encryption_cost 12 The algorithmic cost (needed for bcrypt) 2.1.8 $login_token_validation security.login_token_validation true Enable or disable login token validation 3.9.0 $global_token_validation security.global_token_validation true Enable or disable global token validation 3.9.0","title":"Security Settings"},{"location":"configuration/basic/#interface-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $iface_lang interface.lang en_EN The language for the interface. $iface_enabled_languages interface.enabled_languages multiple* Languages enabled in the interface. 3.8.0 $iface_style interface.style ignite The CSS template to use as skin of web interface. See \"style/\" directory. If you want a dark theme, use 'spark'. $iface_templates interface.templates templates The HTML templates to use for web interface. See \"templates/\" directory. 2.2.3 $iface_rowamount interface.rowamount 10 The maximum number of rows that should be shown (usefull if you have a large number of zones or records). $iface_expire interface.expire 1800 Session time-out in seconds. After this timeout, you are automagically logged out. $iface_zonelist_serial interface.zonelist_serial false Enable (true) or disable (false) display of zone's serial in the zone listing. $iface_zonelist_template interface.zonelist_template false Enable (true) or disable (false) display of zone's template in the zone listing. $iface_title interface.title Poweradmin The title which is showed in header 2.1.5 $iface_add_reverse_record interface.add_reverse_record true Displays a checkbox for adding a reverse record 2.1.7 $iface_add_domain_record interface.add_domain_record true Displays a checkbox for adding an A/AAAA record from the reverse zone view $iface_zone_type_default interface.zone_type_default MASTER Default zone type when creating new zones 2.1.9 $iface_zone_comments interface.zone_comments true Show or hide zone comments 2.2.3 $iface_record_comments interface.record_comments false Show or hide record comments 3.9.0 $iface_index interface.index cards Interface display mode (cards or list) 3.2.0 $iface_search_group_records interface.search_group_records false Group records by name and content in search results 3.8.0 $iface_edit_show_id interface.edit_show_id true Show or hide record ID in edit form 3.9.0 $iface_edit_add_record_top interface.edit_add_record_top false Add new record fields on top of the list 3.9.0 $iface_edit_save_changes_top interface.edit_save_changes_top false Save changes button on top of the list 3.9.0 $iface_migrations_show interface.migrations_show false Show or hide migrations in the menu (experimental) * Default enabled languages: cs_CZ, de_DE, en_EN, fr_FR, it_IT, ja_JP, lt_LT, nb_NO, nl_NL, pl_PL, ru_RU, tr_TR, zh_CN","title":"Interface Settings"},{"location":"configuration/basic/#dns-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $dns_hostmaster dns.hostmaster no default The default emailaddress to use for the RP in the SOA record. For example: 'hostmaster.example.net'. $dns_ns1 dns.ns1 no default The default primary nameserver. $dns_ns2 dns.ns2 no default The default secondary nameserver. $dns_ns3 dns.ns3 no default The third secondary nameserver. $dns_ns4 dns.ns4 no default The fourth secondary nameserver. $dns_ttl dns.ttl 86400 The default TTL for records (in seconds of course). $dns_soa dns.soa 28800 7200 604800 86400 SOA settings for refresh, retry, expire and minimum 2.2.3 $dns_strict_tld_check dns.strict_tld_check false If enabled (true), allow official TLD's only. $dns_top_level_tld_check dns.top_level_tld_check false Don't allow to create top level TLDs 2.1.7 $dns_third_level_check dns.third_level_check false Don't allow to create third level domains 2.1.7 $dns_txt_auto_quote dns.txt_auto_quote false Automatically quote TXT records 3.9.2","title":"DNS Settings"},{"location":"configuration/basic/#timezone-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $timezone timezone UTC Set timezone (for php 5.1.0+). See http://www.php.net/manual/en/timezones.php for list of supported timezones.","title":"Timezone Settings"},{"location":"configuration/basic/#logging-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $logger_type logging.type null Logger type (null, native) 3.9.0 $logger_level logging.level info Logging level (debug, info, notice, warning, error, critical, alert, emergency) 3.9.0 $syslog_use logging.syslog.use false Enable (true) or disable (false) logging of authentication attempts and other operations to syslog 2.1.6 $syslog_ident logging.syslog.ident poweradmin Specifies program name which is added to syslog message 2.1.6 $syslog_facility logging.syslog.facility LOG_USER Specifies what type of program is logging the message 2.1.6 $dblog_use logging.dblog.use false Enable (true) or disable (false) logging to database 3.2.0","title":"Logging Settings"},{"location":"configuration/basic/#dnssec-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $pdnssec_use dnssec.use false Enable (true) or disable (false) DNSSEC support 2.1.7 $pdnssec_debug dnssec.debug false Enable debug for DNSSEC operations 2.1.9 $pdnssec_command dnssec.command /usr/bin/pdnsutil Full path to pdnsutil utility (will be deprecated in the future) 2.1.7","title":"DNSSEC Settings"},{"location":"configuration/basic/#ldap-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $ldap_use ldap.use false Authenticate against directory service (LDAP/Active Directory) 2.1.7 $ldap_debug ldap.debug false Enable debug for LDAP connection 2.1.7 $ldap_uri ldap.uri ldap://domaincontroller.example.com LDAP URI 2.1.7 $ldap_basedn ldap.basedn ou=users,dc=example,dc=com The top level of the LDAP directory tree 2.1.7 $ldap_search_filter ldap.search_filter no default Filter for LDAP search 2.1.7 $ldap_binddn ldap.binddn cn=admin,dc=example,dc=com LDAP user 2.1.7 $ldap_bindpw ldap.bindpw some_password password for LDAP user 2.1.7 $ldap_user_attribute ldap.user_attribute uid username attribute used in LDAP search filter 2.1.7 $ldap_proto ldap.proto 3 LDAP protocol version 2.1.7 LDAP search filter examples: $ldap_search_filter = '(memberOf=cn=powerdns,ou=groups,dc=poweradmin,dc=org)'; $ldap_search_filter = '(objectClass=account)'; $ldap_search_filter = '(objectClass=person)(memberOf=cn=admins,ou=groups,dc=poweradmin,dc=org)'; $ldap_search_filter = '(cn=*admin*)';","title":"LDAP Settings"},{"location":"configuration/basic/#other-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $display_stats misc.display_stats false Displays the memory consumption and execution time of an application $experimental_edit_conflict_resolution misc.edit_conflict_resolution last_writer_wins Controls how concurrent updates are handled (last_writer_wins, only_latest_version, 3_way_merge) $record_comments_sync misc.record_comments_sync false Enable bidirectional comment synchronization between A and PTR records 3.9.0 N/A misc.timezone UTC Default timezone for the application N/A misc.display_errors false Display PHP errors (false for production) 4.0.0 N/A misc.show_generated_passwords true Show generated passwords on user creation 4.0.0 For detailed information about specific settings, see: Database Configuration DNS Settings Security Policies PowerDNS API LDAP Integration Logging Setup WHOIS Configuration RDAP Configuration API Configuration User Agreements","title":"Other Settings"},{"location":"configuration/basic/#important-notes","text":"When using the modern format, all settings should be included in the array structure The legacy format is maintained for backward compatibility but new installations should use the modern format Never commit sensitive information like passwords to version control Always change default values, especially the session_key , in production environments Make sure to set appropriate file permissions on your configuration file","title":"Important Notes"},{"location":"configuration/database/","text":"Database Configuration Poweradmin's database settings are configured in the config/settings.php file under the database section. This guide covers the general configuration options. For database-specific setup instructions, refer to the links at the bottom of this page. Configuration Options type : Database type. Options: 'mysql', 'pgsql', 'sqlite'. Default: 'mysql' host : Database server hostname. Default: 'localhost' port : Database server port. Default: '3306' for MySQL, '5432' for PostgreSQL name : Database name. Default: 'powerdns' user : Database username password : Database password charset : Database character set. Options: 'latin1', 'utf8', 'utf8mb4'. Default: 'latin1' file : SQLite database file path (only for SQLite) debug : Enable SQL query debugging. Default: false pdns_db_name : Separate database name for PowerDNS (added in v3.8.0). Default: same as 'name' Example Configuration return [ 'database' => [ 'host' => 'localhost', 'port' => '3306', 'name' => 'powerdns', 'user' => 'poweradmin', 'password' => 'your_secure_password', 'type' => 'mysql', 'charset' => 'latin1', 'file' => '', 'debug' => false, 'pdns_db_name' => 'powerdns', // Optional: Use when PowerDNS tables are in a separate database ], ]; Database Types Poweradmin supports multiple database backends: MySQL/MariaDB (recommended): Offers good performance and wide compatibility PostgreSQL : Provides advanced features and strict SQL standard compliance SQLite : Lightweight option for small deployments or testing Poweradmin uses PowerDNS's own database tables for zones and records. It directly queries the PowerDNS tables like domains and records, while maintaining its own tables for user permissions and metadata. The system will display all zones in the PowerDNS database, regardless of how they were created (through Poweradmin UI or via REST API). \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 Poweradmin \u2502 \u2502 PowerDNS \u2502 \u2502 Application \u2502 \u2502 Server \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 Database Server \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 PowerDNS \u2502 \u2502 \u2502 \u2502 Tables \u2502 \u2502 \u2502 \u2502 - domains \u2502 \u2502 \u2502 \u2502 - records \u2502 \u2502 \u2502 \u2502 - ... \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Poweradmin \u2502 \u2502 \u2502 \u2502 Tables \u2502 \u2502 \u2502 \u2502 - users \u2502 \u2502 \u2502 \u2502 - permissions\u2502 \u2502 \u2502 \u2502 - ... \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Database-Specific Setup Guides For detailed setup instructions for each database type, including schema creation, permissions, and optimization tips, see: MySQL/MariaDB Setup PostgreSQL Setup SQLite Setup These guides provide comprehensive information about: - Creating users and databases - Setting up permissions - Installing schema files - Performance optimization - Troubleshooting common issues","title":"Database Configuration"},{"location":"configuration/database/#database-configuration","text":"Poweradmin's database settings are configured in the config/settings.php file under the database section. This guide covers the general configuration options. For database-specific setup instructions, refer to the links at the bottom of this page.","title":"Database Configuration"},{"location":"configuration/database/#configuration-options","text":"type : Database type. Options: 'mysql', 'pgsql', 'sqlite'. Default: 'mysql' host : Database server hostname. Default: 'localhost' port : Database server port. Default: '3306' for MySQL, '5432' for PostgreSQL name : Database name. Default: 'powerdns' user : Database username password : Database password charset : Database character set. Options: 'latin1', 'utf8', 'utf8mb4'. Default: 'latin1' file : SQLite database file path (only for SQLite) debug : Enable SQL query debugging. Default: false pdns_db_name : Separate database name for PowerDNS (added in v3.8.0). Default: same as 'name'","title":"Configuration Options"},{"location":"configuration/database/#example-configuration","text":"return [ 'database' => [ 'host' => 'localhost', 'port' => '3306', 'name' => 'powerdns', 'user' => 'poweradmin', 'password' => 'your_secure_password', 'type' => 'mysql', 'charset' => 'latin1', 'file' => '', 'debug' => false, 'pdns_db_name' => 'powerdns', // Optional: Use when PowerDNS tables are in a separate database ], ];","title":"Example Configuration"},{"location":"configuration/database/#database-types","text":"Poweradmin supports multiple database backends: MySQL/MariaDB (recommended): Offers good performance and wide compatibility PostgreSQL : Provides advanced features and strict SQL standard compliance SQLite : Lightweight option for small deployments or testing Poweradmin uses PowerDNS's own database tables for zones and records. It directly queries the PowerDNS tables like domains and records, while maintaining its own tables for user permissions and metadata. The system will display all zones in the PowerDNS database, regardless of how they were created (through Poweradmin UI or via REST API). \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 Poweradmin \u2502 \u2502 PowerDNS \u2502 \u2502 Application \u2502 \u2502 Server \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 Database Server \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 PowerDNS \u2502 \u2502 \u2502 \u2502 Tables \u2502 \u2502 \u2502 \u2502 - domains \u2502 \u2502 \u2502 \u2502 - records \u2502 \u2502 \u2502 \u2502 - ... \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Poweradmin \u2502 \u2502 \u2502 \u2502 Tables \u2502 \u2502 \u2502 \u2502 - users \u2502 \u2502 \u2502 \u2502 - permissions\u2502 \u2502 \u2502 \u2502 - ... \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Database Types"},{"location":"configuration/database/#database-specific-setup-guides","text":"For detailed setup instructions for each database type, including schema creation, permissions, and optimization tips, see: MySQL/MariaDB Setup PostgreSQL Setup SQLite Setup These guides provide comprehensive information about: - Creating users and databases - Setting up permissions - Installing schema files - Performance optimization - Troubleshooting common issues","title":"Database-Specific Setup Guides"},{"location":"configuration/dns-settings/","text":"DNS Settings DNS settings in Poweradmin can be configured through the config/settings.php file under the dns section or through individual variables in the legacy configuration format. Configuration Options Legacy variable Modern equivalent Default value Description Added in version $dns_hostmaster dns.hostmaster no default The default email address to use for the SOA record (e.g., 'hostmaster.example.net'). $dns_ns1 dns.ns1 no default The default primary nameserver. $dns_ns2 dns.ns2 no default The default secondary nameserver. $dns_ns3 dns.ns3 no default The third nameserver. $dns_ns4 dns.ns4 no default The fourth nameserver. $dns_ttl dns.ttl 86400 The default TTL for records (in seconds). $dns_soa (see below) 28800 7200 604800 86400 SOA settings for refresh, retry, expire and minimum 2.2.3 - dns.soa_refresh 28800 SOA refresh time 2.2.3 - dns.soa_retry 7200 SOA retry time 2.2.3 - dns.soa_expire 604800 SOA expire time 2.2.3 - dns.soa_minimum 86400 SOA minimum TTL 2.2.3 $dns_strict_tld_check dns.strict_tld_check false If enabled (true), allow official TLDs only. $dns_top_level_tld_check dns.top_level_tld_check false Don't allow creation of top-level TLDs when true. 2.1.7 $dns_third_level_check dns.third_level_check false Don't allow creation of third-level domains when true. 2.1.7 $dns_txt_auto_quote dns.txt_auto_quote false Automatically quote TXT records when true. 3.9.2 $iface_zone_type_default dns.zone_type_default MASTER Default zone type when creating new zones. 2.1.9 - dns.prevent_duplicate_ptr true Prevent creation of multiple PTR records for same IP in batch operations. 4.0.0 - dns.domain_record_types null Custom record types for domain zones (null uses defaults). 4.0.0 - dns.reverse_record_types null Custom record types for reverse zones (null uses defaults). 4.0.0 SOA Record Settings In the modern configuration format, the SOA settings are configured as individual parameters: refresh : The time interval before the zone should be refreshed. Default: 28800 (8 hours) retry : The time interval that should elapse before a failed refresh should be retried. Default: 7200 (2 hours) expire : The upper limit on the time interval that can elapse before the zone is no longer authoritative. Default: 604800 (1 week) minimum : The negative result TTL. Default: 86400 (24 hours) In the legacy format, these are combined in the $dns_soa variable as a space-separated string. Record Type Configuration You can customize which record types are available in the zone editing interface: domain_record_types : Array of record types for domain zones. Set to null to use defaults. reverse_record_types : Array of record types for reverse zones. Set to null to use defaults. Example custom configuration: 'dns' => [ 'domain_record_types' => ['A', 'AAAA', 'CNAME', 'MX', 'NS', 'SOA', 'TXT', 'SRV', 'CAA'], 'reverse_record_types' => ['PTR', 'NS', 'SOA', 'TXT', 'CNAME'], ], Modern Configuration Example return [ 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', 'ns3' => 'ns3.example.com', 'ns4' => 'ns4.example.com', 'ttl' => 86400, // SOA settings 'soa_refresh' => 28800, 'soa_retry' => 7200, 'soa_expire' => 604800, 'soa_minimum' => 86400, 'zone_type_default' => 'MASTER', 'strict_tld_check' => false, 'top_level_tld_check' => false, 'third_level_check' => false, 'txt_auto_quote' => false, 'prevent_duplicate_ptr' => true, 'domain_record_types' => null, // Uses default types 'reverse_record_types' => null, // Uses default types ], ]; Legacy Configuration Example <?php // DNS settings $dns_hostmaster = 'hostmaster.example.com'; $dns_ns1 = 'ns1.example.com'; $dns_ns2 = 'ns2.example.com'; $dns_ns3 = 'ns3.example.com'; $dns_ns4 = 'ns4.example.com'; $dns_ttl = 86400; $dns_soa = '28800 7200 604800 86400'; $dns_strict_tld_check = false; $dns_top_level_tld_check = false; $dns_third_level_check = false; $dns_txt_auto_quote = false; $iface_zone_type_default = 'MASTER';","title":"DNS Settings"},{"location":"configuration/dns-settings/#dns-settings","text":"DNS settings in Poweradmin can be configured through the config/settings.php file under the dns section or through individual variables in the legacy configuration format.","title":"DNS Settings"},{"location":"configuration/dns-settings/#configuration-options","text":"Legacy variable Modern equivalent Default value Description Added in version $dns_hostmaster dns.hostmaster no default The default email address to use for the SOA record (e.g., 'hostmaster.example.net'). $dns_ns1 dns.ns1 no default The default primary nameserver. $dns_ns2 dns.ns2 no default The default secondary nameserver. $dns_ns3 dns.ns3 no default The third nameserver. $dns_ns4 dns.ns4 no default The fourth nameserver. $dns_ttl dns.ttl 86400 The default TTL for records (in seconds). $dns_soa (see below) 28800 7200 604800 86400 SOA settings for refresh, retry, expire and minimum 2.2.3 - dns.soa_refresh 28800 SOA refresh time 2.2.3 - dns.soa_retry 7200 SOA retry time 2.2.3 - dns.soa_expire 604800 SOA expire time 2.2.3 - dns.soa_minimum 86400 SOA minimum TTL 2.2.3 $dns_strict_tld_check dns.strict_tld_check false If enabled (true), allow official TLDs only. $dns_top_level_tld_check dns.top_level_tld_check false Don't allow creation of top-level TLDs when true. 2.1.7 $dns_third_level_check dns.third_level_check false Don't allow creation of third-level domains when true. 2.1.7 $dns_txt_auto_quote dns.txt_auto_quote false Automatically quote TXT records when true. 3.9.2 $iface_zone_type_default dns.zone_type_default MASTER Default zone type when creating new zones. 2.1.9 - dns.prevent_duplicate_ptr true Prevent creation of multiple PTR records for same IP in batch operations. 4.0.0 - dns.domain_record_types null Custom record types for domain zones (null uses defaults). 4.0.0 - dns.reverse_record_types null Custom record types for reverse zones (null uses defaults). 4.0.0","title":"Configuration Options"},{"location":"configuration/dns-settings/#soa-record-settings","text":"In the modern configuration format, the SOA settings are configured as individual parameters: refresh : The time interval before the zone should be refreshed. Default: 28800 (8 hours) retry : The time interval that should elapse before a failed refresh should be retried. Default: 7200 (2 hours) expire : The upper limit on the time interval that can elapse before the zone is no longer authoritative. Default: 604800 (1 week) minimum : The negative result TTL. Default: 86400 (24 hours) In the legacy format, these are combined in the $dns_soa variable as a space-separated string.","title":"SOA Record Settings"},{"location":"configuration/dns-settings/#record-type-configuration","text":"You can customize which record types are available in the zone editing interface: domain_record_types : Array of record types for domain zones. Set to null to use defaults. reverse_record_types : Array of record types for reverse zones. Set to null to use defaults. Example custom configuration: 'dns' => [ 'domain_record_types' => ['A', 'AAAA', 'CNAME', 'MX', 'NS', 'SOA', 'TXT', 'SRV', 'CAA'], 'reverse_record_types' => ['PTR', 'NS', 'SOA', 'TXT', 'CNAME'], ],","title":"Record Type Configuration"},{"location":"configuration/dns-settings/#modern-configuration-example","text":"return [ 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', 'ns3' => 'ns3.example.com', 'ns4' => 'ns4.example.com', 'ttl' => 86400, // SOA settings 'soa_refresh' => 28800, 'soa_retry' => 7200, 'soa_expire' => 604800, 'soa_minimum' => 86400, 'zone_type_default' => 'MASTER', 'strict_tld_check' => false, 'top_level_tld_check' => false, 'third_level_check' => false, 'txt_auto_quote' => false, 'prevent_duplicate_ptr' => true, 'domain_record_types' => null, // Uses default types 'reverse_record_types' => null, // Uses default types ], ];","title":"Modern Configuration Example"},{"location":"configuration/dns-settings/#legacy-configuration-example","text":"<?php // DNS settings $dns_hostmaster = 'hostmaster.example.com'; $dns_ns1 = 'ns1.example.com'; $dns_ns2 = 'ns2.example.com'; $dns_ns3 = 'ns3.example.com'; $dns_ns4 = 'ns4.example.com'; $dns_ttl = 86400; $dns_soa = '28800 7200 604800 86400'; $dns_strict_tld_check = false; $dns_top_level_tld_check = false; $dns_third_level_check = false; $dns_txt_auto_quote = false; $iface_zone_type_default = 'MASTER';","title":"Legacy Configuration Example"},{"location":"configuration/dnssec/","text":"DNSSEC Configuration Overview Poweradmin provides comprehensive support for DNSSEC (Domain Name System Security Extensions) through a well-structured implementation that follows domain-driven design principles. The system offers two implementation methods: PowerDNS API Integration (Recommended): Uses the PowerDNS REST API for DNSSEC operations pdnsutil Command-line Tool (Legacy): Uses the pdnsutil command-line utility The DNSSEC implementation enables you to: - Secure and unsecure zones - Manage cryptographic keys (create, activate, deactivate, delete) - View DS (Delegation Signer) and DNSKEY records - Manage DNSSEC key rollovers Basic Concepts Zone Signing Keys (ZSK) : Used to sign the actual DNS records Key Signing Keys (KSK) : Used to sign the ZSK and establish trust DS Records : Delegation Signer records that help establish the trust chain Key Rotation : Regular update of keys for enhanced security Prerequisites PowerDNS version 4.0.0 or higher PowerDNS with DNSSEC support Proper database configuration API access configured (see PowerDNS API Configuration ) Configuration Options DNSSEC settings can be configured in the config/settings.php file under the dnssec section or through individual variables in the legacy configuration format. Legacy variable Modern equivalent Default value Description Added in version $pdnssec_use dnssec.enabled false Enable (true) or disable (false) DNSSEC support 2.1.7 $pdnssec_debug dnssec.debug false Enable debug for DNSSEC operations 2.1.9 $pdnssec_command dnssec.command /usr/bin/pdnsutil Full path to pdnsutil utility (will be deprecated in the future) 2.1.7 Implementation Methods Option 1: PowerDNS API Method (Recommended) To enable DNSSEC using the PowerDNS API: Configure your PowerDNS server with API access Update your Poweradmin configuration file with the following settings: return [ 'dnssec' => [ 'enabled' => true, 'debug' => false, ], 'pdns_api' => [ 'url' => 'http://localhost:8081', 'key' => 'your-api-key', ], ]; The API method provides several advantages: - No need to configure special permissions for the web server user - More secure as it doesn't require shell access - Better error handling and feedback - Full support for all DNSSEC operations Option 2: pdnsutil Method (Legacy) If you can't use the API method, you can still use the legacy pdnsutil approach: return [ 'dnssec' => [ 'enabled' => true, 'debug' => false, 'command' => '/usr/bin/pdnsutil', ], 'pdns_api' => [ 'url' => '', 'key' => '', ], ]; Configure permissions for the web server user to run pdnsutil: For example, on Ubuntu with Apache: # Add the web server user to the root group adduser www-data root # Make pdns.conf readable by the web server user chmod 640 /etc/powerdns/pdns.conf Important Note : The pdnsutil method requires the web server user to have access to the PowerDNS configuration file, which poses security risks. The API method is strongly recommended. PowerDNS Configuration Make sure to enable DNSSEC in your PowerDNS configuration: dnssec=yes api=yes api-key=your_api_key Verification Check DNSSEC status using: dig +dnssec example.com SOA Migration If you're currently using the pdnsutil method, it's recommended to migrate to the API method: Configure the PowerDNS API (see PowerDNS documentation) Update your Poweradmin configuration with API settings No data migration is needed - the same DNSSEC keys will be accessible through both methods More Information For more details on DNSSEC and PowerDNS: - PowerDNS DNSSEC Documentation - PowerDNS API Documentation","title":"DNSSEC"},{"location":"configuration/dnssec/#dnssec-configuration","text":"","title":"DNSSEC Configuration"},{"location":"configuration/dnssec/#overview","text":"Poweradmin provides comprehensive support for DNSSEC (Domain Name System Security Extensions) through a well-structured implementation that follows domain-driven design principles. The system offers two implementation methods: PowerDNS API Integration (Recommended): Uses the PowerDNS REST API for DNSSEC operations pdnsutil Command-line Tool (Legacy): Uses the pdnsutil command-line utility The DNSSEC implementation enables you to: - Secure and unsecure zones - Manage cryptographic keys (create, activate, deactivate, delete) - View DS (Delegation Signer) and DNSKEY records - Manage DNSSEC key rollovers","title":"Overview"},{"location":"configuration/dnssec/#basic-concepts","text":"Zone Signing Keys (ZSK) : Used to sign the actual DNS records Key Signing Keys (KSK) : Used to sign the ZSK and establish trust DS Records : Delegation Signer records that help establish the trust chain Key Rotation : Regular update of keys for enhanced security","title":"Basic Concepts"},{"location":"configuration/dnssec/#prerequisites","text":"PowerDNS version 4.0.0 or higher PowerDNS with DNSSEC support Proper database configuration API access configured (see PowerDNS API Configuration )","title":"Prerequisites"},{"location":"configuration/dnssec/#configuration-options","text":"DNSSEC settings can be configured in the config/settings.php file under the dnssec section or through individual variables in the legacy configuration format. Legacy variable Modern equivalent Default value Description Added in version $pdnssec_use dnssec.enabled false Enable (true) or disable (false) DNSSEC support 2.1.7 $pdnssec_debug dnssec.debug false Enable debug for DNSSEC operations 2.1.9 $pdnssec_command dnssec.command /usr/bin/pdnsutil Full path to pdnsutil utility (will be deprecated in the future) 2.1.7","title":"Configuration Options"},{"location":"configuration/dnssec/#implementation-methods","text":"","title":"Implementation Methods"},{"location":"configuration/dnssec/#option-1-powerdns-api-method-recommended","text":"To enable DNSSEC using the PowerDNS API: Configure your PowerDNS server with API access Update your Poweradmin configuration file with the following settings: return [ 'dnssec' => [ 'enabled' => true, 'debug' => false, ], 'pdns_api' => [ 'url' => 'http://localhost:8081', 'key' => 'your-api-key', ], ]; The API method provides several advantages: - No need to configure special permissions for the web server user - More secure as it doesn't require shell access - Better error handling and feedback - Full support for all DNSSEC operations","title":"Option 1: PowerDNS API Method (Recommended)"},{"location":"configuration/dnssec/#option-2-pdnsutil-method-legacy","text":"If you can't use the API method, you can still use the legacy pdnsutil approach: return [ 'dnssec' => [ 'enabled' => true, 'debug' => false, 'command' => '/usr/bin/pdnsutil', ], 'pdns_api' => [ 'url' => '', 'key' => '', ], ]; Configure permissions for the web server user to run pdnsutil: For example, on Ubuntu with Apache: # Add the web server user to the root group adduser www-data root # Make pdns.conf readable by the web server user chmod 640 /etc/powerdns/pdns.conf Important Note : The pdnsutil method requires the web server user to have access to the PowerDNS configuration file, which poses security risks. The API method is strongly recommended.","title":"Option 2: pdnsutil Method (Legacy)"},{"location":"configuration/dnssec/#powerdns-configuration","text":"Make sure to enable DNSSEC in your PowerDNS configuration: dnssec=yes api=yes api-key=your_api_key","title":"PowerDNS Configuration"},{"location":"configuration/dnssec/#verification","text":"Check DNSSEC status using: dig +dnssec example.com SOA","title":"Verification"},{"location":"configuration/dnssec/#migration","text":"If you're currently using the pdnsutil method, it's recommended to migrate to the API method: Configure the PowerDNS API (see PowerDNS documentation) Update your Poweradmin configuration with API settings No data migration is needed - the same DNSSEC keys will be accessible through both methods","title":"Migration"},{"location":"configuration/dnssec/#more-information","text":"For more details on DNSSEC and PowerDNS: - PowerDNS DNSSEC Documentation - PowerDNS API Documentation","title":"More Information"},{"location":"configuration/ldap/","text":"LDAP Integration Poweradmin supports LDAP (Lightweight Directory Access Protocol) authentication, allowing you to integrate with your existing directory service such as Active Directory or OpenLDAP. Configuration Options LDAP settings can be configured in the config/settings.php file under the ldap section or through individual variables in the legacy configuration format. Legacy variable Modern equivalent Default value Description Added in version $ldap_use ldap.enabled false Enable LDAP authentication 2.1.7 $ldap_debug ldap.debug false Enable debug for LDAP connection 2.1.7 $ldap_uri ldap.uri ldap://domaincontroller.example.com LDAP server URI 2.1.7 $ldap_basedn ldap.base_dn ou=users,dc=example,dc=com The top level of the LDAP directory tree 2.1.7 $ldap_search_filter ldap.search_filter no default Filter for LDAP search 2.1.7 $ldap_binddn ldap.bind_dn cn=admin,dc=example,dc=com LDAP user for binding 2.1.7 $ldap_bindpw ldap.bind_password some_password Password for LDAP binding user 2.1.7 $ldap_user_attribute ldap.user_attribute uid Username attribute used in LDAP search filter 2.1.7 $ldap_proto ldap.protocol_version 3 LDAP protocol version 2.1.7 Modern Configuration Example return [ 'ldap' => [ 'enabled' => true, 'debug' => false, 'uri' => 'ldap://domaincontroller.example.com', 'base_dn' => 'ou=users,dc=example,dc=com', 'bind_dn' => 'cn=admin,dc=example,dc=com', 'bind_password' => 'some_password', 'user_attribute' => 'uid', 'protocol_version' => 3, 'search_filter' => '(objectClass=account)', ], ]; LDAP Search Filter Examples The search filter is used to limit which LDAP accounts can authenticate to Poweradmin: // Only users that are members of the 'powerdns' group $ldap_search_filter = '(memberOf=cn=powerdns,ou=groups,dc=poweradmin,dc=org)'; // All accounts $ldap_search_filter = '(objectClass=account)'; // Users that are both persons and members of the 'admins' group $ldap_search_filter = '(objectClass=person)(memberOf=cn=admins,ou=groups,dc=poweradmin,dc=org)'; // Users with 'admin' in their common name $ldap_search_filter = '(cn=*admin*)'; Basic Setup Enable LDAP authentication by setting 'enabled' => true in the configuration array. Configure your LDAP server URI and base DN. Set appropriate search filters based on your directory structure. Set binding credentials if required. Specify the user attribute that matches your directory structure. Advanced Configuration SSL/TLS Connection For secure LDAP (LDAPS), use the following configuration: 'uri' => 'ldaps://domaincontroller.example.com', User Attribute Mapping Configure how Poweradmin maps LDAP attributes to user properties: For OpenLDAP: 'user_attribute' => 'uid' For Active Directory: 'user_attribute' => 'sAMAccountName' Example Directory Configurations Active Directory return [ 'ldap' => [ 'enabled' => true, 'uri' => 'ldap://ad.company.com', 'base_dn' => 'DC=company,DC=com', 'bind_dn' => 'CN=ServiceAccount,OU=Users,DC=company,DC=com', 'bind_password' => 'password', 'user_attribute' => 'sAMAccountName', 'search_filter' => '(&(objectClass=user)(sAMAccountName=%s))', ], ]; OpenLDAP return [ 'ldap' => [ 'enabled' => true, 'uri' => 'ldap://ldap.company.com', 'base_dn' => 'ou=users,dc=company,dc=com', 'bind_dn' => 'cn=admin,dc=company,dc=com', 'bind_password' => 'password', 'user_attribute' => 'uid', 'search_filter' => '(&(objectClass=posixAccount)(uid=%s))', ], ]; Security Considerations Always use LDAPS (LDAP over SSL/TLS) in production environments Implement least privilege access for binding Regularly rotate LDAP binding credentials Consider implementing connection timeout settings Monitor failed authentication attempts Adding Users to Poweradmin Add a user to Poweradmin: The same user should exist in the LDAP schema:","title":"LDAP Integration"},{"location":"configuration/ldap/#ldap-integration","text":"Poweradmin supports LDAP (Lightweight Directory Access Protocol) authentication, allowing you to integrate with your existing directory service such as Active Directory or OpenLDAP.","title":"LDAP Integration"},{"location":"configuration/ldap/#configuration-options","text":"LDAP settings can be configured in the config/settings.php file under the ldap section or through individual variables in the legacy configuration format. Legacy variable Modern equivalent Default value Description Added in version $ldap_use ldap.enabled false Enable LDAP authentication 2.1.7 $ldap_debug ldap.debug false Enable debug for LDAP connection 2.1.7 $ldap_uri ldap.uri ldap://domaincontroller.example.com LDAP server URI 2.1.7 $ldap_basedn ldap.base_dn ou=users,dc=example,dc=com The top level of the LDAP directory tree 2.1.7 $ldap_search_filter ldap.search_filter no default Filter for LDAP search 2.1.7 $ldap_binddn ldap.bind_dn cn=admin,dc=example,dc=com LDAP user for binding 2.1.7 $ldap_bindpw ldap.bind_password some_password Password for LDAP binding user 2.1.7 $ldap_user_attribute ldap.user_attribute uid Username attribute used in LDAP search filter 2.1.7 $ldap_proto ldap.protocol_version 3 LDAP protocol version 2.1.7","title":"Configuration Options"},{"location":"configuration/ldap/#modern-configuration-example","text":"return [ 'ldap' => [ 'enabled' => true, 'debug' => false, 'uri' => 'ldap://domaincontroller.example.com', 'base_dn' => 'ou=users,dc=example,dc=com', 'bind_dn' => 'cn=admin,dc=example,dc=com', 'bind_password' => 'some_password', 'user_attribute' => 'uid', 'protocol_version' => 3, 'search_filter' => '(objectClass=account)', ], ];","title":"Modern Configuration Example"},{"location":"configuration/ldap/#ldap-search-filter-examples","text":"The search filter is used to limit which LDAP accounts can authenticate to Poweradmin: // Only users that are members of the 'powerdns' group $ldap_search_filter = '(memberOf=cn=powerdns,ou=groups,dc=poweradmin,dc=org)'; // All accounts $ldap_search_filter = '(objectClass=account)'; // Users that are both persons and members of the 'admins' group $ldap_search_filter = '(objectClass=person)(memberOf=cn=admins,ou=groups,dc=poweradmin,dc=org)'; // Users with 'admin' in their common name $ldap_search_filter = '(cn=*admin*)';","title":"LDAP Search Filter Examples"},{"location":"configuration/ldap/#basic-setup","text":"Enable LDAP authentication by setting 'enabled' => true in the configuration array. Configure your LDAP server URI and base DN. Set appropriate search filters based on your directory structure. Set binding credentials if required. Specify the user attribute that matches your directory structure.","title":"Basic Setup"},{"location":"configuration/ldap/#advanced-configuration","text":"","title":"Advanced Configuration"},{"location":"configuration/ldap/#ssltls-connection","text":"For secure LDAP (LDAPS), use the following configuration: 'uri' => 'ldaps://domaincontroller.example.com',","title":"SSL/TLS Connection"},{"location":"configuration/ldap/#user-attribute-mapping","text":"Configure how Poweradmin maps LDAP attributes to user properties: For OpenLDAP: 'user_attribute' => 'uid' For Active Directory: 'user_attribute' => 'sAMAccountName'","title":"User Attribute Mapping"},{"location":"configuration/ldap/#example-directory-configurations","text":"","title":"Example Directory Configurations"},{"location":"configuration/ldap/#active-directory","text":"return [ 'ldap' => [ 'enabled' => true, 'uri' => 'ldap://ad.company.com', 'base_dn' => 'DC=company,DC=com', 'bind_dn' => 'CN=ServiceAccount,OU=Users,DC=company,DC=com', 'bind_password' => 'password', 'user_attribute' => 'sAMAccountName', 'search_filter' => '(&(objectClass=user)(sAMAccountName=%s))', ], ];","title":"Active Directory"},{"location":"configuration/ldap/#openldap","text":"return [ 'ldap' => [ 'enabled' => true, 'uri' => 'ldap://ldap.company.com', 'base_dn' => 'ou=users,dc=company,dc=com', 'bind_dn' => 'cn=admin,dc=company,dc=com', 'bind_password' => 'password', 'user_attribute' => 'uid', 'search_filter' => '(&(objectClass=posixAccount)(uid=%s))', ], ];","title":"OpenLDAP"},{"location":"configuration/ldap/#security-considerations","text":"Always use LDAPS (LDAP over SSL/TLS) in production environments Implement least privilege access for binding Regularly rotate LDAP binding credentials Consider implementing connection timeout settings Monitor failed authentication attempts","title":"Security Considerations"},{"location":"configuration/ldap/#adding-users-to-poweradmin","text":"Add a user to Poweradmin: The same user should exist in the LDAP schema:","title":"Adding Users to Poweradmin"},{"location":"configuration/logging/","text":"Basic Logging Configuration Poweradmin's logging system provides comprehensive monitoring of system activity. This guide covers the basic configuration options. For advanced settings and best practices, see the Advanced Logging Configuration guide. Configuration Options Legacy variable Modern equivalent Default value Description Added in version $logger_type logging.type null Logger type (null, native) 3.9.0 $logger_level logging.level info Logging level (debug, info, notice, warning, error, critical, alert, emergency) 3.9.0 $syslog_use logging.syslog_enabled false Enable (true) or disable (false) logging of authentication attempts and other operations to syslog 2.1.6 $syslog_ident logging.syslog_identity poweradmin Specifies program name which is added to syslog message 2.1.6 $syslog_facility logging.syslog_facility LOG_USER Specifies what type of program is logging the message 2.1.6 $dblog_use logging.database_enabled false Enable (true) or disable (false) logging to database 3.2.0 Log Levels Available logging levels, in order of increasing severity: DEBUG: Detailed debug information INFO: Interesting events NOTICE: Normal but significant events WARNING: Exceptional occurrences that are not errors ERROR: Runtime errors that do not require immediate action CRITICAL: Critical conditions ALERT: Action must be taken immediately EMERGENCY: System is unusable When you set a specific log level, you will receive logs of that level and all higher severity levels. For example, setting level to warning will log warnings, errors, critical issues, alerts, and emergencies, but not info or debug messages. Modern Configuration Example return [ 'logging' => [ 'type' => 'native', 'level' => 'warning', 'database_enabled' => true, 'syslog_enabled' => true, 'syslog_identity' => 'poweradmin', 'syslog_facility' => LOG_USER, ], ]; Legacy Configuration Example <?php // Logging settings $logger_type = 'native'; $logger_level = 'warning'; $syslog_use = true; $syslog_ident = 'poweradmin'; $syslog_facility = LOG_USER; $dblog_use = true; For more advanced logging configuration, environment-specific examples, and best practices, see: - Advanced Logging Configuration","title":"Logging Setup"},{"location":"configuration/logging/#basic-logging-configuration","text":"Poweradmin's logging system provides comprehensive monitoring of system activity. This guide covers the basic configuration options. For advanced settings and best practices, see the Advanced Logging Configuration guide.","title":"Basic Logging Configuration"},{"location":"configuration/logging/#configuration-options","text":"Legacy variable Modern equivalent Default value Description Added in version $logger_type logging.type null Logger type (null, native) 3.9.0 $logger_level logging.level info Logging level (debug, info, notice, warning, error, critical, alert, emergency) 3.9.0 $syslog_use logging.syslog_enabled false Enable (true) or disable (false) logging of authentication attempts and other operations to syslog 2.1.6 $syslog_ident logging.syslog_identity poweradmin Specifies program name which is added to syslog message 2.1.6 $syslog_facility logging.syslog_facility LOG_USER Specifies what type of program is logging the message 2.1.6 $dblog_use logging.database_enabled false Enable (true) or disable (false) logging to database 3.2.0","title":"Configuration Options"},{"location":"configuration/logging/#log-levels","text":"Available logging levels, in order of increasing severity: DEBUG: Detailed debug information INFO: Interesting events NOTICE: Normal but significant events WARNING: Exceptional occurrences that are not errors ERROR: Runtime errors that do not require immediate action CRITICAL: Critical conditions ALERT: Action must be taken immediately EMERGENCY: System is unusable When you set a specific log level, you will receive logs of that level and all higher severity levels. For example, setting level to warning will log warnings, errors, critical issues, alerts, and emergencies, but not info or debug messages.","title":"Log Levels"},{"location":"configuration/logging/#modern-configuration-example","text":"return [ 'logging' => [ 'type' => 'native', 'level' => 'warning', 'database_enabled' => true, 'syslog_enabled' => true, 'syslog_identity' => 'poweradmin', 'syslog_facility' => LOG_USER, ], ];","title":"Modern Configuration Example"},{"location":"configuration/logging/#legacy-configuration-example","text":"<?php // Logging settings $logger_type = 'native'; $logger_level = 'warning'; $syslog_use = true; $syslog_ident = 'poweradmin'; $syslog_facility = LOG_USER; $dblog_use = true; For more advanced logging configuration, environment-specific examples, and best practices, see: - Advanced Logging Configuration","title":"Legacy Configuration Example"},{"location":"configuration/mail/","text":"Mail Configuration This document describes how to configure email settings in Poweradmin. Overview Poweradmin supports sending emails for various purposes: - User registration confirmations - Password reset requests - DNS zone changes notifications - System alerts Configuration Options The mail settings are configured in the config/settings.php file under the mail section: enabled : Enable email functionality. Default: true from : Default \"from\" email address. Default: poweradmin@example.com from_name : Default \"from\" name. Default: empty return_path : Default \"Return-Path\" address for bounce handling. Default: poweradmin@example.com transport : Transport method. Options: 'smtp', 'sendmail', 'php'. Default: php SMTP Settings host : SMTP server hostname. Default: smtp.example.com port : SMTP server port. Default: 587 username : SMTP authentication username. Default: empty password : SMTP authentication password. Default: empty encryption : Encryption method. Options: 'tls', 'ssl', empty. Default: tls auth : Whether SMTP requires authentication. Default: false Sendmail Settings sendmail_path : Path to sendmail binary. Default: /usr/sbin/sendmail -bs Example Configuration return [ 'mail' => [ 'enabled' => true, 'from' => 'dns@example.com', 'from_name' => 'DNS Administrator', 'return_path' => 'dns@example.com', 'transport' => 'smtp', 'host' => 'smtp.example.com', 'port' => 587, 'username' => 'smtp_user', 'password' => 'smtp_password', 'encryption' => 'tls', 'auth' => true, ], ];","title":"Mail Configuration"},{"location":"configuration/mail/#mail-configuration","text":"This document describes how to configure email settings in Poweradmin.","title":"Mail Configuration"},{"location":"configuration/mail/#overview","text":"Poweradmin supports sending emails for various purposes: - User registration confirmations - Password reset requests - DNS zone changes notifications - System alerts","title":"Overview"},{"location":"configuration/mail/#configuration-options","text":"The mail settings are configured in the config/settings.php file under the mail section: enabled : Enable email functionality. Default: true from : Default \"from\" email address. Default: poweradmin@example.com from_name : Default \"from\" name. Default: empty return_path : Default \"Return-Path\" address for bounce handling. Default: poweradmin@example.com transport : Transport method. Options: 'smtp', 'sendmail', 'php'. Default: php","title":"Configuration Options"},{"location":"configuration/mail/#smtp-settings","text":"host : SMTP server hostname. Default: smtp.example.com port : SMTP server port. Default: 587 username : SMTP authentication username. Default: empty password : SMTP authentication password. Default: empty encryption : Encryption method. Options: 'tls', 'ssl', empty. Default: tls auth : Whether SMTP requires authentication. Default: false","title":"SMTP Settings"},{"location":"configuration/mail/#sendmail-settings","text":"sendmail_path : Path to sendmail binary. Default: /usr/sbin/sendmail -bs","title":"Sendmail Settings"},{"location":"configuration/mail/#example-configuration","text":"return [ 'mail' => [ 'enabled' => true, 'from' => 'dns@example.com', 'from_name' => 'DNS Administrator', 'return_path' => 'dns@example.com', 'transport' => 'smtp', 'host' => 'smtp.example.com', 'port' => 587, 'username' => 'smtp_user', 'password' => 'smtp_password', 'encryption' => 'tls', 'auth' => true, ], ];","title":"Example Configuration"},{"location":"configuration/password-policies/","text":"Password Policies Poweradmin allows you to enforce password policies to enhance the security of user accounts. All security configurations, including password policies, are now configured in a single config/settings.php file under the security section. This consolidates all security-related settings into one location for easier management. Password Rules enable_password_rules : Enable or disable password rules enforcement. Default: false . min_length : Minimum length of the password. Default: 6 . require_uppercase : Require at least one uppercase letter. Default: true . require_lowercase : Require at least one lowercase letter. Default: true . require_numbers : Require at least one numeric digit. Default: true . require_special : Require at least one special character. Default: false . special_characters : List of allowed special characters. Default: !@#$%^&*()+-=[]{}|;:,.<>? . Password Security Settings The following additional security settings are available in the security section: password_encryption : Choose the password hashing algorithm. Options: 'md5', 'md5salt', 'bcrypt', 'argon2i', ' argon2id'. Default: bcrypt . password_cost : Cost factor for bcrypt algorithm. Default: 12 . Password Expiration Note: The following settings are not implemented yet. enable_expiration : Enable or disable password expiration. Default: false . max_age_days : Maximum age of the password in days before it expires. Default: 90 . Password Reuse Prevention Note: The following settings are not implemented yet. enable_reuse_prevention : Enable or disable prevention of password reuse. Default: false . prevent_reuse : Number of previous passwords to check against for reuse. Default: 5 . Example Configuration To enable password rules with custom settings, add the following configuration to your config/settings.php : <?php return [ 'security' => [ 'password_encryption' => 'bcrypt', 'password_cost' => 12, 'password_policy' => [ 'enable_password_rules' => true, 'min_length' => 8, 'require_special' => true, ], ], ]; When enable_password_rules is set to true , passwords will be validated according to the configured rules. In this example, passwords must be at least 8 characters long and include special characters, along with the default requirements for uppercase letters, lowercase letters, and numbers.","title":"Password Policies"},{"location":"configuration/password-policies/#password-policies","text":"Poweradmin allows you to enforce password policies to enhance the security of user accounts. All security configurations, including password policies, are now configured in a single config/settings.php file under the security section. This consolidates all security-related settings into one location for easier management.","title":"Password Policies"},{"location":"configuration/password-policies/#password-rules","text":"enable_password_rules : Enable or disable password rules enforcement. Default: false . min_length : Minimum length of the password. Default: 6 . require_uppercase : Require at least one uppercase letter. Default: true . require_lowercase : Require at least one lowercase letter. Default: true . require_numbers : Require at least one numeric digit. Default: true . require_special : Require at least one special character. Default: false . special_characters : List of allowed special characters. Default: !@#$%^&*()+-=[]{}|;:,.<>? .","title":"Password Rules"},{"location":"configuration/password-policies/#password-security-settings","text":"The following additional security settings are available in the security section: password_encryption : Choose the password hashing algorithm. Options: 'md5', 'md5salt', 'bcrypt', 'argon2i', ' argon2id'. Default: bcrypt . password_cost : Cost factor for bcrypt algorithm. Default: 12 .","title":"Password Security Settings"},{"location":"configuration/password-policies/#password-expiration","text":"Note: The following settings are not implemented yet. enable_expiration : Enable or disable password expiration. Default: false . max_age_days : Maximum age of the password in days before it expires. Default: 90 .","title":"Password Expiration"},{"location":"configuration/password-policies/#password-reuse-prevention","text":"Note: The following settings are not implemented yet. enable_reuse_prevention : Enable or disable prevention of password reuse. Default: false . prevent_reuse : Number of previous passwords to check against for reuse. Default: 5 .","title":"Password Reuse Prevention"},{"location":"configuration/password-policies/#example-configuration","text":"To enable password rules with custom settings, add the following configuration to your config/settings.php : <?php return [ 'security' => [ 'password_encryption' => 'bcrypt', 'password_cost' => 12, 'password_policy' => [ 'enable_password_rules' => true, 'min_length' => 8, 'require_special' => true, ], ], ]; When enable_password_rules is set to true , passwords will be validated according to the configured rules. In this example, passwords must be at least 8 characters long and include special characters, along with the default requirements for uppercase letters, lowercase letters, and numbers.","title":"Example Configuration"},{"location":"configuration/powerdns-api/","text":"PowerDNS API Configuration Overview Poweradmin can interact with PowerDNS through its API for advanced operations like DNSSEC management and automatic zone changes. This document explains how to configure the PowerDNS API integration. Prerequisites PowerDNS server with API enabled API key generated on PowerDNS server Network connectivity between Poweradmin and PowerDNS API endpoint Configuration Options PowerDNS API settings can be configured in the config/settings.php file under the pdns_api section or through individual variables in the legacy configuration format. Legacy variable Modern equivalent Default value Description Added in version $pdns_api_url pdns_api.url no default The endpoint for establishing a connection to the PowerDNS API 3.7.0 $pdns_api_key pdns_api.key no default The authentication key required for establishing a connection with the PowerDNS API 3.7.0 - pdns_api.display_name PowerDNS PowerDNS name to identify server in the interface 4.0.0 - pdns_api.server_name localhost PowerDNS server name used in API calls 4.0.0 Modern Configuration Example return [ 'pdns_api' => [ 'display_name' => 'Production PowerDNS', 'url' => 'http://localhost:8081', 'key' => 'YOUR_API_KEY', 'server_name' => 'localhost', ], ]; Legacy Configuration Example <?php // PowerDNS API settings $pdns_api_url = 'http://localhost:8081'; $pdns_api_key = 'YOUR_API_KEY'; PowerDNS Server Setup To enable the API in your PowerDNS configuration, add the following to your PowerDNS configuration file: # Enable API and webserver api=yes api-key=YOUR_API_KEY webserver=yes webserver-port=8081 webserver-address=127.0.0.1 # Restrict to localhost for security For production environments, it's recommended to secure the API with HTTPS: webserver-port=8081 webserver-address=0.0.0.0 webserver-allow-from=192.168.0.0/24,127.0.0.1 webserver-password=YOUR_PASSWORD webserver-loglevel=none Testing Connection You can verify the API connection by running: curl -H \"X-API-Key: YOUR_API_KEY\" http://localhost:8081/api/v1/servers/localhost If the connection is successful, you should receive a JSON response with server information. Functionality Enabled by API With the PowerDNS API properly configured, Poweradmin gains the following capabilities: DNSSEC management (key creation, rotation, DS record handling) Real-time zone transfers Metadata management Direct server statistics access Security Considerations Always use HTTPS for production environments Restrict API access to trusted IP addresses Use a strong API key and rotate it regularly Consider using a reverse proxy for additional security Keep PowerDNS and Poweradmin updated to the latest versions","title":"PowerDNS API"},{"location":"configuration/powerdns-api/#powerdns-api-configuration","text":"","title":"PowerDNS API Configuration"},{"location":"configuration/powerdns-api/#overview","text":"Poweradmin can interact with PowerDNS through its API for advanced operations like DNSSEC management and automatic zone changes. This document explains how to configure the PowerDNS API integration.","title":"Overview"},{"location":"configuration/powerdns-api/#prerequisites","text":"PowerDNS server with API enabled API key generated on PowerDNS server Network connectivity between Poweradmin and PowerDNS API endpoint","title":"Prerequisites"},{"location":"configuration/powerdns-api/#configuration-options","text":"PowerDNS API settings can be configured in the config/settings.php file under the pdns_api section or through individual variables in the legacy configuration format. Legacy variable Modern equivalent Default value Description Added in version $pdns_api_url pdns_api.url no default The endpoint for establishing a connection to the PowerDNS API 3.7.0 $pdns_api_key pdns_api.key no default The authentication key required for establishing a connection with the PowerDNS API 3.7.0 - pdns_api.display_name PowerDNS PowerDNS name to identify server in the interface 4.0.0 - pdns_api.server_name localhost PowerDNS server name used in API calls 4.0.0","title":"Configuration Options"},{"location":"configuration/powerdns-api/#modern-configuration-example","text":"return [ 'pdns_api' => [ 'display_name' => 'Production PowerDNS', 'url' => 'http://localhost:8081', 'key' => 'YOUR_API_KEY', 'server_name' => 'localhost', ], ];","title":"Modern Configuration Example"},{"location":"configuration/powerdns-api/#legacy-configuration-example","text":"<?php // PowerDNS API settings $pdns_api_url = 'http://localhost:8081'; $pdns_api_key = 'YOUR_API_KEY';","title":"Legacy Configuration Example"},{"location":"configuration/powerdns-api/#powerdns-server-setup","text":"To enable the API in your PowerDNS configuration, add the following to your PowerDNS configuration file: # Enable API and webserver api=yes api-key=YOUR_API_KEY webserver=yes webserver-port=8081 webserver-address=127.0.0.1 # Restrict to localhost for security For production environments, it's recommended to secure the API with HTTPS: webserver-port=8081 webserver-address=0.0.0.0 webserver-allow-from=192.168.0.0/24,127.0.0.1 webserver-password=YOUR_PASSWORD webserver-loglevel=none","title":"PowerDNS Server Setup"},{"location":"configuration/powerdns-api/#testing-connection","text":"You can verify the API connection by running: curl -H \"X-API-Key: YOUR_API_KEY\" http://localhost:8081/api/v1/servers/localhost If the connection is successful, you should receive a JSON response with server information.","title":"Testing Connection"},{"location":"configuration/powerdns-api/#functionality-enabled-by-api","text":"With the PowerDNS API properly configured, Poweradmin gains the following capabilities: DNSSEC management (key creation, rotation, DS record handling) Real-time zone transfers Metadata management Direct server statistics access","title":"Functionality Enabled by API"},{"location":"configuration/powerdns-api/#security-considerations","text":"Always use HTTPS for production environments Restrict API access to trusted IP addresses Use a strong API key and rotate it regularly Consider using a reverse proxy for additional security Keep PowerDNS and Poweradmin updated to the latest versions","title":"Security Considerations"},{"location":"configuration/rdap/","text":"RDAP Configuration Overview RDAP (Registration Data Access Protocol) is the modern replacement for WHOIS. Poweradmin supports RDAP lookups for domain registration information with structured JSON responses and better internationalization support. Configuration Options RDAP settings can be configured in the config/settings.php file under the rdap section. Setting Default Description enabled false Enable RDAP lookup functionality default_server '' Optional default RDAP server URL (empty to use server from RDAP database) request_timeout 10 HTTP request timeout in seconds for RDAP queries restrict_to_admin true Only allow administrators (user_is_ueberuser) to use RDAP functionality Configuration Example return [ 'rdap' => [ 'enabled' => true, 'default_server' => 'https://rdap.verisign.com/com/v1/', 'request_timeout' => 15, 'restrict_to_admin' => true, ], ]; RDAP vs WHOIS Feature WHOIS RDAP Protocol Plain text JSON over HTTPS Security No encryption HTTPS encryption Internationalization Limited Full Unicode support Machine readable No Yes Rate limiting Basic Standardized Authentication None OAuth2 support Usage When enabled, RDAP lookups provide: Structured data - JSON responses with consistent formatting Enhanced security - HTTPS-based queries Better performance - HTTP-based protocol with caching support Internationalization - Full Unicode domain support Supported TLDs RDAP supports lookups for: All major gTLDs (.com, .net, .org, .info, etc.) Many ccTLDs with RDAP servers New gTLDs with RDAP implementation Security Features HTTPS encryption - All queries use encrypted connections Admin restriction - Access limited to administrators by default Rate limiting compliance - Respects RDAP server rate limits Input validation - Domain names are validated before queries Configuration Best Practices Production Environment 'rdap' => [ 'enabled' => true, 'default_server' => '', // Use automatic server detection 'request_timeout' => 30, // Longer timeout for reliability 'restrict_to_admin' => true, ], Development Environment 'rdap' => [ 'enabled' => true, 'default_server' => 'https://rdap.verisign.com/com/v1/', 'request_timeout' => 10, 'restrict_to_admin' => false, // Allow all users for testing ], RDAP Server Bootstrap RDAP uses a bootstrap mechanism to determine the correct server for each TLD: Automatic detection - Queries IANA bootstrap registry Cached mappings - Server mappings are cached for performance Fallback servers - Default server used if bootstrap fails Performance Optimization Caching : RDAP responses can be cached Connection pooling : Reuse HTTP connections Timeout tuning : Balance between reliability and performance Error handling : Graceful fallback to WHOIS if RDAP fails","title":"RDAP Configuration"},{"location":"configuration/rdap/#rdap-configuration","text":"","title":"RDAP Configuration"},{"location":"configuration/rdap/#overview","text":"RDAP (Registration Data Access Protocol) is the modern replacement for WHOIS. Poweradmin supports RDAP lookups for domain registration information with structured JSON responses and better internationalization support.","title":"Overview"},{"location":"configuration/rdap/#configuration-options","text":"RDAP settings can be configured in the config/settings.php file under the rdap section. Setting Default Description enabled false Enable RDAP lookup functionality default_server '' Optional default RDAP server URL (empty to use server from RDAP database) request_timeout 10 HTTP request timeout in seconds for RDAP queries restrict_to_admin true Only allow administrators (user_is_ueberuser) to use RDAP functionality","title":"Configuration Options"},{"location":"configuration/rdap/#configuration-example","text":"return [ 'rdap' => [ 'enabled' => true, 'default_server' => 'https://rdap.verisign.com/com/v1/', 'request_timeout' => 15, 'restrict_to_admin' => true, ], ];","title":"Configuration Example"},{"location":"configuration/rdap/#rdap-vs-whois","text":"Feature WHOIS RDAP Protocol Plain text JSON over HTTPS Security No encryption HTTPS encryption Internationalization Limited Full Unicode support Machine readable No Yes Rate limiting Basic Standardized Authentication None OAuth2 support","title":"RDAP vs WHOIS"},{"location":"configuration/rdap/#usage","text":"When enabled, RDAP lookups provide: Structured data - JSON responses with consistent formatting Enhanced security - HTTPS-based queries Better performance - HTTP-based protocol with caching support Internationalization - Full Unicode domain support","title":"Usage"},{"location":"configuration/rdap/#supported-tlds","text":"RDAP supports lookups for: All major gTLDs (.com, .net, .org, .info, etc.) Many ccTLDs with RDAP servers New gTLDs with RDAP implementation","title":"Supported TLDs"},{"location":"configuration/rdap/#security-features","text":"HTTPS encryption - All queries use encrypted connections Admin restriction - Access limited to administrators by default Rate limiting compliance - Respects RDAP server rate limits Input validation - Domain names are validated before queries","title":"Security Features"},{"location":"configuration/rdap/#configuration-best-practices","text":"","title":"Configuration Best Practices"},{"location":"configuration/rdap/#production-environment","text":"'rdap' => [ 'enabled' => true, 'default_server' => '', // Use automatic server detection 'request_timeout' => 30, // Longer timeout for reliability 'restrict_to_admin' => true, ],","title":"Production Environment"},{"location":"configuration/rdap/#development-environment","text":"'rdap' => [ 'enabled' => true, 'default_server' => 'https://rdap.verisign.com/com/v1/', 'request_timeout' => 10, 'restrict_to_admin' => false, // Allow all users for testing ],","title":"Development Environment"},{"location":"configuration/rdap/#rdap-server-bootstrap","text":"RDAP uses a bootstrap mechanism to determine the correct server for each TLD: Automatic detection - Queries IANA bootstrap registry Cached mappings - Server mappings are cached for performance Fallback servers - Default server used if bootstrap fails","title":"RDAP Server Bootstrap"},{"location":"configuration/rdap/#performance-optimization","text":"Caching : RDAP responses can be cached Connection pooling : Reuse HTTP connections Timeout tuning : Balance between reliability and performance Error handling : Graceful fallback to WHOIS if RDAP fails","title":"Performance Optimization"},{"location":"configuration/record-types/","text":"DNS Record Type Customization Overview Poweradmin 4.0.0 allows you to customize which DNS record types are available when creating or editing records in both domain (forward) zones and reverse zones. This feature helps simplify the user interface by showing only the record types relevant to your specific DNS needs. Configuration Options The record type customization is configured in the dns section of your settings.php file with two key settings: 'dns' => [ // Other DNS settings... // Record Type Settings 'domain_record_types' => null, // For forward zones (A, AAAA, MX, etc.) 'reverse_record_types' => null, // For reverse zones (PTR, etc.) ] Default Behavior By default, both settings are set to null , which means Poweradmin will display all supported record types for the respective zone type. Customizing Domain (Forward) Zone Record Types To customize which record types are available when editing forward zones: 'domain_record_types' => ['A', 'AAAA', 'CNAME', 'MX', 'NS', 'SOA', 'TXT', 'SRV', 'CAA'], This example shows a typical configuration with common record types. You can add or remove types based on your requirements. Customizing Reverse Zone Record Types Similarly, you can customize which record types are available when editing reverse zones: 'reverse_record_types' => ['PTR', 'NS', 'SOA', 'TXT', 'CNAME'], Zone Templates When editing zone templates, Poweradmin will automatically show the combined list of both domain_record_types and reverse_record_types to ensure all potential record types for template use are available. Supported Record Types Poweradmin supports the following DNS record types that can be included in your customized lists: Record Type Description Typically Used In A Maps a domain name to an IPv4 address Domain zones AAAA Maps a domain name to an IPv6 address Domain zones CNAME Creates an alias for another domain name Both MX Specifies mail servers for the domain Domain zones NS Specifies name servers for the domain Both PTR Maps an IP address to a domain name (reverse lookup) Reverse zones SOA Start of Authority, contains administrative information Both SRV Specifies location of services (like SIP, XMPP) Domain zones TXT Contains text information (often used for verification) Both CAA Specifies which Certificate Authorities can issue certificates Domain zones DNSKEY Public key for DNSSEC Both DS Delegation Signer, contains hash of DNSKEY record Both NAPTR Name Authority Pointer for ENUM and other transformations Domain zones SSHFP SSH Public Key Fingerprint Domain zones TLSA TLS Authentication association Domain zones Use Cases Simplifying the Interface : Hide rarely used record types to make the interface cleaner Preventing Errors : Limit available record types to prevent misconfiguration Specialized Deployments : Tailor the interface for specific DNS use cases Example Configurations Basic Web Server Configuration 'domain_record_types' => ['A', 'AAAA', 'CNAME', 'MX', 'TXT'], 'reverse_record_types' => ['PTR', 'NS', 'SOA'], DNSSEC-Focused Configuration 'domain_record_types' => ['A', 'AAAA', 'CNAME', 'MX', 'NS', 'SOA', 'TXT', 'DNSKEY', 'DS'], 'reverse_record_types' => ['PTR', 'NS', 'SOA'], Full-Featured Configuration 'domain_record_types' => [ 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'SOA', 'TXT', 'SRV', 'CAA', 'DNSKEY', 'DS', 'NAPTR', 'SSHFP', 'TLSA' ], 'reverse_record_types' => ['PTR', 'NS', 'SOA', 'TXT', 'CNAME'],","title":"Record Type Customization"},{"location":"configuration/record-types/#dns-record-type-customization","text":"","title":"DNS Record Type Customization"},{"location":"configuration/record-types/#overview","text":"Poweradmin 4.0.0 allows you to customize which DNS record types are available when creating or editing records in both domain (forward) zones and reverse zones. This feature helps simplify the user interface by showing only the record types relevant to your specific DNS needs.","title":"Overview"},{"location":"configuration/record-types/#configuration-options","text":"The record type customization is configured in the dns section of your settings.php file with two key settings: 'dns' => [ // Other DNS settings... // Record Type Settings 'domain_record_types' => null, // For forward zones (A, AAAA, MX, etc.) 'reverse_record_types' => null, // For reverse zones (PTR, etc.) ]","title":"Configuration Options"},{"location":"configuration/record-types/#default-behavior","text":"By default, both settings are set to null , which means Poweradmin will display all supported record types for the respective zone type.","title":"Default Behavior"},{"location":"configuration/record-types/#customizing-domain-forward-zone-record-types","text":"To customize which record types are available when editing forward zones: 'domain_record_types' => ['A', 'AAAA', 'CNAME', 'MX', 'NS', 'SOA', 'TXT', 'SRV', 'CAA'], This example shows a typical configuration with common record types. You can add or remove types based on your requirements.","title":"Customizing Domain (Forward) Zone Record Types"},{"location":"configuration/record-types/#customizing-reverse-zone-record-types","text":"Similarly, you can customize which record types are available when editing reverse zones: 'reverse_record_types' => ['PTR', 'NS', 'SOA', 'TXT', 'CNAME'],","title":"Customizing Reverse Zone Record Types"},{"location":"configuration/record-types/#zone-templates","text":"When editing zone templates, Poweradmin will automatically show the combined list of both domain_record_types and reverse_record_types to ensure all potential record types for template use are available.","title":"Zone Templates"},{"location":"configuration/record-types/#supported-record-types","text":"Poweradmin supports the following DNS record types that can be included in your customized lists: Record Type Description Typically Used In A Maps a domain name to an IPv4 address Domain zones AAAA Maps a domain name to an IPv6 address Domain zones CNAME Creates an alias for another domain name Both MX Specifies mail servers for the domain Domain zones NS Specifies name servers for the domain Both PTR Maps an IP address to a domain name (reverse lookup) Reverse zones SOA Start of Authority, contains administrative information Both SRV Specifies location of services (like SIP, XMPP) Domain zones TXT Contains text information (often used for verification) Both CAA Specifies which Certificate Authorities can issue certificates Domain zones DNSKEY Public key for DNSSEC Both DS Delegation Signer, contains hash of DNSKEY record Both NAPTR Name Authority Pointer for ENUM and other transformations Domain zones SSHFP SSH Public Key Fingerprint Domain zones TLSA TLS Authentication association Domain zones","title":"Supported Record Types"},{"location":"configuration/record-types/#use-cases","text":"Simplifying the Interface : Hide rarely used record types to make the interface cleaner Preventing Errors : Limit available record types to prevent misconfiguration Specialized Deployments : Tailor the interface for specific DNS use cases","title":"Use Cases"},{"location":"configuration/record-types/#example-configurations","text":"","title":"Example Configurations"},{"location":"configuration/record-types/#basic-web-server-configuration","text":"'domain_record_types' => ['A', 'AAAA', 'CNAME', 'MX', 'TXT'], 'reverse_record_types' => ['PTR', 'NS', 'SOA'],","title":"Basic Web Server Configuration"},{"location":"configuration/record-types/#dnssec-focused-configuration","text":"'domain_record_types' => ['A', 'AAAA', 'CNAME', 'MX', 'NS', 'SOA', 'TXT', 'DNSKEY', 'DS'], 'reverse_record_types' => ['PTR', 'NS', 'SOA'],","title":"DNSSEC-Focused Configuration"},{"location":"configuration/record-types/#full-featured-configuration","text":"'domain_record_types' => [ 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'SOA', 'TXT', 'SRV', 'CAA', 'DNSKEY', 'DS', 'NAPTR', 'SSHFP', 'TLSA' ], 'reverse_record_types' => ['PTR', 'NS', 'SOA', 'TXT', 'CNAME'],","title":"Full-Featured Configuration"},{"location":"configuration/security-policies/","text":"Security Policies Poweradmin offers various security features to protect your DNS management system. All security configurations are configured in the config/settings.php file under the security section. General Security Settings session_key : A unique key used for session security. Default: change_this_key (you should always change this) password_encryption : Password hashing algorithm. Options: 'md5', 'md5salt', 'bcrypt', 'argon2i', 'argon2id'. Default: bcrypt password_cost : Cost factor for bcrypt algorithm. Default: 12 login_token_validation : Enable token validation for login form. Default: true global_token_validation : Enable token validation for all forms. Default: true Account Lockout These settings help prevent brute force attacks by temporarily locking accounts after multiple failed login attempts: enable_lockout : Enable account lockout after failed login attempts. Default: false lockout_attempts : Number of failed attempts before account is locked. Default: 5 lockout_duration : Duration of the lockout in minutes. Default: 15 track_ip_address : Lock accounts based on IP address. Default: true clear_attempts_on_success : Clear failed attempts after successful login. Default: true IP Address Management Control which IP addresses can access the system: whitelist_ip_addresses : IP addresses that are always allowed to access the system. Takes priority over blacklist. Supports IPs, CIDRs, and wildcards. Default: [] blacklist_ip_addresses : IP addresses that are blocked from accessing the system. Supports IPs, CIDRs, and wildcards. Default: [] Example Configuration return [ 'security' => [ 'session_key' => 'random_secure_string_here', 'password_encryption' => 'bcrypt', 'password_cost' => 12, 'login_token_validation' => true, 'global_token_validation' => true, 'account_lockout' => [ 'enable_lockout' => true, 'lockout_attempts' => 3, 'lockout_duration' => 30, 'track_ip_address' => true, 'clear_attempts_on_success' => true, 'whitelist_ip_addresses' => ['192.168.1.0/24', '10.0.0.*'], 'blacklist_ip_addresses' => ['1.2.3.4', '5.6.7.0/24'], ], 'mfa' => [ 'enabled' => true, 'app_enabled' => true, 'email_enabled' => true, 'recovery_codes' => 8, 'recovery_code_length' => 10, ], 'password_reset' => [ 'enabled' => true, 'token_lifetime' => 3600, 'rate_limit_attempts' => 5, 'rate_limit_window' => 3600, 'min_time_between_requests' => 60, ], 'recaptcha' => [ 'enabled' => true, 'site_key' => 'your_site_key_here', 'secret_key' => 'your_secret_key_here', 'version' => 'v3', 'v3_threshold' => 0.5, ], ], ]; Security Best Practices Always change the default session key to a unique, random string Use a strong password hashing algorithm (bcrypt or argon2id) Enable account lockout in production environments Implement IP whitelisting for admin access in sensitive environments Enable both login and global token validation to prevent CSRF attacks Use HTTPS for all production deployments Regularly update Poweradmin to get the latest security fixes Multi-Factor Authentication (MFA) Poweradmin supports multi-factor authentication to add an extra layer of security: enabled : Enable MFA functionality. Default: false app_enabled : Enable authenticator app option (TOTP). Default: true email_enabled : Enable email verification option. Default: true recovery_codes : Number of recovery codes to generate. Default: 8 recovery_code_length : Length of recovery codes. Default: 10 Password Reset Secure password reset functionality with rate limiting: enabled : Enable/disable password reset functionality. Default: false token_lifetime : Token validity in seconds. Default: 3600 (1 hour) rate_limit_attempts : Maximum reset attempts per time window. Default: 5 rate_limit_window : Rate limit window in seconds. Default: 3600 (1 hour) min_time_between_requests : Minimum seconds between requests. Default: 60 (1 minute) Google reCAPTCHA Protect login forms from automated attacks using Google reCAPTCHA: enabled : Enable reCAPTCHA on login form. Default: false site_key : Your reCAPTCHA site key (public key). Default: '' secret_key : Your reCAPTCHA secret key (private key). Default: '' version : reCAPTCHA version: 'v2' or 'v3'. Default: 'v3' v3_threshold : Score threshold for v3 (0.0 - 1.0). Default: 0.5 Setting up Google reCAPTCHA Visit Google reCAPTCHA Admin Console Create a new site and get your site key and secret key Configure the keys in your settings: 'security' => [ 'recaptcha' => [ 'enabled' => true, 'site_key' => 'your_site_key_here', 'secret_key' => 'your_secret_key_here', 'version' => 'v3', 'v3_threshold' => 0.5, ], ], For more information about password policies, see the Password Policies documentation .","title":"Security Policies"},{"location":"configuration/security-policies/#security-policies","text":"Poweradmin offers various security features to protect your DNS management system. All security configurations are configured in the config/settings.php file under the security section.","title":"Security Policies"},{"location":"configuration/security-policies/#general-security-settings","text":"session_key : A unique key used for session security. Default: change_this_key (you should always change this) password_encryption : Password hashing algorithm. Options: 'md5', 'md5salt', 'bcrypt', 'argon2i', 'argon2id'. Default: bcrypt password_cost : Cost factor for bcrypt algorithm. Default: 12 login_token_validation : Enable token validation for login form. Default: true global_token_validation : Enable token validation for all forms. Default: true","title":"General Security Settings"},{"location":"configuration/security-policies/#account-lockout","text":"These settings help prevent brute force attacks by temporarily locking accounts after multiple failed login attempts: enable_lockout : Enable account lockout after failed login attempts. Default: false lockout_attempts : Number of failed attempts before account is locked. Default: 5 lockout_duration : Duration of the lockout in minutes. Default: 15 track_ip_address : Lock accounts based on IP address. Default: true clear_attempts_on_success : Clear failed attempts after successful login. Default: true","title":"Account Lockout"},{"location":"configuration/security-policies/#ip-address-management","text":"Control which IP addresses can access the system: whitelist_ip_addresses : IP addresses that are always allowed to access the system. Takes priority over blacklist. Supports IPs, CIDRs, and wildcards. Default: [] blacklist_ip_addresses : IP addresses that are blocked from accessing the system. Supports IPs, CIDRs, and wildcards. Default: []","title":"IP Address Management"},{"location":"configuration/security-policies/#example-configuration","text":"return [ 'security' => [ 'session_key' => 'random_secure_string_here', 'password_encryption' => 'bcrypt', 'password_cost' => 12, 'login_token_validation' => true, 'global_token_validation' => true, 'account_lockout' => [ 'enable_lockout' => true, 'lockout_attempts' => 3, 'lockout_duration' => 30, 'track_ip_address' => true, 'clear_attempts_on_success' => true, 'whitelist_ip_addresses' => ['192.168.1.0/24', '10.0.0.*'], 'blacklist_ip_addresses' => ['1.2.3.4', '5.6.7.0/24'], ], 'mfa' => [ 'enabled' => true, 'app_enabled' => true, 'email_enabled' => true, 'recovery_codes' => 8, 'recovery_code_length' => 10, ], 'password_reset' => [ 'enabled' => true, 'token_lifetime' => 3600, 'rate_limit_attempts' => 5, 'rate_limit_window' => 3600, 'min_time_between_requests' => 60, ], 'recaptcha' => [ 'enabled' => true, 'site_key' => 'your_site_key_here', 'secret_key' => 'your_secret_key_here', 'version' => 'v3', 'v3_threshold' => 0.5, ], ], ];","title":"Example Configuration"},{"location":"configuration/security-policies/#security-best-practices","text":"Always change the default session key to a unique, random string Use a strong password hashing algorithm (bcrypt or argon2id) Enable account lockout in production environments Implement IP whitelisting for admin access in sensitive environments Enable both login and global token validation to prevent CSRF attacks Use HTTPS for all production deployments Regularly update Poweradmin to get the latest security fixes","title":"Security Best Practices"},{"location":"configuration/security-policies/#multi-factor-authentication-mfa","text":"Poweradmin supports multi-factor authentication to add an extra layer of security: enabled : Enable MFA functionality. Default: false app_enabled : Enable authenticator app option (TOTP). Default: true email_enabled : Enable email verification option. Default: true recovery_codes : Number of recovery codes to generate. Default: 8 recovery_code_length : Length of recovery codes. Default: 10","title":"Multi-Factor Authentication (MFA)"},{"location":"configuration/security-policies/#password-reset","text":"Secure password reset functionality with rate limiting: enabled : Enable/disable password reset functionality. Default: false token_lifetime : Token validity in seconds. Default: 3600 (1 hour) rate_limit_attempts : Maximum reset attempts per time window. Default: 5 rate_limit_window : Rate limit window in seconds. Default: 3600 (1 hour) min_time_between_requests : Minimum seconds between requests. Default: 60 (1 minute)","title":"Password Reset"},{"location":"configuration/security-policies/#google-recaptcha","text":"Protect login forms from automated attacks using Google reCAPTCHA: enabled : Enable reCAPTCHA on login form. Default: false site_key : Your reCAPTCHA site key (public key). Default: '' secret_key : Your reCAPTCHA secret key (private key). Default: '' version : reCAPTCHA version: 'v2' or 'v3'. Default: 'v3' v3_threshold : Score threshold for v3 (0.0 - 1.0). Default: 0.5","title":"Google reCAPTCHA"},{"location":"configuration/security-policies/#setting-up-google-recaptcha","text":"Visit Google reCAPTCHA Admin Console Create a new site and get your site key and secret key Configure the keys in your settings: 'security' => [ 'recaptcha' => [ 'enabled' => true, 'site_key' => 'your_site_key_here', 'secret_key' => 'your_secret_key_here', 'version' => 'v3', 'v3_threshold' => 0.5, ], ], For more information about password policies, see the Password Policies documentation .","title":"Setting up Google reCAPTCHA"},{"location":"configuration/user-agreements/","text":"User Agreement Configuration Overview Poweradmin supports a user agreement system that requires users to accept terms and conditions before using the system. This is useful for organizations that need to enforce usage policies or compliance requirements. Configuration Options User agreement settings can be configured in the config/settings.php file under the user_agreement section. Setting Default Description enabled false Enable user agreement system current_version 1.0 Current agreement version require_on_version_change true Require re-acceptance when version changes Configuration Example return [ 'user_agreement' => [ 'enabled' => true, 'current_version' => '2.1', 'require_on_version_change' => true, ], ]; How It Works First-Time Users Registration/Login - User creates account or logs in Agreement Prompt - System displays user agreement Acceptance Required - User must accept to continue Access Granted - User can access the system Version Updates When require_on_version_change is enabled: Version Check - System compares user's accepted version with current Re-acceptance Required - Users with older versions must re-accept Updated Record - System records new acceptance date and version Agreement Storage The system tracks: User ID - Which user accepted Version - Which version was accepted Timestamp - When agreement was accepted IP Address - From where agreement was accepted (for audit) Agreement Content Management Creating Agreement Content Create agreement templates in your theme directory: templates/ \u251c\u2500\u2500 user_agreement/ \u2502 \u251c\u2500\u2500 agreement_v1.0.html \u2502 \u251c\u2500\u2500 agreement_v2.0.html \u2502 \u2514\u2500\u2500 agreement_v2.1.html Agreement Template Example <!-- templates/user_agreement/agreement_v2.1.html --> <div class=\"user-agreement\"> <h2>DNS Management System - Terms of Use</h2> <h3>1. Acceptable Use</h3> <p>You agree to use this DNS management system only for legitimate business purposes...</p> <h3>2. Data Protection</h3> <p>All DNS data is confidential and must not be shared with unauthorized parties...</p> <h3>3. Security Requirements</h3> <ul> <li>Use strong passwords and change them regularly</li> <li>Do not share your account credentials</li> <li>Report security incidents immediately</li> </ul> <h3>4. Compliance</h3> <p>Users must comply with all applicable laws and regulations...</p> <div class=\"agreement-footer\"> <p><strong>Version:</strong> 2.1</p> <p><strong>Effective Date:</strong> January 1, 2024</p> </div> </div> Database Schema The user agreement system uses the following database structure: CREATE TABLE user_agreements ( id INT AUTO_INCREMENT PRIMARY KEY, user_id INT NOT NULL, version VARCHAR(20) NOT NULL, accepted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ip_address VARCHAR(45), user_agent TEXT, FOREIGN KEY (user_id) REFERENCES users(id), INDEX idx_user_version (user_id, version) ); Administrative Functions Viewing Agreement Status Administrators can view: User acceptance status - Which users have accepted current version Acceptance history - Historical acceptance records Compliance reports - Generate reports for audit purposes Forcing Re-acceptance Administrators can: Update version - Change current version to force re-acceptance Reset user status - Require specific users to re-accept Bulk operations - Handle multiple users at once Use Cases Corporate Environment 'user_agreement' => [ 'enabled' => true, 'current_version' => 'CORP-2024.1', 'require_on_version_change' => true, ], Benefits: Legal compliance Policy enforcement Audit trail User accountability Service Provider 'user_agreement' => [ 'enabled' => true, 'current_version' => 'SLA-v3.2', 'require_on_version_change' => true, ], Benefits: Service level agreements Terms of service Liability protection Customer acknowledgment Integration with User Management New User Registration When creating new users: User completes registration Agreement prompt appears Acceptance is required before activation User account is fully activated Existing User Management For existing deployments: Enable agreement system Set current version Users prompted on next login Gradual rollout possible Compliance and Auditing Audit Trail The system maintains: Acceptance records - Who accepted what and when IP addresses - Location of acceptance User agents - Browser/client information Version history - Track version changes Reporting Generate reports for: Compliance status - Current acceptance rates Historical data - Past agreement versions User activity - Individual user agreement history","title":"User Agreements"},{"location":"configuration/user-agreements/#user-agreement-configuration","text":"","title":"User Agreement Configuration"},{"location":"configuration/user-agreements/#overview","text":"Poweradmin supports a user agreement system that requires users to accept terms and conditions before using the system. This is useful for organizations that need to enforce usage policies or compliance requirements.","title":"Overview"},{"location":"configuration/user-agreements/#configuration-options","text":"User agreement settings can be configured in the config/settings.php file under the user_agreement section. Setting Default Description enabled false Enable user agreement system current_version 1.0 Current agreement version require_on_version_change true Require re-acceptance when version changes","title":"Configuration Options"},{"location":"configuration/user-agreements/#configuration-example","text":"return [ 'user_agreement' => [ 'enabled' => true, 'current_version' => '2.1', 'require_on_version_change' => true, ], ];","title":"Configuration Example"},{"location":"configuration/user-agreements/#how-it-works","text":"","title":"How It Works"},{"location":"configuration/user-agreements/#first-time-users","text":"Registration/Login - User creates account or logs in Agreement Prompt - System displays user agreement Acceptance Required - User must accept to continue Access Granted - User can access the system","title":"First-Time Users"},{"location":"configuration/user-agreements/#version-updates","text":"When require_on_version_change is enabled: Version Check - System compares user's accepted version with current Re-acceptance Required - Users with older versions must re-accept Updated Record - System records new acceptance date and version","title":"Version Updates"},{"location":"configuration/user-agreements/#agreement-storage","text":"The system tracks: User ID - Which user accepted Version - Which version was accepted Timestamp - When agreement was accepted IP Address - From where agreement was accepted (for audit)","title":"Agreement Storage"},{"location":"configuration/user-agreements/#agreement-content-management","text":"","title":"Agreement Content Management"},{"location":"configuration/user-agreements/#creating-agreement-content","text":"Create agreement templates in your theme directory: templates/ \u251c\u2500\u2500 user_agreement/ \u2502 \u251c\u2500\u2500 agreement_v1.0.html \u2502 \u251c\u2500\u2500 agreement_v2.0.html \u2502 \u2514\u2500\u2500 agreement_v2.1.html","title":"Creating Agreement Content"},{"location":"configuration/user-agreements/#agreement-template-example","text":"<!-- templates/user_agreement/agreement_v2.1.html --> <div class=\"user-agreement\"> <h2>DNS Management System - Terms of Use</h2> <h3>1. Acceptable Use</h3> <p>You agree to use this DNS management system only for legitimate business purposes...</p> <h3>2. Data Protection</h3> <p>All DNS data is confidential and must not be shared with unauthorized parties...</p> <h3>3. Security Requirements</h3> <ul> <li>Use strong passwords and change them regularly</li> <li>Do not share your account credentials</li> <li>Report security incidents immediately</li> </ul> <h3>4. Compliance</h3> <p>Users must comply with all applicable laws and regulations...</p> <div class=\"agreement-footer\"> <p><strong>Version:</strong> 2.1</p> <p><strong>Effective Date:</strong> January 1, 2024</p> </div> </div>","title":"Agreement Template Example"},{"location":"configuration/user-agreements/#database-schema","text":"The user agreement system uses the following database structure: CREATE TABLE user_agreements ( id INT AUTO_INCREMENT PRIMARY KEY, user_id INT NOT NULL, version VARCHAR(20) NOT NULL, accepted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ip_address VARCHAR(45), user_agent TEXT, FOREIGN KEY (user_id) REFERENCES users(id), INDEX idx_user_version (user_id, version) );","title":"Database Schema"},{"location":"configuration/user-agreements/#administrative-functions","text":"","title":"Administrative Functions"},{"location":"configuration/user-agreements/#viewing-agreement-status","text":"Administrators can view: User acceptance status - Which users have accepted current version Acceptance history - Historical acceptance records Compliance reports - Generate reports for audit purposes","title":"Viewing Agreement Status"},{"location":"configuration/user-agreements/#forcing-re-acceptance","text":"","title":"Forcing Re-acceptance"},{"location":"configuration/user-agreements/#administrators-can","text":"Update version - Change current version to force re-acceptance Reset user status - Require specific users to re-accept Bulk operations - Handle multiple users at once","title":"Administrators can:"},{"location":"configuration/user-agreements/#use-cases","text":"","title":"Use Cases"},{"location":"configuration/user-agreements/#corporate-environment","text":"'user_agreement' => [ 'enabled' => true, 'current_version' => 'CORP-2024.1', 'require_on_version_change' => true, ], Benefits: Legal compliance Policy enforcement Audit trail User accountability","title":"Corporate Environment"},{"location":"configuration/user-agreements/#service-provider","text":"'user_agreement' => [ 'enabled' => true, 'current_version' => 'SLA-v3.2', 'require_on_version_change' => true, ], Benefits: Service level agreements Terms of service Liability protection Customer acknowledgment","title":"Service Provider"},{"location":"configuration/user-agreements/#integration-with-user-management","text":"","title":"Integration with User Management"},{"location":"configuration/user-agreements/#new-user-registration","text":"When creating new users: User completes registration Agreement prompt appears Acceptance is required before activation User account is fully activated","title":"New User Registration"},{"location":"configuration/user-agreements/#existing-user-management","text":"For existing deployments: Enable agreement system Set current version Users prompted on next login Gradual rollout possible","title":"Existing User Management"},{"location":"configuration/user-agreements/#compliance-and-auditing","text":"","title":"Compliance and Auditing"},{"location":"configuration/user-agreements/#audit-trail","text":"The system maintains: Acceptance records - Who accepted what and when IP addresses - Location of acceptance User agents - Browser/client information Version history - Track version changes","title":"Audit Trail"},{"location":"configuration/user-agreements/#reporting","text":"Generate reports for: Compliance status - Current acceptance rates Historical data - Past agreement versions User activity - Individual user agreement history","title":"Reporting"},{"location":"configuration/whois/","text":"WHOIS Configuration Overview Poweradmin includes WHOIS lookup functionality that allows administrators to query domain registration information directly from the interface. This feature helps with domain management and verification tasks. Configuration Options WHOIS settings can be configured in the config/settings.php file under the whois section. Setting Default Description enabled false Enable WHOIS lookup functionality default_server '' Optional default WHOIS server (empty to use server from WHOIS database) socket_timeout 10 Socket timeout in seconds for WHOIS queries restrict_to_admin true Only allow administrators (user_is_ueberuser) to use WHOIS functionality Configuration Example return [ 'whois' => [ 'enabled' => true, 'default_server' => 'whois.internic.net', 'socket_timeout' => 15, 'restrict_to_admin' => true, ], ]; Usage When enabled, WHOIS lookups can be performed from: Zone management pages - Lookup domain registration information Domain search results - Quick WHOIS lookup for search results Administrative tools - Bulk domain verification Supported TLDs The WHOIS functionality supports lookups for: Generic TLDs (.com, .net, .org, etc.) Country code TLDs (.uk, .de, .jp, etc.) New gTLDs (.xyz, .tech, .app, etc.) Security Considerations Admin restriction : By default, only users with administrator privileges can use WHOIS functionality Rate limiting : Consider implementing rate limiting for WHOIS queries to prevent abuse Timeout settings : Adjust socket timeout based on your network conditions Logging : WHOIS queries may be logged depending on your logging configuration Performance Considerations WHOIS queries are network-dependent and may be slow Consider caching results for frequently queried domains Set appropriate timeout values to prevent interface blocking","title":"WHOIS Configuration"},{"location":"configuration/whois/#whois-configuration","text":"","title":"WHOIS Configuration"},{"location":"configuration/whois/#overview","text":"Poweradmin includes WHOIS lookup functionality that allows administrators to query domain registration information directly from the interface. This feature helps with domain management and verification tasks.","title":"Overview"},{"location":"configuration/whois/#configuration-options","text":"WHOIS settings can be configured in the config/settings.php file under the whois section. Setting Default Description enabled false Enable WHOIS lookup functionality default_server '' Optional default WHOIS server (empty to use server from WHOIS database) socket_timeout 10 Socket timeout in seconds for WHOIS queries restrict_to_admin true Only allow administrators (user_is_ueberuser) to use WHOIS functionality","title":"Configuration Options"},{"location":"configuration/whois/#configuration-example","text":"return [ 'whois' => [ 'enabled' => true, 'default_server' => 'whois.internic.net', 'socket_timeout' => 15, 'restrict_to_admin' => true, ], ];","title":"Configuration Example"},{"location":"configuration/whois/#usage","text":"When enabled, WHOIS lookups can be performed from: Zone management pages - Lookup domain registration information Domain search results - Quick WHOIS lookup for search results Administrative tools - Bulk domain verification","title":"Usage"},{"location":"configuration/whois/#supported-tlds","text":"The WHOIS functionality supports lookups for: Generic TLDs (.com, .net, .org, etc.) Country code TLDs (.uk, .de, .jp, etc.) New gTLDs (.xyz, .tech, .app, etc.)","title":"Supported TLDs"},{"location":"configuration/whois/#security-considerations","text":"Admin restriction : By default, only users with administrator privileges can use WHOIS functionality Rate limiting : Consider implementing rate limiting for WHOIS queries to prevent abuse Timeout settings : Adjust socket timeout based on your network conditions Logging : WHOIS queries may be logged depending on your logging configuration","title":"Security Considerations"},{"location":"configuration/whois/#performance-considerations","text":"WHOIS queries are network-dependent and may be slow Consider caching results for frequently queried domains Set appropriate timeout values to prevent interface blocking","title":"Performance Considerations"},{"location":"configuration/ui/custom-css/","text":"UI Styling Poweradmin uses built-in themes for its user interface styling. Currently, the application does not support custom CSS files for styling customization. Available Styles Poweradmin comes with the following styles, which can be selected in the configuration file: light (default): A clean, bright interface style dark : A darker interface style that reduces eye strain in low-light environments Style Configuration To change the style, update the style setting in the settings.php file under the interface section: return [ 'interface' => [ 'theme' => 'default', // The theme to use (default, custom) 'style' => 'dark', // Options: 'light', 'dark' ], ]; Theme and Style Relationship In Poweradmin, the visual appearance is controlled by two settings: theme : Controls the template structure style : Controls the color scheme and visual appearance This separation allows for maximum flexibility in customizing the interface. UI Customization Options Without custom CSS, you can still customize the UI using: Custom themes : Create custom templates in your theme directory Style selection : Choose between light and dark styles Layout settings : Configure which UI elements are shown and their positioning For more information about UI customization, see: - Themes documentation - Layout documentation (includes custom header and footer setup)","title":"Custom CSS"},{"location":"configuration/ui/custom-css/#ui-styling","text":"Poweradmin uses built-in themes for its user interface styling. Currently, the application does not support custom CSS files for styling customization.","title":"UI Styling"},{"location":"configuration/ui/custom-css/#available-styles","text":"Poweradmin comes with the following styles, which can be selected in the configuration file: light (default): A clean, bright interface style dark : A darker interface style that reduces eye strain in low-light environments","title":"Available Styles"},{"location":"configuration/ui/custom-css/#style-configuration","text":"To change the style, update the style setting in the settings.php file under the interface section: return [ 'interface' => [ 'theme' => 'default', // The theme to use (default, custom) 'style' => 'dark', // Options: 'light', 'dark' ], ];","title":"Style Configuration"},{"location":"configuration/ui/custom-css/#theme-and-style-relationship","text":"In Poweradmin, the visual appearance is controlled by two settings: theme : Controls the template structure style : Controls the color scheme and visual appearance This separation allows for maximum flexibility in customizing the interface.","title":"Theme and Style Relationship"},{"location":"configuration/ui/custom-css/#ui-customization-options","text":"Without custom CSS, you can still customize the UI using: Custom themes : Create custom templates in your theme directory Style selection : Choose between light and dark styles Layout settings : Configure which UI elements are shown and their positioning For more information about UI customization, see: - Themes documentation - Layout documentation (includes custom header and footer setup)","title":"UI Customization Options"},{"location":"configuration/ui/layout/","text":"Layout Customization Poweradmin allows you to customize various layout aspects to better fit your workflow. These settings are configured in the settings.php file under the interface section. Customizing Header and Footer Poweradmin supports custom header and footer templates through the theme system. Configuration First, configure your theme settings in settings.php : return [ 'interface' => [ 'theme' => 'custom', // Set to 'custom' to use your custom templates 'style' => 'light', // Options: 'light', 'dark' 'theme_base_path' => 'templates', // Base path for theme templates ], ]; Creating Custom Templates Create a directory structure for your custom theme: templates/ \u2514\u2500\u2500 custom/ \u251c\u2500\u2500 header.html \u251c\u2500\u2500 footer.html \u2514\u2500\u2500 other template files... Create the following files: Custom Header (templates/custom/header.html) <!-- Your custom header content goes here --> <img src=\"assets/your-logo.png\" height=\"32\"> <span class=\"fs-4\">Your Custom Title</span> Custom Footer (templates/custom/footer.html) <!-- Your custom footer content goes here --> <p>\u00a9 2025 Your Organization - Powered by <strong>Poweradmin</strong></p> Here are examples of custom templates in action: Custom Header File Structure Custom Footer Example Template Variables The following template variables are available in your custom templates: Header Template Variables {{ iface_title }} - Title from configuration settings {{ iface_style }} - Current theme style (light or dark) {{ file_version }} - File version timestamp for cache busting Footer Template Variables {{ version }} - Poweradmin version {{ iface_style }} - Current theme style {{ file_version }} - File version timestamp for cache busting Examples Corporate Branding Header <img src=\"assets/corporate-logo.png\" height=\"40\"> <span class=\"fs-4 ms-2\">Corporate DNS Management Portal</span> Extended Footer with Links <div class=\"d-flex flex-column\"> <p class=\"mb-1\">\u00a9 2025 Your Organization - DNS Management</p> <p class=\"mb-0 small\"> <a href=\"https://support.example.com\" class=\"text-decoration-none\">Support</a> | <a href=\"https://docs.example.com\" class=\"text-decoration-none\">Documentation</a> | <a href=\"mailto:dns-admin@example.com\" class=\"text-decoration-none\">Contact</a> </p> </div> UI Element Positioning Form Element Positioning Control the positioning of key UI elements: position_record_form_top : Place the \"Add record\" form at the top of the page. Default: false position_save_button_top : Place the \"Save changes\" button at the top of the page. Default: false return [ 'interface' => [ 'position_record_form_top' => true, 'position_save_button_top' => true, ], ]; Content Display Options Configure which information is displayed in the user interface: show_record_id : Show record ID column in edit mode. Default: true show_zone_comments : Show zone comments. Default: true show_record_comments : Show record comments. Default: false display_serial_in_zone_list : Show serial number in zone list. Default: false display_template_in_zone_list : Show template information in zone list. Default: false return [ 'interface' => [ 'show_record_id' => true, 'show_zone_comments' => true, 'show_record_comments' => true, 'display_serial_in_zone_list' => true, ], ]; Display Mode Configure how the main index page displays information: index_display : Choose between card view or list view. Options: cards , list . Default: cards return [ 'interface' => [ 'index_display' => 'list', ], ]; Pagination Control how many items appear per page: rows_per_page : Number of items displayed per page. Default: 10 return [ 'interface' => [ 'rows_per_page' => 20, ], ]; Zone Editing Features Enable or disable special editing features: add_reverse_record : Add the checkbox option to create PTR records from A/AAAA record view. Default: true add_domain_record : Add the checkbox option to create A/AAAA records from PTR record view. Default: true return [ 'interface' => [ 'add_reverse_record' => true, 'add_domain_record' => true, ], ]; Notes The custom templates use a simple templating system Changes may be overwritten during updates - keep backups of your custom files You can include custom JavaScript in your header/footer templates if needed","title":"Layout"},{"location":"configuration/ui/layout/#layout-customization","text":"Poweradmin allows you to customize various layout aspects to better fit your workflow. These settings are configured in the settings.php file under the interface section.","title":"Layout Customization"},{"location":"configuration/ui/layout/#customizing-header-and-footer","text":"Poweradmin supports custom header and footer templates through the theme system.","title":"Customizing Header and Footer"},{"location":"configuration/ui/layout/#configuration","text":"First, configure your theme settings in settings.php : return [ 'interface' => [ 'theme' => 'custom', // Set to 'custom' to use your custom templates 'style' => 'light', // Options: 'light', 'dark' 'theme_base_path' => 'templates', // Base path for theme templates ], ];","title":"Configuration"},{"location":"configuration/ui/layout/#creating-custom-templates","text":"Create a directory structure for your custom theme: templates/ \u2514\u2500\u2500 custom/ \u251c\u2500\u2500 header.html \u251c\u2500\u2500 footer.html \u2514\u2500\u2500 other template files... Create the following files:","title":"Creating Custom Templates"},{"location":"configuration/ui/layout/#custom-header-templatescustomheaderhtml","text":"<!-- Your custom header content goes here --> <img src=\"assets/your-logo.png\" height=\"32\"> <span class=\"fs-4\">Your Custom Title</span>","title":"Custom Header (templates/custom/header.html)"},{"location":"configuration/ui/layout/#custom-footer-templatescustomfooterhtml","text":"<!-- Your custom footer content goes here --> <p>\u00a9 2025 Your Organization - Powered by <strong>Poweradmin</strong></p> Here are examples of custom templates in action:","title":"Custom Footer (templates/custom/footer.html)"},{"location":"configuration/ui/layout/#custom-header-file-structure","text":"","title":"Custom Header File Structure"},{"location":"configuration/ui/layout/#custom-footer-example","text":"","title":"Custom Footer Example"},{"location":"configuration/ui/layout/#template-variables","text":"The following template variables are available in your custom templates:","title":"Template Variables"},{"location":"configuration/ui/layout/#header-template-variables","text":"{{ iface_title }} - Title from configuration settings {{ iface_style }} - Current theme style (light or dark) {{ file_version }} - File version timestamp for cache busting","title":"Header Template Variables"},{"location":"configuration/ui/layout/#footer-template-variables","text":"{{ version }} - Poweradmin version {{ iface_style }} - Current theme style {{ file_version }} - File version timestamp for cache busting","title":"Footer Template Variables"},{"location":"configuration/ui/layout/#examples","text":"","title":"Examples"},{"location":"configuration/ui/layout/#corporate-branding-header","text":"<img src=\"assets/corporate-logo.png\" height=\"40\"> <span class=\"fs-4 ms-2\">Corporate DNS Management Portal</span>","title":"Corporate Branding Header"},{"location":"configuration/ui/layout/#extended-footer-with-links","text":"<div class=\"d-flex flex-column\"> <p class=\"mb-1\">\u00a9 2025 Your Organization - DNS Management</p> <p class=\"mb-0 small\"> <a href=\"https://support.example.com\" class=\"text-decoration-none\">Support</a> | <a href=\"https://docs.example.com\" class=\"text-decoration-none\">Documentation</a> | <a href=\"mailto:dns-admin@example.com\" class=\"text-decoration-none\">Contact</a> </p> </div>","title":"Extended Footer with Links"},{"location":"configuration/ui/layout/#ui-element-positioning","text":"","title":"UI Element Positioning"},{"location":"configuration/ui/layout/#form-element-positioning","text":"Control the positioning of key UI elements: position_record_form_top : Place the \"Add record\" form at the top of the page. Default: false position_save_button_top : Place the \"Save changes\" button at the top of the page. Default: false return [ 'interface' => [ 'position_record_form_top' => true, 'position_save_button_top' => true, ], ];","title":"Form Element Positioning"},{"location":"configuration/ui/layout/#content-display-options","text":"Configure which information is displayed in the user interface: show_record_id : Show record ID column in edit mode. Default: true show_zone_comments : Show zone comments. Default: true show_record_comments : Show record comments. Default: false display_serial_in_zone_list : Show serial number in zone list. Default: false display_template_in_zone_list : Show template information in zone list. Default: false return [ 'interface' => [ 'show_record_id' => true, 'show_zone_comments' => true, 'show_record_comments' => true, 'display_serial_in_zone_list' => true, ], ];","title":"Content Display Options"},{"location":"configuration/ui/layout/#display-mode","text":"Configure how the main index page displays information: index_display : Choose between card view or list view. Options: cards , list . Default: cards return [ 'interface' => [ 'index_display' => 'list', ], ];","title":"Display Mode"},{"location":"configuration/ui/layout/#pagination","text":"Control how many items appear per page: rows_per_page : Number of items displayed per page. Default: 10 return [ 'interface' => [ 'rows_per_page' => 20, ], ];","title":"Pagination"},{"location":"configuration/ui/layout/#zone-editing-features","text":"Enable or disable special editing features: add_reverse_record : Add the checkbox option to create PTR records from A/AAAA record view. Default: true add_domain_record : Add the checkbox option to create A/AAAA records from PTR record view. Default: true return [ 'interface' => [ 'add_reverse_record' => true, 'add_domain_record' => true, ], ];","title":"Zone Editing Features"},{"location":"configuration/ui/layout/#notes","text":"The custom templates use a simple templating system Changes may be overwritten during updates - keep backups of your custom files You can include custom JavaScript in your header/footer templates if needed","title":"Notes"},{"location":"configuration/ui/overview/","text":"UI Customization Overview Poweradmin provides several ways to customize the user interface to match your organization's needs. All UI configurations are set in the settings.php file under the interface section. Configuration Options The following settings control the user interface appearance and behavior: language : Default language for the interface. Default: en_EN enabled_languages : Comma-separated list of available languages. Default: cs_CZ,de_DE,en_EN,es_ES,fr_FR,it_IT,ja_JP,lt_LT,nb_NO,nl_NL,pl_PL,pt_PT,ru_RU,tr_TR,zh_CN theme : UI theme name. Options: default , custom . Default: default style : UI style. Options: light , dark . Default: light theme_base_path : Base path for theme templates. Default: templates title : Title displayed in the browser. Default: Poweradmin session_timeout : Session timeout in seconds. Default: 1800 (30 minutes) rows_per_page : Number of items to display per page. Default: 10 index_display : Display mode for the index page. Options: cards , list . Default: cards UI Element Settings show_record_id : Show record ID column in edit mode. Default: true position_record_form_top : Position the \"Add record\" form at the top of the page. Default: false position_save_button_top : Position the \"Save changes\" button at the top of the page. Default: false show_zone_comments : Show or hide zone comments. Default: true show_record_comments : Show or hide record comments. Default: false display_serial_in_zone_list : Display serial number in zone list. Default: false display_template_in_zone_list : Display template information in zone list. Default: false display_fullname_in_zone_list : Show user's full name instead of username in zone lists. Default: false search_group_records : Group records by name and content in search results. Default: false reverse_zone_sort : Reverse zone sorting algorithm. Options: 'natural' (default), 'hierarchical' (experimental). Default: natural show_pdns_status : Show PowerDNS server status page and dashboard card. Default: false display_hostname_only : Display only hostname part in zone edit form (strips zone suffix). Default: false enable_consistency_checks : Enable database consistency checks page. Default: false Zone Editing Features add_reverse_record : Enable checkbox to add PTR record from regular zone view. Default: true add_domain_record : Enable checkbox to add A/AAAA record from reverse zone view. Default: true show_migrations : Show migrations menu item. Default: false (experimental) Example Configuration return [ 'interface' => [ 'language' => 'en_EN', 'theme' => 'custom', 'style' => 'dark', 'theme_base_path' => 'templates', 'title' => 'DNS Management Console', 'rows_per_page' => 20, 'index_display' => 'list', 'show_record_comments' => true, 'position_save_button_top' => true, ], ]; Customization Options Poweradmin offers several ways to customize the user interface: Themes and Styles : Choose between different themes and light/dark styles Custom Templates : Create custom header and footer templates Layout Configuration : Control which UI elements are displayed and their positioning See the specific documentation pages for more detailed information on each customization option: Themes Layout (includes custom header and footer setup) UI Styling","title":"Overview"},{"location":"configuration/ui/overview/#ui-customization-overview","text":"Poweradmin provides several ways to customize the user interface to match your organization's needs. All UI configurations are set in the settings.php file under the interface section.","title":"UI Customization Overview"},{"location":"configuration/ui/overview/#configuration-options","text":"The following settings control the user interface appearance and behavior: language : Default language for the interface. Default: en_EN enabled_languages : Comma-separated list of available languages. Default: cs_CZ,de_DE,en_EN,es_ES,fr_FR,it_IT,ja_JP,lt_LT,nb_NO,nl_NL,pl_PL,pt_PT,ru_RU,tr_TR,zh_CN theme : UI theme name. Options: default , custom . Default: default style : UI style. Options: light , dark . Default: light theme_base_path : Base path for theme templates. Default: templates title : Title displayed in the browser. Default: Poweradmin session_timeout : Session timeout in seconds. Default: 1800 (30 minutes) rows_per_page : Number of items to display per page. Default: 10 index_display : Display mode for the index page. Options: cards , list . Default: cards","title":"Configuration Options"},{"location":"configuration/ui/overview/#ui-element-settings","text":"show_record_id : Show record ID column in edit mode. Default: true position_record_form_top : Position the \"Add record\" form at the top of the page. Default: false position_save_button_top : Position the \"Save changes\" button at the top of the page. Default: false show_zone_comments : Show or hide zone comments. Default: true show_record_comments : Show or hide record comments. Default: false display_serial_in_zone_list : Display serial number in zone list. Default: false display_template_in_zone_list : Display template information in zone list. Default: false display_fullname_in_zone_list : Show user's full name instead of username in zone lists. Default: false search_group_records : Group records by name and content in search results. Default: false reverse_zone_sort : Reverse zone sorting algorithm. Options: 'natural' (default), 'hierarchical' (experimental). Default: natural show_pdns_status : Show PowerDNS server status page and dashboard card. Default: false display_hostname_only : Display only hostname part in zone edit form (strips zone suffix). Default: false enable_consistency_checks : Enable database consistency checks page. Default: false","title":"UI Element Settings"},{"location":"configuration/ui/overview/#zone-editing-features","text":"add_reverse_record : Enable checkbox to add PTR record from regular zone view. Default: true add_domain_record : Enable checkbox to add A/AAAA record from reverse zone view. Default: true show_migrations : Show migrations menu item. Default: false (experimental)","title":"Zone Editing Features"},{"location":"configuration/ui/overview/#example-configuration","text":"return [ 'interface' => [ 'language' => 'en_EN', 'theme' => 'custom', 'style' => 'dark', 'theme_base_path' => 'templates', 'title' => 'DNS Management Console', 'rows_per_page' => 20, 'index_display' => 'list', 'show_record_comments' => true, 'position_save_button_top' => true, ], ];","title":"Example Configuration"},{"location":"configuration/ui/overview/#customization-options","text":"Poweradmin offers several ways to customize the user interface: Themes and Styles : Choose between different themes and light/dark styles Custom Templates : Create custom header and footer templates Layout Configuration : Control which UI elements are displayed and their positioning See the specific documentation pages for more detailed information on each customization option: Themes Layout (includes custom header and footer setup) UI Styling","title":"Customization Options"},{"location":"configuration/ui/themes/","text":"Themes Poweradmin includes built-in themes that can be selected through the configuration file to change the application's visual appearance. Available Themes Poweradmin comes with the following themes: default : The standard theme custom : For custom theme templates Theme Configuration Configure your preferred theme in the settings.php file under the interface section: return [ 'interface' => [ 'theme' => 'default', // Options: 'default', 'custom', etc. 'style' => 'light', // Options: 'light', 'dark' 'theme_base_path' => 'templates', // Base path for theme templates ], ]; Theme Screenshots Light Style Dark Style Theme Components Each theme includes consistent styling for: Navigation menus Form elements Buttons and controls Tables and data views Modals and dialogs Notifications and alerts Creating Custom Themes Poweradmin supports custom themes through the theme templates system. To create a custom theme: Set the theme to custom in your settings Create a directory structure in your theme base path: templates/ \u2514\u2500\u2500 custom/ \u251c\u2500\u2500 header.html \u251c\u2500\u2500 footer.html \u2514\u2500\u2500 other template files... Customize the template files to match your organization's branding Theme Customization For more information on customizing themes, see: - Custom UI Layout (includes custom header and footer setup) - Custom CSS (for additional style customization)","title":"Themes"},{"location":"configuration/ui/themes/#themes","text":"Poweradmin includes built-in themes that can be selected through the configuration file to change the application's visual appearance.","title":"Themes"},{"location":"configuration/ui/themes/#available-themes","text":"Poweradmin comes with the following themes: default : The standard theme custom : For custom theme templates","title":"Available Themes"},{"location":"configuration/ui/themes/#theme-configuration","text":"Configure your preferred theme in the settings.php file under the interface section: return [ 'interface' => [ 'theme' => 'default', // Options: 'default', 'custom', etc. 'style' => 'light', // Options: 'light', 'dark' 'theme_base_path' => 'templates', // Base path for theme templates ], ];","title":"Theme Configuration"},{"location":"configuration/ui/themes/#theme-screenshots","text":"","title":"Theme Screenshots"},{"location":"configuration/ui/themes/#light-style","text":"","title":"Light Style"},{"location":"configuration/ui/themes/#dark-style","text":"","title":"Dark Style"},{"location":"configuration/ui/themes/#theme-components","text":"Each theme includes consistent styling for: Navigation menus Form elements Buttons and controls Tables and data views Modals and dialogs Notifications and alerts","title":"Theme Components"},{"location":"configuration/ui/themes/#creating-custom-themes","text":"Poweradmin supports custom themes through the theme templates system. To create a custom theme: Set the theme to custom in your settings Create a directory structure in your theme base path: templates/ \u2514\u2500\u2500 custom/ \u251c\u2500\u2500 header.html \u251c\u2500\u2500 footer.html \u2514\u2500\u2500 other template files... Customize the template files to match your organization's branding","title":"Creating Custom Themes"},{"location":"configuration/ui/themes/#theme-customization","text":"For more information on customizing themes, see: - Custom UI Layout (includes custom header and footer setup) - Custom CSS (for additional style customization)","title":"Theme Customization"},{"location":"contributing/coding-standards/","text":"Poweradmin Coding Standards Poweradmin follows a set of coding standards based on PSR-12 with some project-specific modifications. This document outlines these standards and how to enforce them. Standards Overview Base Standard : PSR-12 Modifications : Excludes PSR12.Classes.OpeningBraceSpace rule Line length set to 250 characters (instead of PSR-12 default) Autoloading : PSR-4 (as specified in composer.json) Code Quality Tools Poweradmin uses several tools to maintain code quality: PHP_CodeSniffer (PHPCS/PHPCBF) Checks for coding standard violations Can automatically fix many issues with PHPCBF PHP-CS-Fixer Additional code style fixing Complements PHPCS for more comprehensive style enforcement PHPStan Static analysis tool Detects potential errors and type inconsistencies Psalm Type checker Configured with level 2 error reporting PHPMD (PHP Mess Detector) Detects code smells and potential problems Helps maintain cleaner, more maintainable code Using the Tools Running Code Style Checks # Check code style for lib directory composer check:lib # Check code style for all PHP files composer check:all Auto-Fixing Code Style Issues # Fix code style in lib directory composer format:lib # Fix code style in all PHP files composer format:all Running PHP-CS-Fixer # Check style with PHP-CS-Fixer composer style:check # Fix style with PHP-CS-Fixer composer style:fix Static Analysis # Run PHPStan static analysis composer analyse:all # Run Psalm type checking composer check:psalm PHP Mess Detection # Run PHPMD composer check:phpmd:lib Setting Up Your Development Environment For a consistent development experience, configure your IDE to use these coding standards: PhpStorm Install the PHP_CodeSniffer plugin Configure it to use the project's phpcs.xml file Enable \"Reformat Code\" to use PSR-12 with project modifications VSCode Install the PHP Intelephense or PHP CodeSniffer extensions Configure them to use the project's phpcs.xml file Pre-Commit Hooks Consider setting up Git pre-commit hooks to automatically check/fix code style before commits: Install husky and lint-staged Configure lint-staged to run PHP_CodeSniffer or PHP-CS-Fixer on staged PHP files Additional Resources PSR-12 Documentation PHP_CodeSniffer Documentation PHP-CS-Fixer Documentation PHPStan Documentation Psalm Documentation","title":"Coding Standards"},{"location":"contributing/coding-standards/#poweradmin-coding-standards","text":"Poweradmin follows a set of coding standards based on PSR-12 with some project-specific modifications. This document outlines these standards and how to enforce them.","title":"Poweradmin Coding Standards"},{"location":"contributing/coding-standards/#standards-overview","text":"Base Standard : PSR-12 Modifications : Excludes PSR12.Classes.OpeningBraceSpace rule Line length set to 250 characters (instead of PSR-12 default) Autoloading : PSR-4 (as specified in composer.json)","title":"Standards Overview"},{"location":"contributing/coding-standards/#code-quality-tools","text":"Poweradmin uses several tools to maintain code quality:","title":"Code Quality Tools"},{"location":"contributing/coding-standards/#php_codesniffer-phpcsphpcbf","text":"Checks for coding standard violations Can automatically fix many issues with PHPCBF","title":"PHP_CodeSniffer (PHPCS/PHPCBF)"},{"location":"contributing/coding-standards/#php-cs-fixer","text":"Additional code style fixing Complements PHPCS for more comprehensive style enforcement","title":"PHP-CS-Fixer"},{"location":"contributing/coding-standards/#phpstan","text":"Static analysis tool Detects potential errors and type inconsistencies","title":"PHPStan"},{"location":"contributing/coding-standards/#psalm","text":"Type checker Configured with level 2 error reporting","title":"Psalm"},{"location":"contributing/coding-standards/#phpmd-php-mess-detector","text":"Detects code smells and potential problems Helps maintain cleaner, more maintainable code","title":"PHPMD (PHP Mess Detector)"},{"location":"contributing/coding-standards/#using-the-tools","text":"","title":"Using the Tools"},{"location":"contributing/coding-standards/#running-code-style-checks","text":"# Check code style for lib directory composer check:lib # Check code style for all PHP files composer check:all","title":"Running Code Style Checks"},{"location":"contributing/coding-standards/#auto-fixing-code-style-issues","text":"# Fix code style in lib directory composer format:lib # Fix code style in all PHP files composer format:all","title":"Auto-Fixing Code Style Issues"},{"location":"contributing/coding-standards/#running-php-cs-fixer","text":"# Check style with PHP-CS-Fixer composer style:check # Fix style with PHP-CS-Fixer composer style:fix","title":"Running PHP-CS-Fixer"},{"location":"contributing/coding-standards/#static-analysis","text":"# Run PHPStan static analysis composer analyse:all # Run Psalm type checking composer check:psalm","title":"Static Analysis"},{"location":"contributing/coding-standards/#php-mess-detection","text":"# Run PHPMD composer check:phpmd:lib","title":"PHP Mess Detection"},{"location":"contributing/coding-standards/#setting-up-your-development-environment","text":"For a consistent development experience, configure your IDE to use these coding standards:","title":"Setting Up Your Development Environment"},{"location":"contributing/coding-standards/#phpstorm","text":"Install the PHP_CodeSniffer plugin Configure it to use the project's phpcs.xml file Enable \"Reformat Code\" to use PSR-12 with project modifications","title":"PhpStorm"},{"location":"contributing/coding-standards/#vscode","text":"Install the PHP Intelephense or PHP CodeSniffer extensions Configure them to use the project's phpcs.xml file","title":"VSCode"},{"location":"contributing/coding-standards/#pre-commit-hooks","text":"Consider setting up Git pre-commit hooks to automatically check/fix code style before commits: Install husky and lint-staged Configure lint-staged to run PHP_CodeSniffer or PHP-CS-Fixer on staged PHP files","title":"Pre-Commit Hooks"},{"location":"contributing/coding-standards/#additional-resources","text":"PSR-12 Documentation PHP_CodeSniffer Documentation PHP-CS-Fixer Documentation PHPStan Documentation Psalm Documentation","title":"Additional Resources"},{"location":"contributing/development/","text":"Poweradmin Development Guide Development Environment Setup Prerequisites PHP 8.1 or higher MySQL, PostgreSQL, or SQLite Composer Node.js and NPM (for frontend assets) PowerDNS server (for testing) Installation for Development Clone the repository git clone https://github.com/poweradmin/poweradmin.git cd poweradmin Install dependencies composer install npm install Configure the application Copy config/settings.defaults.php to a new file in the same directory Modify the settings according to your environment Project Structure Core Components lib/ : Core library code Application/ : Controllers, services, and application logic Domain/ : Domain models and business logic Infrastructure/ : Database, API clients, and external services Frontend assets/ : JavaScript and CSS files style/ : CSS files (ignite.css, spark.css) templates/ : HTML templates Testing tests/ : Test files unit/ : Unit tests integration/ : Integration tests plans/ : Test plans cypress/ : End-to-end tests Documentation Some documentation can be generated from the source code using phpDocumentor. To generate the documentation, run the following command: phive install phpDocumentor composer run docs The documentation will be generated in the docs directory. Testing Poweradmin has comprehensive testing support including unit tests, integration tests, and end-to-end tests. For detailed information on testing methodologies, frameworks, and running tests, please see the Testing Guide . Continuous Integration The project uses GitHub Actions for CI/CD Ensure all tests pass before submitting pull requests Coding Standards Poweradmin follows PSR-12 with project-specific modifications. For detailed information on coding standards, tools for code quality, and how to enforce them, see the Coding Standards Guide . Database Migrations Database migrations are managed with Phinx See db/migrations/ for existing migrations Create new migrations with: ./vendor/bin/phinx create MyNewMigration Contributing Fork the repository Create a feature branch Make your changes Run tests and ensure coding standards Submit a pull request Contribution Guidelines Code Quality : Ensure your code follows the project's style and standards Testing : Test your changes thoroughly before submitting Documentation : Include appropriate documentation for new features Attribution Policy All meaningful contributions are credited in release notes. Please note: Sometimes similar ideas come from multiple contributors; implementation quality determines which is merged Contributions may be partially accepted or rewritten to maintain project consistency Even if your exact code isn't used, your ideas will still be credited if they influence the final implementation If you notice your contribution hasn't been acknowledged in the release notes, please reach out - we want to ensure everyone receives proper recognition. Internationalization Translation files are in the locale/ directory New strings should be wrapped in _() for translation Security Considerations Always validate user input Use prepared statements for database queries Follow secure coding practices Use CSRF tokens for forms","title":"Development Setup"},{"location":"contributing/development/#poweradmin-development-guide","text":"","title":"Poweradmin Development Guide"},{"location":"contributing/development/#development-environment-setup","text":"","title":"Development Environment Setup"},{"location":"contributing/development/#prerequisites","text":"PHP 8.1 or higher MySQL, PostgreSQL, or SQLite Composer Node.js and NPM (for frontend assets) PowerDNS server (for testing)","title":"Prerequisites"},{"location":"contributing/development/#installation-for-development","text":"Clone the repository git clone https://github.com/poweradmin/poweradmin.git cd poweradmin Install dependencies composer install npm install Configure the application Copy config/settings.defaults.php to a new file in the same directory Modify the settings according to your environment","title":"Installation for Development"},{"location":"contributing/development/#project-structure","text":"","title":"Project Structure"},{"location":"contributing/development/#core-components","text":"lib/ : Core library code Application/ : Controllers, services, and application logic Domain/ : Domain models and business logic Infrastructure/ : Database, API clients, and external services","title":"Core Components"},{"location":"contributing/development/#frontend","text":"assets/ : JavaScript and CSS files style/ : CSS files (ignite.css, spark.css) templates/ : HTML templates","title":"Frontend"},{"location":"contributing/development/#testing","text":"tests/ : Test files unit/ : Unit tests integration/ : Integration tests plans/ : Test plans cypress/ : End-to-end tests","title":"Testing"},{"location":"contributing/development/#documentation","text":"Some documentation can be generated from the source code using phpDocumentor. To generate the documentation, run the following command: phive install phpDocumentor composer run docs The documentation will be generated in the docs directory.","title":"Documentation"},{"location":"contributing/development/#testing_1","text":"Poweradmin has comprehensive testing support including unit tests, integration tests, and end-to-end tests. For detailed information on testing methodologies, frameworks, and running tests, please see the Testing Guide .","title":"Testing"},{"location":"contributing/development/#continuous-integration","text":"The project uses GitHub Actions for CI/CD Ensure all tests pass before submitting pull requests","title":"Continuous Integration"},{"location":"contributing/development/#coding-standards","text":"Poweradmin follows PSR-12 with project-specific modifications. For detailed information on coding standards, tools for code quality, and how to enforce them, see the Coding Standards Guide .","title":"Coding Standards"},{"location":"contributing/development/#database-migrations","text":"Database migrations are managed with Phinx See db/migrations/ for existing migrations Create new migrations with: ./vendor/bin/phinx create MyNewMigration","title":"Database Migrations"},{"location":"contributing/development/#contributing","text":"Fork the repository Create a feature branch Make your changes Run tests and ensure coding standards Submit a pull request","title":"Contributing"},{"location":"contributing/development/#contribution-guidelines","text":"Code Quality : Ensure your code follows the project's style and standards Testing : Test your changes thoroughly before submitting Documentation : Include appropriate documentation for new features","title":"Contribution Guidelines"},{"location":"contributing/development/#attribution-policy","text":"All meaningful contributions are credited in release notes. Please note: Sometimes similar ideas come from multiple contributors; implementation quality determines which is merged Contributions may be partially accepted or rewritten to maintain project consistency Even if your exact code isn't used, your ideas will still be credited if they influence the final implementation If you notice your contribution hasn't been acknowledged in the release notes, please reach out - we want to ensure everyone receives proper recognition.","title":"Attribution Policy"},{"location":"contributing/development/#internationalization","text":"Translation files are in the locale/ directory New strings should be wrapped in _() for translation","title":"Internationalization"},{"location":"contributing/development/#security-considerations","text":"Always validate user input Use prepared statements for database queries Follow secure coding practices Use CSRF tokens for forms","title":"Security Considerations"},{"location":"contributing/testing/","text":"Poweradmin Testing Guide Overview This document outlines the testing strategy and implementation details for the Poweradmin project. Test Frameworks & Tools PHPUnit : Primary testing framework for PHP code Cypress : End-to-end testing framework for UI testing In addition to these testing frameworks, Poweradmin uses various code quality tools that are described in detail in the Coding Standards Guide , including PHPStan, PHP_CodeSniffer, Psalm, PHPMD, and PHP-CS-Fixer. Test Directory Structure /tests \u251c\u2500\u2500 integration - Integration tests \u251c\u2500\u2500 plans - Test plans documentation \u2514\u2500\u2500 unit - Unit tests /cypress \u251c\u2500\u2500 e2e - End-to-end test specs by feature \u251c\u2500\u2500 fixtures - Test data files \u2514\u2500\u2500 support - Cypress support and custom commands Types of Tests Unit Tests Located in /tests/unit , these tests verify individual components in isolation, focusing on: - Configuration management - DNS record handling and formatting - Router functionality - IP address validation and handling - User authentication and password encryption - Various utility and helper functions Integration Tests Located in /tests/integration , testing interactions between components, particularly database operations. End-to-End Tests Located in /cypress/e2e , organized by feature: Main Feature Tests Authentication - Login and form validation User Management - Creating, editing, and deleting users Zone Management - Adding master/slave zones and records Record Management - Adding, editing, and deleting different record types Zone Templates - Template creation and application Search - Zone and record searching Corner Case Tests Input Validation - Testing edge cases in form validation Error Handling - Session management, security, and UI edge cases The Cypress tests are located in the cypress/e2e directory organized by feature. A complete test plan for UI testing is available in tests/plans/cypress-ui-test-plan.md . Manual Test Plans Documentation in /tests/plans outlining test procedures for: - UI testing ( tests/plans/cypress-ui-test-plan.md ) - Installer testing ( tests/plans/installer-test-plan.md ) - Covers both regular installation flows and corner cases for properly testing the Poweradmin installation process Running Tests PHP Tests # Run unit tests composer tests # Run integration tests composer tests:integration Cypress Tests # Open Cypress Test Runner npm run cypress:open # or yarn cypress:open # Run Cypress tests headlessly npm run cypress:run # or yarn cypress:run Code Quality Checks For running code quality checks, please refer to the Coding Standards Guide for detailed command usage. CI/CD Integration The test suite is integrated with CI/CD pipelines to ensure code quality and prevent regressions. Test Coverage Current test coverage focuses on: - Core DNS management functionality - User authentication and management - Configuration validation - UI workflows through Cypress tests Contributing Tests When adding new features or fixing bugs: 1. Add appropriate unit tests for new classes and methods 2. Update or add Cypress tests for UI changes 3. Run the full test suite before submitting PRs 4. Ensure all code quality checks pass","title":"Testing"},{"location":"contributing/testing/#poweradmin-testing-guide","text":"","title":"Poweradmin Testing Guide"},{"location":"contributing/testing/#overview","text":"This document outlines the testing strategy and implementation details for the Poweradmin project.","title":"Overview"},{"location":"contributing/testing/#test-frameworks-tools","text":"PHPUnit : Primary testing framework for PHP code Cypress : End-to-end testing framework for UI testing In addition to these testing frameworks, Poweradmin uses various code quality tools that are described in detail in the Coding Standards Guide , including PHPStan, PHP_CodeSniffer, Psalm, PHPMD, and PHP-CS-Fixer.","title":"Test Frameworks &amp; Tools"},{"location":"contributing/testing/#test-directory-structure","text":"/tests \u251c\u2500\u2500 integration - Integration tests \u251c\u2500\u2500 plans - Test plans documentation \u2514\u2500\u2500 unit - Unit tests /cypress \u251c\u2500\u2500 e2e - End-to-end test specs by feature \u251c\u2500\u2500 fixtures - Test data files \u2514\u2500\u2500 support - Cypress support and custom commands","title":"Test Directory Structure"},{"location":"contributing/testing/#types-of-tests","text":"","title":"Types of Tests"},{"location":"contributing/testing/#unit-tests","text":"Located in /tests/unit , these tests verify individual components in isolation, focusing on: - Configuration management - DNS record handling and formatting - Router functionality - IP address validation and handling - User authentication and password encryption - Various utility and helper functions","title":"Unit Tests"},{"location":"contributing/testing/#integration-tests","text":"Located in /tests/integration , testing interactions between components, particularly database operations.","title":"Integration Tests"},{"location":"contributing/testing/#end-to-end-tests","text":"Located in /cypress/e2e , organized by feature:","title":"End-to-End Tests"},{"location":"contributing/testing/#main-feature-tests","text":"Authentication - Login and form validation User Management - Creating, editing, and deleting users Zone Management - Adding master/slave zones and records Record Management - Adding, editing, and deleting different record types Zone Templates - Template creation and application Search - Zone and record searching","title":"Main Feature Tests"},{"location":"contributing/testing/#corner-case-tests","text":"Input Validation - Testing edge cases in form validation Error Handling - Session management, security, and UI edge cases The Cypress tests are located in the cypress/e2e directory organized by feature. A complete test plan for UI testing is available in tests/plans/cypress-ui-test-plan.md .","title":"Corner Case Tests"},{"location":"contributing/testing/#manual-test-plans","text":"Documentation in /tests/plans outlining test procedures for: - UI testing ( tests/plans/cypress-ui-test-plan.md ) - Installer testing ( tests/plans/installer-test-plan.md ) - Covers both regular installation flows and corner cases for properly testing the Poweradmin installation process","title":"Manual Test Plans"},{"location":"contributing/testing/#running-tests","text":"","title":"Running Tests"},{"location":"contributing/testing/#php-tests","text":"# Run unit tests composer tests # Run integration tests composer tests:integration","title":"PHP Tests"},{"location":"contributing/testing/#cypress-tests","text":"# Open Cypress Test Runner npm run cypress:open # or yarn cypress:open # Run Cypress tests headlessly npm run cypress:run # or yarn cypress:run","title":"Cypress Tests"},{"location":"contributing/testing/#code-quality-checks","text":"For running code quality checks, please refer to the Coding Standards Guide for detailed command usage.","title":"Code Quality Checks"},{"location":"contributing/testing/#cicd-integration","text":"The test suite is integrated with CI/CD pipelines to ensure code quality and prevent regressions.","title":"CI/CD Integration"},{"location":"contributing/testing/#test-coverage","text":"Current test coverage focuses on: - Core DNS management functionality - User authentication and management - Configuration validation - UI workflows through Cypress tests","title":"Test Coverage"},{"location":"contributing/testing/#contributing-tests","text":"When adding new features or fixing bugs: 1. Add appropriate unit tests for new classes and methods 2. Update or add Cypress tests for UI changes 3. Run the full test suite before submitting PRs 4. Ensure all code quality checks pass","title":"Contributing Tests"},{"location":"database/mysql-configuration/","text":"MySQL Configuration for Poweradmin Overview This guide explains how to configure Poweradmin to use MySQL or MariaDB as your database backend. Requirements MySQL 5.7+ or MariaDB 10.3+ PHP with PDO MySQL extension enabled MySQL user with appropriate privileges Configuration Steps Create a configuration file at /config/settings.php based on the example below: <?php /** * Poweradmin MySQL Configuration */ return [ /** * Database Settings */ 'database' => [ 'type' => 'mysql', // Set database type to MySQL 'host' => 'localhost', // MySQL server hostname 'port' => '3306', // Default MySQL port 'user' => 'poweradmin', // Database username 'password' => 'your_password', // Database password (change this!) 'name' => 'powerdns', // Database name 'charset' => 'utf8mb4', // Recommended: utf8mb4 for full Unicode support 'file' => '', // Not used for MySQL 'debug' => false, // Set to true to see SQL queries for debugging ], // Other configuration sections remain the same as in settings.defaults.php ]; Database Creation Creating the Database CREATE DATABASE powerdns CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; CREATE USER 'poweradmin'@'localhost' IDENTIFIED BY 'your_password'; GRANT ALL PRIVILEGES ON powerdns.* TO 'poweradmin'@'localhost'; FLUSH PRIVILEGES; Schema Installation The SQL schema files are located in the sql/ directory: For a new installation: Use sql/poweradmin-mysql-db-structure.sql For PowerDNS schema: Check the appropriate version in sql/pdns/[version]/schema.mysql.sql mysql -u poweradmin -p powerdns < sql/poweradmin-mysql-db-structure.sql mysql -u poweradmin -p powerdns < sql/pdns/[version]/schema.mysql.sql","title":"MySQL/MariaDB"},{"location":"database/mysql-configuration/#mysql-configuration-for-poweradmin","text":"","title":"MySQL Configuration for Poweradmin"},{"location":"database/mysql-configuration/#overview","text":"This guide explains how to configure Poweradmin to use MySQL or MariaDB as your database backend.","title":"Overview"},{"location":"database/mysql-configuration/#requirements","text":"MySQL 5.7+ or MariaDB 10.3+ PHP with PDO MySQL extension enabled MySQL user with appropriate privileges","title":"Requirements"},{"location":"database/mysql-configuration/#configuration-steps","text":"Create a configuration file at /config/settings.php based on the example below: <?php /** * Poweradmin MySQL Configuration */ return [ /** * Database Settings */ 'database' => [ 'type' => 'mysql', // Set database type to MySQL 'host' => 'localhost', // MySQL server hostname 'port' => '3306', // Default MySQL port 'user' => 'poweradmin', // Database username 'password' => 'your_password', // Database password (change this!) 'name' => 'powerdns', // Database name 'charset' => 'utf8mb4', // Recommended: utf8mb4 for full Unicode support 'file' => '', // Not used for MySQL 'debug' => false, // Set to true to see SQL queries for debugging ], // Other configuration sections remain the same as in settings.defaults.php ];","title":"Configuration Steps"},{"location":"database/mysql-configuration/#database-creation","text":"","title":"Database Creation"},{"location":"database/mysql-configuration/#creating-the-database","text":"CREATE DATABASE powerdns CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; CREATE USER 'poweradmin'@'localhost' IDENTIFIED BY 'your_password'; GRANT ALL PRIVILEGES ON powerdns.* TO 'poweradmin'@'localhost'; FLUSH PRIVILEGES;","title":"Creating the Database"},{"location":"database/mysql-configuration/#schema-installation","text":"The SQL schema files are located in the sql/ directory: For a new installation: Use sql/poweradmin-mysql-db-structure.sql For PowerDNS schema: Check the appropriate version in sql/pdns/[version]/schema.mysql.sql mysql -u poweradmin -p powerdns < sql/poweradmin-mysql-db-structure.sql mysql -u poweradmin -p powerdns < sql/pdns/[version]/schema.mysql.sql","title":"Schema Installation"},{"location":"database/postgresql-configuration/","text":"PostgreSQL Configuration for Poweradmin Overview This guide explains how to configure Poweradmin to use PostgreSQL as your database backend. Requirements PostgreSQL 10.0+ PHP with PDO PostgreSQL extension enabled PostgreSQL user with appropriate privileges Configuration Steps Create a configuration file at /config/settings.php based on the example below: <?php /** * Poweradmin PostgreSQL Configuration */ return [ /** * Database Settings */ 'database' => [ 'type' => 'pgsql', // Set database type to PostgreSQL 'host' => 'localhost', // PostgreSQL server hostname 'port' => '5432', // Default PostgreSQL port 'user' => 'poweradmin', // Database username 'password' => 'your_password', // Database password (change this!) 'name' => 'powerdns', // Database name 'charset' => 'UTF8', // PostgreSQL uses uppercase charset names 'file' => '', // Not used for PostgreSQL 'debug' => false, // Set to true to see SQL queries for debugging ], // Other configuration sections remain the same as in settings.defaults.php ]; Database Creation Creating the Database CREATE DATABASE powerdns ENCODING 'UTF8'; CREATE USER poweradmin WITH ENCRYPTED PASSWORD 'your_password'; GRANT ALL PRIVILEGES ON DATABASE powerdns TO poweradmin; \\c powerdns GRANT ALL ON SCHEMA public TO poweradmin; Schema Installation The SQL schema files are located in the sql/ directory: For a new installation: Use sql/poweradmin-pgsql-db-structure.sql For PowerDNS schema: Check the appropriate version in sql/pdns/[version]/schema.pgsql.sql psql -U poweradmin -d powerdns -f sql/poweradmin-pgsql-db-structure.sql psql -U poweradmin -d powerdns -f sql/pdns/[version]/schema.pgsql.sql PostgreSQL-Specific Considerations Sequences PostgreSQL uses sequences for auto-incrementing primary keys. If you're migrating from MySQL or experiencing issues with IDs, you may need to reset sequences: SELECT setval('sequence_name', (SELECT MAX(id) FROM table_name)); Case Sensitivity PostgreSQL is case-sensitive for identifiers unless quoted. All table and column names in Poweradmin should be accessed in lowercase. Performance Tuning VACUUM : Schedule regular VACUUM ANALYZE operations to maintain database health Indexing : Consider additional indexes for query patterns specific to your installation Statement Timeout : For web applications, consider setting statement_timeout to prevent long-running queries","title":"PostgreSQL"},{"location":"database/postgresql-configuration/#postgresql-configuration-for-poweradmin","text":"","title":"PostgreSQL Configuration for Poweradmin"},{"location":"database/postgresql-configuration/#overview","text":"This guide explains how to configure Poweradmin to use PostgreSQL as your database backend.","title":"Overview"},{"location":"database/postgresql-configuration/#requirements","text":"PostgreSQL 10.0+ PHP with PDO PostgreSQL extension enabled PostgreSQL user with appropriate privileges","title":"Requirements"},{"location":"database/postgresql-configuration/#configuration-steps","text":"Create a configuration file at /config/settings.php based on the example below: <?php /** * Poweradmin PostgreSQL Configuration */ return [ /** * Database Settings */ 'database' => [ 'type' => 'pgsql', // Set database type to PostgreSQL 'host' => 'localhost', // PostgreSQL server hostname 'port' => '5432', // Default PostgreSQL port 'user' => 'poweradmin', // Database username 'password' => 'your_password', // Database password (change this!) 'name' => 'powerdns', // Database name 'charset' => 'UTF8', // PostgreSQL uses uppercase charset names 'file' => '', // Not used for PostgreSQL 'debug' => false, // Set to true to see SQL queries for debugging ], // Other configuration sections remain the same as in settings.defaults.php ];","title":"Configuration Steps"},{"location":"database/postgresql-configuration/#database-creation","text":"","title":"Database Creation"},{"location":"database/postgresql-configuration/#creating-the-database","text":"CREATE DATABASE powerdns ENCODING 'UTF8'; CREATE USER poweradmin WITH ENCRYPTED PASSWORD 'your_password'; GRANT ALL PRIVILEGES ON DATABASE powerdns TO poweradmin; \\c powerdns GRANT ALL ON SCHEMA public TO poweradmin;","title":"Creating the Database"},{"location":"database/postgresql-configuration/#schema-installation","text":"The SQL schema files are located in the sql/ directory: For a new installation: Use sql/poweradmin-pgsql-db-structure.sql For PowerDNS schema: Check the appropriate version in sql/pdns/[version]/schema.pgsql.sql psql -U poweradmin -d powerdns -f sql/poweradmin-pgsql-db-structure.sql psql -U poweradmin -d powerdns -f sql/pdns/[version]/schema.pgsql.sql","title":"Schema Installation"},{"location":"database/postgresql-configuration/#postgresql-specific-considerations","text":"","title":"PostgreSQL-Specific Considerations"},{"location":"database/postgresql-configuration/#sequences","text":"PostgreSQL uses sequences for auto-incrementing primary keys. If you're migrating from MySQL or experiencing issues with IDs, you may need to reset sequences: SELECT setval('sequence_name', (SELECT MAX(id) FROM table_name));","title":"Sequences"},{"location":"database/postgresql-configuration/#case-sensitivity","text":"PostgreSQL is case-sensitive for identifiers unless quoted. All table and column names in Poweradmin should be accessed in lowercase.","title":"Case Sensitivity"},{"location":"database/postgresql-configuration/#performance-tuning","text":"VACUUM : Schedule regular VACUUM ANALYZE operations to maintain database health Indexing : Consider additional indexes for query patterns specific to your installation Statement Timeout : For web applications, consider setting statement_timeout to prevent long-running queries","title":"Performance Tuning"},{"location":"database/schema/","text":"Database Schema This document describes the database tables used by Poweradmin and their relationships. Poweradmin extends the PowerDNS database schema with additional tables for user management, permissions, logging, and enhanced functionality. Database Requirements Poweradmin requires both PowerDNS and Poweradmin database schemas to be installed: PowerDNS Schema : Core DNS functionality (zones, records, cryptokeys) Poweradmin Schema : User management, permissions, logging, and enhanced features PowerDNS Tables These tables are created by the PowerDNS schema and store the core DNS data: domains Stores DNS zones/domains. Column Type Description id int Primary key name varchar(255) Domain name master varchar(128) Master server for slave zones last_check int Last check timestamp type varchar(6) Zone type (MASTER, SLAVE, NATIVE) notified_serial int Last notified serial account varchar(40) Account identifier options text Zone options catalog varchar(255) Catalog zone records Stores DNS records within zones. Column Type Description id bigint Primary key domain_id int Foreign key to domains.id name varchar(255) Record name type varchar(10) Record type (A, AAAA, CNAME, etc.) content varchar(65000) Record content/value ttl int Time to live prio int Priority (for MX, SRV records) disabled tinyint Record disabled flag ordername varchar(255) DNSSEC ordering auth tinyint Authoritative flag supermasters Stores supermaster configuration for automatic slave zone creation. Column Type Description ip varchar(64) Supermaster IP address nameserver varchar(255) Nameserver hostname account varchar(40) Account identifier comments Stores comments for DNS records. Column Type Description id int Primary key domain_id int Foreign key to domains.id name varchar(255) Record name type varchar(10) Record type modified_at int Modification timestamp account varchar(40) Account identifier comment text Comment text domainmetadata Stores domain metadata (DNSSEC settings, etc.). Column Type Description id int Primary key domain_id int Foreign key to domains.id kind varchar(32) Metadata type content text Metadata content cryptokeys Stores DNSSEC cryptographic keys. Column Type Description id int Primary key domain_id int Foreign key to domains.id flags int Key flags active tinyint Key active status published tinyint Key published status content text Key content tsigkeys Stores TSIG keys for secure zone transfers. Column Type Description id int Primary key name varchar(255) Key name algorithm varchar(50) Algorithm secret varchar(255) Secret key Poweradmin Tables These tables are added by the Poweradmin schema and provide user management, permissions, logging, and enhanced functionality: users Stores user accounts and authentication information. Column Type Description id int Primary key username varchar(16) Username password varchar(255) Encrypted password fullname varchar(255) Full name email varchar(255) Email address description text User description perm_templ tinyint Permission template ID active tinyint Active status use_ldap tinyint Use LDAP authentication perm_items Defines available permissions in the system. Column Type Description id tinyint Primary key name varchar(64) Permission name descr varchar(1024) Permission description perm_templ Defines permission templates (roles). Column Type Description id tinyint Primary key name varchar(128) Template name descr varchar(1024) Template description perm_templ_items Links permission templates to specific permissions. Column Type Description id int Primary key templ_id tinyint Foreign key to perm_templ.id perm_id tinyint Foreign key to perm_items.id zones Links zones to users for permission management. Column Type Description id int Primary key domain_id int Foreign key to domains.id owner int Foreign key to users.id comment text Zone comment zone_templ_id int Zone template ID zone_templ Defines zone templates for bulk zone creation. Column Type Description id int Primary key name varchar(128) Template name descr varchar(1024) Template description owner int Foreign key to users.id zone_templ_records Stores record templates within zone templates. Column Type Description id int Primary key zone_templ_id int Foreign key to zone_templ.id name varchar(255) Record name template type varchar(6) Record type content varchar(255) Record content template ttl int Time to live prio int Priority records_zone_templ Links records to zone templates. Column Type Description domain_id int Foreign key to domains.id record_id int Foreign key to records.id zone_templ_id int Foreign key to zone_templ.id Version 4.0.0 New Tables The following tables were added in Poweradmin v4.0.0: login_attempts Tracks login attempts for security purposes. Column Type Description id int Primary key username varchar(255) Username attempted ip_address varchar(45) IP address attempted_at timestamp Attempt timestamp successful tinyint Success flag migrations Tracks database migrations. Column Type Description version varchar(180) Migration version migration_name varchar(100) Migration name start_time timestamp Start time end_time timestamp End time breakpoint tinyint Breakpoint flag api_keys Stores API keys for authentication. Column Type Description id int Primary key user_id int Foreign key to users.id name varchar(255) Key name key_hash varchar(255) Hashed API key last_used_at timestamp Last usage timestamp expires_at timestamp Expiration timestamp created_at timestamp Creation timestamp updated_at timestamp Update timestamp user_mfa Stores multi-factor authentication settings. Column Type Description id int Primary key user_id int Foreign key to users.id secret varchar(255) MFA secret recovery_codes text Recovery codes enabled tinyint MFA enabled flag created_at timestamp Creation timestamp updated_at timestamp Update timestamp user_preferences Stores user preferences and settings. Column Type Description id int Primary key user_id int Foreign key to users.id preference_key varchar(255) Preference key preference_value text Preference value created_at timestamp Creation timestamp updated_at timestamp Update timestamp zone_template_sync Tracks zone template synchronization. Column Type Description id int Primary key zone_templ_id int Foreign key to zone_templ.id domain_id int Foreign key to domains.id last_sync timestamp Last sync timestamp sync_status varchar(50) Sync status created_at timestamp Creation timestamp updated_at timestamp Update timestamp password_reset_tokens Stores password reset tokens. Column Type Description id int Primary key user_id int Foreign key to users.id token varchar(255) Reset token expires_at timestamp Expiration timestamp used tinyint Token used flag created_at timestamp Creation timestamp user_agreements Tracks user agreement acceptance. Column Type Description id int Primary key user_id int Foreign key to users.id agreement_version varchar(50) Agreement version accepted_at timestamp Acceptance timestamp ip_address varchar(45) IP address Logging Tables log_users Logs user-related activities. Column Type Description id int Primary key timestamp timestamp Activity timestamp user_id int Foreign key to users.id action varchar(255) Action performed data text Action data log_zones Logs zone-related activities. Column Type Description id int Primary key timestamp timestamp Activity timestamp user_id int Foreign key to users.id domain_id int Foreign key to domains.id action varchar(255) Action performed data text Action data Table Relationships Key Relationships Zone Ownership : zones.domain_id \u2192 domains.id , zones.owner \u2192 users.id DNS Records : records.domain_id \u2192 domains.id User Permissions : users.perm_templ \u2192 perm_templ.id Permission Templates : perm_templ_items.templ_id \u2192 perm_templ.id , perm_templ_items.perm_id \u2192 perm_items.id Zone Templates : zone_templ_records.zone_templ_id \u2192 zone_templ.id API Keys : api_keys.user_id \u2192 users.id MFA : user_mfa.user_id \u2192 users.id User Preferences : user_preferences.user_id \u2192 users.id Database Constraints Foreign Key Constraints : Ensure referential integrity between related tables Unique Constraints : Prevent duplicate usernames, domain names, etc. Index Constraints : Optimize query performance on frequently accessed columns Backup Considerations When backing up Poweradmin, ensure you backup: PowerDNS Tables : Contains your DNS data Poweradmin Tables : Contains users, permissions, and configuration Configuration Files : config/settings.php and related files Migration Notes Always backup your database before running migrations Use the provided SQL migration files for version upgrades Test migrations in a staging environment first Verify all tables exist after migration using the verification queries in the upgrade documentation For more information about database setup and migration, see: - Database Configuration - Upgrading to v4.0.0","title":"Database Schema"},{"location":"database/schema/#database-schema","text":"This document describes the database tables used by Poweradmin and their relationships. Poweradmin extends the PowerDNS database schema with additional tables for user management, permissions, logging, and enhanced functionality.","title":"Database Schema"},{"location":"database/schema/#database-requirements","text":"Poweradmin requires both PowerDNS and Poweradmin database schemas to be installed: PowerDNS Schema : Core DNS functionality (zones, records, cryptokeys) Poweradmin Schema : User management, permissions, logging, and enhanced features","title":"Database Requirements"},{"location":"database/schema/#powerdns-tables","text":"These tables are created by the PowerDNS schema and store the core DNS data:","title":"PowerDNS Tables"},{"location":"database/schema/#domains","text":"Stores DNS zones/domains. Column Type Description id int Primary key name varchar(255) Domain name master varchar(128) Master server for slave zones last_check int Last check timestamp type varchar(6) Zone type (MASTER, SLAVE, NATIVE) notified_serial int Last notified serial account varchar(40) Account identifier options text Zone options catalog varchar(255) Catalog zone","title":"domains"},{"location":"database/schema/#records","text":"Stores DNS records within zones. Column Type Description id bigint Primary key domain_id int Foreign key to domains.id name varchar(255) Record name type varchar(10) Record type (A, AAAA, CNAME, etc.) content varchar(65000) Record content/value ttl int Time to live prio int Priority (for MX, SRV records) disabled tinyint Record disabled flag ordername varchar(255) DNSSEC ordering auth tinyint Authoritative flag","title":"records"},{"location":"database/schema/#supermasters","text":"Stores supermaster configuration for automatic slave zone creation. Column Type Description ip varchar(64) Supermaster IP address nameserver varchar(255) Nameserver hostname account varchar(40) Account identifier","title":"supermasters"},{"location":"database/schema/#comments","text":"Stores comments for DNS records. Column Type Description id int Primary key domain_id int Foreign key to domains.id name varchar(255) Record name type varchar(10) Record type modified_at int Modification timestamp account varchar(40) Account identifier comment text Comment text","title":"comments"},{"location":"database/schema/#domainmetadata","text":"Stores domain metadata (DNSSEC settings, etc.). Column Type Description id int Primary key domain_id int Foreign key to domains.id kind varchar(32) Metadata type content text Metadata content","title":"domainmetadata"},{"location":"database/schema/#cryptokeys","text":"Stores DNSSEC cryptographic keys. Column Type Description id int Primary key domain_id int Foreign key to domains.id flags int Key flags active tinyint Key active status published tinyint Key published status content text Key content","title":"cryptokeys"},{"location":"database/schema/#tsigkeys","text":"Stores TSIG keys for secure zone transfers. Column Type Description id int Primary key name varchar(255) Key name algorithm varchar(50) Algorithm secret varchar(255) Secret key","title":"tsigkeys"},{"location":"database/schema/#poweradmin-tables","text":"These tables are added by the Poweradmin schema and provide user management, permissions, logging, and enhanced functionality:","title":"Poweradmin Tables"},{"location":"database/schema/#users","text":"Stores user accounts and authentication information. Column Type Description id int Primary key username varchar(16) Username password varchar(255) Encrypted password fullname varchar(255) Full name email varchar(255) Email address description text User description perm_templ tinyint Permission template ID active tinyint Active status use_ldap tinyint Use LDAP authentication","title":"users"},{"location":"database/schema/#perm_items","text":"Defines available permissions in the system. Column Type Description id tinyint Primary key name varchar(64) Permission name descr varchar(1024) Permission description","title":"perm_items"},{"location":"database/schema/#perm_templ","text":"Defines permission templates (roles). Column Type Description id tinyint Primary key name varchar(128) Template name descr varchar(1024) Template description","title":"perm_templ"},{"location":"database/schema/#perm_templ_items","text":"Links permission templates to specific permissions. Column Type Description id int Primary key templ_id tinyint Foreign key to perm_templ.id perm_id tinyint Foreign key to perm_items.id","title":"perm_templ_items"},{"location":"database/schema/#zones","text":"Links zones to users for permission management. Column Type Description id int Primary key domain_id int Foreign key to domains.id owner int Foreign key to users.id comment text Zone comment zone_templ_id int Zone template ID","title":"zones"},{"location":"database/schema/#zone_templ","text":"Defines zone templates for bulk zone creation. Column Type Description id int Primary key name varchar(128) Template name descr varchar(1024) Template description owner int Foreign key to users.id","title":"zone_templ"},{"location":"database/schema/#zone_templ_records","text":"Stores record templates within zone templates. Column Type Description id int Primary key zone_templ_id int Foreign key to zone_templ.id name varchar(255) Record name template type varchar(6) Record type content varchar(255) Record content template ttl int Time to live prio int Priority","title":"zone_templ_records"},{"location":"database/schema/#records_zone_templ","text":"Links records to zone templates. Column Type Description domain_id int Foreign key to domains.id record_id int Foreign key to records.id zone_templ_id int Foreign key to zone_templ.id","title":"records_zone_templ"},{"location":"database/schema/#version-400-new-tables","text":"The following tables were added in Poweradmin v4.0.0:","title":"Version 4.0.0 New Tables"},{"location":"database/schema/#login_attempts","text":"Tracks login attempts for security purposes. Column Type Description id int Primary key username varchar(255) Username attempted ip_address varchar(45) IP address attempted_at timestamp Attempt timestamp successful tinyint Success flag","title":"login_attempts"},{"location":"database/schema/#migrations","text":"Tracks database migrations. Column Type Description version varchar(180) Migration version migration_name varchar(100) Migration name start_time timestamp Start time end_time timestamp End time breakpoint tinyint Breakpoint flag","title":"migrations"},{"location":"database/schema/#api_keys","text":"Stores API keys for authentication. Column Type Description id int Primary key user_id int Foreign key to users.id name varchar(255) Key name key_hash varchar(255) Hashed API key last_used_at timestamp Last usage timestamp expires_at timestamp Expiration timestamp created_at timestamp Creation timestamp updated_at timestamp Update timestamp","title":"api_keys"},{"location":"database/schema/#user_mfa","text":"Stores multi-factor authentication settings. Column Type Description id int Primary key user_id int Foreign key to users.id secret varchar(255) MFA secret recovery_codes text Recovery codes enabled tinyint MFA enabled flag created_at timestamp Creation timestamp updated_at timestamp Update timestamp","title":"user_mfa"},{"location":"database/schema/#user_preferences","text":"Stores user preferences and settings. Column Type Description id int Primary key user_id int Foreign key to users.id preference_key varchar(255) Preference key preference_value text Preference value created_at timestamp Creation timestamp updated_at timestamp Update timestamp","title":"user_preferences"},{"location":"database/schema/#zone_template_sync","text":"Tracks zone template synchronization. Column Type Description id int Primary key zone_templ_id int Foreign key to zone_templ.id domain_id int Foreign key to domains.id last_sync timestamp Last sync timestamp sync_status varchar(50) Sync status created_at timestamp Creation timestamp updated_at timestamp Update timestamp","title":"zone_template_sync"},{"location":"database/schema/#password_reset_tokens","text":"Stores password reset tokens. Column Type Description id int Primary key user_id int Foreign key to users.id token varchar(255) Reset token expires_at timestamp Expiration timestamp used tinyint Token used flag created_at timestamp Creation timestamp","title":"password_reset_tokens"},{"location":"database/schema/#user_agreements","text":"Tracks user agreement acceptance. Column Type Description id int Primary key user_id int Foreign key to users.id agreement_version varchar(50) Agreement version accepted_at timestamp Acceptance timestamp ip_address varchar(45) IP address","title":"user_agreements"},{"location":"database/schema/#logging-tables","text":"","title":"Logging Tables"},{"location":"database/schema/#log_users","text":"Logs user-related activities. Column Type Description id int Primary key timestamp timestamp Activity timestamp user_id int Foreign key to users.id action varchar(255) Action performed data text Action data","title":"log_users"},{"location":"database/schema/#log_zones","text":"Logs zone-related activities. Column Type Description id int Primary key timestamp timestamp Activity timestamp user_id int Foreign key to users.id domain_id int Foreign key to domains.id action varchar(255) Action performed data text Action data","title":"log_zones"},{"location":"database/schema/#table-relationships","text":"","title":"Table Relationships"},{"location":"database/schema/#key-relationships","text":"Zone Ownership : zones.domain_id \u2192 domains.id , zones.owner \u2192 users.id DNS Records : records.domain_id \u2192 domains.id User Permissions : users.perm_templ \u2192 perm_templ.id Permission Templates : perm_templ_items.templ_id \u2192 perm_templ.id , perm_templ_items.perm_id \u2192 perm_items.id Zone Templates : zone_templ_records.zone_templ_id \u2192 zone_templ.id API Keys : api_keys.user_id \u2192 users.id MFA : user_mfa.user_id \u2192 users.id User Preferences : user_preferences.user_id \u2192 users.id","title":"Key Relationships"},{"location":"database/schema/#database-constraints","text":"Foreign Key Constraints : Ensure referential integrity between related tables Unique Constraints : Prevent duplicate usernames, domain names, etc. Index Constraints : Optimize query performance on frequently accessed columns","title":"Database Constraints"},{"location":"database/schema/#backup-considerations","text":"When backing up Poweradmin, ensure you backup: PowerDNS Tables : Contains your DNS data Poweradmin Tables : Contains users, permissions, and configuration Configuration Files : config/settings.php and related files","title":"Backup Considerations"},{"location":"database/schema/#migration-notes","text":"Always backup your database before running migrations Use the provided SQL migration files for version upgrades Test migrations in a staging environment first Verify all tables exist after migration using the verification queries in the upgrade documentation For more information about database setup and migration, see: - Database Configuration - Upgrading to v4.0.0","title":"Migration Notes"},{"location":"database/sqlite/","text":"SQLite Configuration Guide for Poweradmin Overview This guide explains how to configure Poweradmin to use SQLite as your database backend. Requirements PHP with PDO SQLite extension enabled Write permissions on the directory where the SQLite database will be stored Configuration Steps Create a configuration file at /config/settings.php based on the example below: <?php /** * Poweradmin SQLite Configuration */ return [ /** * Database Settings */ 'database' => [ 'type' => 'sqlite', // Set database type to SQLite 'file' => '/path/to/your/poweradmin.sqlite', // Absolute path to SQLite database file 'host' => '', // Not used for SQLite 'port' => '', // Not used for SQLite 'user' => '', // Not used for SQLite 'password' => '', // Not used for SQLite 'name' => '', // Not used for SQLite 'charset' => 'utf8', // Character set 'debug' => false, // Set to true to debug SQL queries ], // Other configuration sections remain the same as in settings.defaults.php ]; Ensure the directory containing the SQLite database file has appropriate permissions: The web server user (e.g., www-data, apache, nginx) needs read/write access to both the directory and database file Initialize your database structure using the appropriate SQL file: Use sql/poweradmin-sqlite-db-structure.sql for a new installation For upgrades, use the appropriate upgrade script from the sql/ directory Database Initialization You have two options to initialize a new SQLite database: Option 1: Manual Setup # Create the database file touch /path/to/your/poweradmin.sqlite # Set proper permissions chmod 664 /path/to/your/poweradmin.sqlite chown www-data:www-data /path/to/your/poweradmin.sqlite # Replace with your web server user # Import the schema sqlite3 /path/to/your/poweradmin.sqlite < /path/to/poweradmin/sql/poweradmin-sqlite-db-structure.sql Option 2: Using the Automated Script You can use the provided script from the Poweradmin repository: https://github.com/poweradmin/poweradmin-scripts/blob/master/create_sqlite_db.sh Running the Installer After creating your SQLite database, run the Poweradmin installer and select SQLite as the database type, then provide the full path to your database file: When the installation is complete, copy the generated configuration to inc.config.php:","title":"SQLite"},{"location":"database/sqlite/#sqlite-configuration-guide-for-poweradmin","text":"","title":"SQLite Configuration Guide for Poweradmin"},{"location":"database/sqlite/#overview","text":"This guide explains how to configure Poweradmin to use SQLite as your database backend.","title":"Overview"},{"location":"database/sqlite/#requirements","text":"PHP with PDO SQLite extension enabled Write permissions on the directory where the SQLite database will be stored","title":"Requirements"},{"location":"database/sqlite/#configuration-steps","text":"Create a configuration file at /config/settings.php based on the example below: <?php /** * Poweradmin SQLite Configuration */ return [ /** * Database Settings */ 'database' => [ 'type' => 'sqlite', // Set database type to SQLite 'file' => '/path/to/your/poweradmin.sqlite', // Absolute path to SQLite database file 'host' => '', // Not used for SQLite 'port' => '', // Not used for SQLite 'user' => '', // Not used for SQLite 'password' => '', // Not used for SQLite 'name' => '', // Not used for SQLite 'charset' => 'utf8', // Character set 'debug' => false, // Set to true to debug SQL queries ], // Other configuration sections remain the same as in settings.defaults.php ]; Ensure the directory containing the SQLite database file has appropriate permissions: The web server user (e.g., www-data, apache, nginx) needs read/write access to both the directory and database file Initialize your database structure using the appropriate SQL file: Use sql/poweradmin-sqlite-db-structure.sql for a new installation For upgrades, use the appropriate upgrade script from the sql/ directory","title":"Configuration Steps"},{"location":"database/sqlite/#database-initialization","text":"You have two options to initialize a new SQLite database:","title":"Database Initialization"},{"location":"database/sqlite/#option-1-manual-setup","text":"# Create the database file touch /path/to/your/poweradmin.sqlite # Set proper permissions chmod 664 /path/to/your/poweradmin.sqlite chown www-data:www-data /path/to/your/poweradmin.sqlite # Replace with your web server user # Import the schema sqlite3 /path/to/your/poweradmin.sqlite < /path/to/poweradmin/sql/poweradmin-sqlite-db-structure.sql","title":"Option 1: Manual Setup"},{"location":"database/sqlite/#option-2-using-the-automated-script","text":"You can use the provided script from the Poweradmin repository: https://github.com/poweradmin/poweradmin-scripts/blob/master/create_sqlite_db.sh","title":"Option 2: Using the Automated Script"},{"location":"database/sqlite/#running-the-installer","text":"After creating your SQLite database, run the Poweradmin installer and select SQLite as the database type, then provide the full path to your database file: When the installation is complete, copy the generated configuration to inc.config.php:","title":"Running the Installer"},{"location":"getting-started/docker-demo/","text":"Docker Demo The easiest way to evaluate Poweradmin is to use the Docker image, which provides a complete environment with FrankenPHP and SQLite database. Quick Demo 1. Get the Docker Image docker pull poweradmin/poweradmin:latest 2. Run the Container docker run -d --name poweradmin -p 80:80 poweradmin/poweradmin:latest 3. Access Poweradmin Open your browser and go to http://localhost Username: admin Password: testadmin Note : This demo uses SQLite with pre-configured test data. Architecture The Docker image is based on FrankenPHP , providing: High Performance : Persistent worker mode for better performance Modern HTTP : Native HTTP/2 and HTTP/3 support Built-in Features : Automatic HTTPS, real-time capabilities Caddy Integration : Built on Caddy web server Demo with External Database MySQL Demo docker run -d --name poweradmin -p 80:80 \\ -e DB_TYPE=mysql \\ -e DB_HOST=your-mysql-host \\ -e DB_USER=poweradmin \\ -e DB_PASS=password \\ -e DB_NAME=poweradmin \\ -e DNS_NS1=ns1.yourdomain.com \\ -e DNS_NS2=ns2.yourdomain.com \\ -e DNS_HOSTMASTER=hostmaster.yourdomain.com \\ poweradmin/poweradmin:latest PostgreSQL Demo docker run -d --name poweradmin -p 80:80 \\ -e DB_TYPE=pgsql \\ -e DB_HOST=your-postgres-host \\ -e DB_USER=poweradmin \\ -e DB_PASS=password \\ -e DB_NAME=poweradmin \\ -e DNS_NS1=ns1.yourdomain.com \\ -e DNS_NS2=ns2.yourdomain.com \\ -e DNS_HOSTMASTER=hostmaster.yourdomain.com \\ poweradmin/poweradmin:latest Demo with Docker Compose Basic Demo version: '3.8' services: poweradmin: image: poweradmin/poweradmin:latest ports: - \"80:80\" Complete Demo with MySQL version: '3.8' services: poweradmin: image: poweradmin/poweradmin:latest ports: - \"80:80\" environment: - DB_TYPE=mysql - DB_HOST=mysql - DB_USER=poweradmin - DB_PASS=password - DB_NAME=poweradmin - DNS_NS1=ns1.yourdomain.com - DNS_NS2=ns2.yourdomain.com - DNS_HOSTMASTER=hostmaster.yourdomain.com - PA_API_ENABLED=true - PA_API_DOCS_ENABLED=true depends_on: - mysql mysql: image: mysql:8.0 environment: - MYSQL_ROOT_PASSWORD=rootpassword - MYSQL_DATABASE=poweradmin - MYSQL_USER=poweradmin - MYSQL_PASSWORD=password volumes: - mysql_data:/var/lib/mysql volumes: mysql_data: Building from Source If you want to build the Docker image from source: # Clone the repository git clone https://github.com/poweradmin/poweradmin.git cd poweradmin # Build the image docker build --no-cache -t poweradmin . # Run the container docker run -d --name poweradmin -p 80:80 poweradmin Environment Variables (Demo Examples) Variable Description Example DB_TYPE Database type sqlite , mysql , pgsql PA_API_ENABLED Enable API true PA_API_DOCS_ENABLED Enable API docs true PA_APP_TITLE Application title My DNS Demo PA_MAIL_ENABLED Enable email false API Demo Enable the API to test RESTful endpoints: docker run -d --name poweradmin -p 80:80 \\ -e PA_API_ENABLED=true \\ -e PA_API_DOCS_ENABLED=true \\ poweradmin/poweradmin:latest Visit http://localhost/api/docs to explore the API documentation. Next Steps After evaluating the demo: Production Deployment : See Docker Deployment Guide for production configurations Manual Installation : Follow Manual Installation for traditional setups Configuration : Learn about Configuration Options Troubleshooting Port conflicts : Use -p 8080:80 if port 80 is in use View logs : docker logs poweradmin Container access : docker exec -it poweradmin /bin/sh","title":"Docker Demo"},{"location":"getting-started/docker-demo/#docker-demo","text":"The easiest way to evaluate Poweradmin is to use the Docker image, which provides a complete environment with FrankenPHP and SQLite database.","title":"Docker Demo"},{"location":"getting-started/docker-demo/#quick-demo","text":"","title":"Quick Demo"},{"location":"getting-started/docker-demo/#1-get-the-docker-image","text":"docker pull poweradmin/poweradmin:latest","title":"1. Get the Docker Image"},{"location":"getting-started/docker-demo/#2-run-the-container","text":"docker run -d --name poweradmin -p 80:80 poweradmin/poweradmin:latest","title":"2. Run the Container"},{"location":"getting-started/docker-demo/#3-access-poweradmin","text":"Open your browser and go to http://localhost Username: admin Password: testadmin Note : This demo uses SQLite with pre-configured test data.","title":"3. Access Poweradmin"},{"location":"getting-started/docker-demo/#architecture","text":"The Docker image is based on FrankenPHP , providing: High Performance : Persistent worker mode for better performance Modern HTTP : Native HTTP/2 and HTTP/3 support Built-in Features : Automatic HTTPS, real-time capabilities Caddy Integration : Built on Caddy web server","title":"Architecture"},{"location":"getting-started/docker-demo/#demo-with-external-database","text":"","title":"Demo with External Database"},{"location":"getting-started/docker-demo/#mysql-demo","text":"docker run -d --name poweradmin -p 80:80 \\ -e DB_TYPE=mysql \\ -e DB_HOST=your-mysql-host \\ -e DB_USER=poweradmin \\ -e DB_PASS=password \\ -e DB_NAME=poweradmin \\ -e DNS_NS1=ns1.yourdomain.com \\ -e DNS_NS2=ns2.yourdomain.com \\ -e DNS_HOSTMASTER=hostmaster.yourdomain.com \\ poweradmin/poweradmin:latest","title":"MySQL Demo"},{"location":"getting-started/docker-demo/#postgresql-demo","text":"docker run -d --name poweradmin -p 80:80 \\ -e DB_TYPE=pgsql \\ -e DB_HOST=your-postgres-host \\ -e DB_USER=poweradmin \\ -e DB_PASS=password \\ -e DB_NAME=poweradmin \\ -e DNS_NS1=ns1.yourdomain.com \\ -e DNS_NS2=ns2.yourdomain.com \\ -e DNS_HOSTMASTER=hostmaster.yourdomain.com \\ poweradmin/poweradmin:latest","title":"PostgreSQL Demo"},{"location":"getting-started/docker-demo/#demo-with-docker-compose","text":"","title":"Demo with Docker Compose"},{"location":"getting-started/docker-demo/#basic-demo","text":"version: '3.8' services: poweradmin: image: poweradmin/poweradmin:latest ports: - \"80:80\"","title":"Basic Demo"},{"location":"getting-started/docker-demo/#complete-demo-with-mysql","text":"version: '3.8' services: poweradmin: image: poweradmin/poweradmin:latest ports: - \"80:80\" environment: - DB_TYPE=mysql - DB_HOST=mysql - DB_USER=poweradmin - DB_PASS=password - DB_NAME=poweradmin - DNS_NS1=ns1.yourdomain.com - DNS_NS2=ns2.yourdomain.com - DNS_HOSTMASTER=hostmaster.yourdomain.com - PA_API_ENABLED=true - PA_API_DOCS_ENABLED=true depends_on: - mysql mysql: image: mysql:8.0 environment: - MYSQL_ROOT_PASSWORD=rootpassword - MYSQL_DATABASE=poweradmin - MYSQL_USER=poweradmin - MYSQL_PASSWORD=password volumes: - mysql_data:/var/lib/mysql volumes: mysql_data:","title":"Complete Demo with MySQL"},{"location":"getting-started/docker-demo/#building-from-source","text":"If you want to build the Docker image from source: # Clone the repository git clone https://github.com/poweradmin/poweradmin.git cd poweradmin # Build the image docker build --no-cache -t poweradmin . # Run the container docker run -d --name poweradmin -p 80:80 poweradmin","title":"Building from Source"},{"location":"getting-started/docker-demo/#environment-variables-demo-examples","text":"Variable Description Example DB_TYPE Database type sqlite , mysql , pgsql PA_API_ENABLED Enable API true PA_API_DOCS_ENABLED Enable API docs true PA_APP_TITLE Application title My DNS Demo PA_MAIL_ENABLED Enable email false","title":"Environment Variables (Demo Examples)"},{"location":"getting-started/docker-demo/#api-demo","text":"Enable the API to test RESTful endpoints: docker run -d --name poweradmin -p 80:80 \\ -e PA_API_ENABLED=true \\ -e PA_API_DOCS_ENABLED=true \\ poweradmin/poweradmin:latest Visit http://localhost/api/docs to explore the API documentation.","title":"API Demo"},{"location":"getting-started/docker-demo/#next-steps","text":"After evaluating the demo: Production Deployment : See Docker Deployment Guide for production configurations Manual Installation : Follow Manual Installation for traditional setups Configuration : Learn about Configuration Options","title":"Next Steps"},{"location":"getting-started/docker-demo/#troubleshooting","text":"Port conflicts : Use -p 8080:80 if port 80 is in use View logs : docker logs poweradmin Container access : docker exec -it poweradmin /bin/sh","title":"Troubleshooting"},{"location":"getting-started/features/","text":"Poweradmin Features Poweradmin provides comprehensive DNS management and administration capabilities. Here's an overview of the key features: Zone & Record Management Create and manage DNS zones (Master, Native, and Slave types) Support for supermasters for automatic provisioning of slave zones Full DNS record support: A and AAAA records CNAME records HINFO records MX records NS records PTR records (Reverse DNS) SOA records SRV records TXT records Other record types (supported but not validated) DNSSEC configuration and management IPv6 support Bulk Operations & Templates DNS record templates Default nameserver configuration Batch record creation PowerDNS API integration Security Features Multi-Factor Authentication (MFA) : Support for authenticator apps (TOTP) Email-based verification Recovery codes for account recovery Configurable recovery code generation Advanced Account Lockout : Login attempt tracking with database support Configurable lockout attempts and duration IP address-based tracking and lockouts Whitelist and blacklist support (supports IPs, CIDRs, wildcards) Password Reset System : Secure password reset via email Configurable token lifetime and rate limiting Protection against brute force attacks Google reCAPTCHA Integration : Support for reCAPTCHA v2 and v3 Configurable score thresholds for v3 Login form protection Enhanced Password Policies : Configurable minimum length requirements Character type requirements (uppercase, lowercase, numbers, special) Custom special character sets Traditional Security Features : LDAP/Active Directory integration with custom filter CSRF prevention Session security SSL/TLS support System Integration Database support: MySQL/MariaDB integration PostgreSQL support SQLite support Optimized for large databases (tested with 15,000+ zones and 150,000+ records) Configurable connections Email notifications: Multiple transport methods Template customization Configuration: Default settings Environment-specific overrides User Interface Modern Responsive Design : Bootstrap-based responsive interface Mobile-friendly design Customizable elements Theming System : Light and dark mode support Customizable theme base paths Theme selection per user preference Multi-language Support : 15 supported languages Gettext-based translations Right-to-left language support User Preferences : Personalized user settings storage Individual user customization options Per-user theme preferences Enhanced Interface Options : Display full names instead of usernames in zone lists Improved reverse zone sorting (natural or hierarchical) PowerDNS server status integration Database consistency checks page Email template previews Error Management : Development mode Production mode Logging & Monitoring Logging features: Native system logging Syslog integration Change tracking Configurable levels Monitoring: System statistics Conflict detection API Management (v4.0.0+) API Key System : Generate and manage API keys for external integrations Key-based authentication for API endpoints Request logging and monitoring API documentation endpoints RESTful API Endpoints : Zone management (create, read, update, delete) DNS record management User management Permission template management Internal API for UI components Lookup and Integration Features (v4.0.0+) WHOIS Lookup : Built-in WHOIS query functionality Configurable WHOIS servers Socket timeout controls Admin-only access controls RDAP Lookup : Registration Data Access Protocol support HTTP-based domain information queries Configurable RDAP servers Request timeout controls Zone Management Enhancements (v4.0.0+) Zone Template Synchronization : Automatic synchronization of zone templates Template change tracking Batch operations support User Agreements System : Version-controlled user agreements Automatic re-acceptance on version changes Compliance tracking DNS Record Type Customization : Customize which record types are available Separate configuration for forward and reverse zones Simplified interface for specific DNS needs Additional Documentation Security Configuration Database Setup DNS Configuration Logging Options API Configuration Multi-Factor Authentication WHOIS Configuration RDAP Configuration","title":"Features"},{"location":"getting-started/features/#poweradmin-features","text":"Poweradmin provides comprehensive DNS management and administration capabilities. Here's an overview of the key features:","title":"Poweradmin Features"},{"location":"getting-started/features/#zone-record-management","text":"Create and manage DNS zones (Master, Native, and Slave types) Support for supermasters for automatic provisioning of slave zones Full DNS record support: A and AAAA records CNAME records HINFO records MX records NS records PTR records (Reverse DNS) SOA records SRV records TXT records Other record types (supported but not validated) DNSSEC configuration and management IPv6 support","title":"Zone &amp; Record Management"},{"location":"getting-started/features/#bulk-operations-templates","text":"DNS record templates Default nameserver configuration Batch record creation PowerDNS API integration","title":"Bulk Operations &amp; Templates"},{"location":"getting-started/features/#security-features","text":"Multi-Factor Authentication (MFA) : Support for authenticator apps (TOTP) Email-based verification Recovery codes for account recovery Configurable recovery code generation Advanced Account Lockout : Login attempt tracking with database support Configurable lockout attempts and duration IP address-based tracking and lockouts Whitelist and blacklist support (supports IPs, CIDRs, wildcards) Password Reset System : Secure password reset via email Configurable token lifetime and rate limiting Protection against brute force attacks Google reCAPTCHA Integration : Support for reCAPTCHA v2 and v3 Configurable score thresholds for v3 Login form protection Enhanced Password Policies : Configurable minimum length requirements Character type requirements (uppercase, lowercase, numbers, special) Custom special character sets Traditional Security Features : LDAP/Active Directory integration with custom filter CSRF prevention Session security SSL/TLS support","title":"Security Features"},{"location":"getting-started/features/#system-integration","text":"Database support: MySQL/MariaDB integration PostgreSQL support SQLite support Optimized for large databases (tested with 15,000+ zones and 150,000+ records) Configurable connections Email notifications: Multiple transport methods Template customization Configuration: Default settings Environment-specific overrides","title":"System Integration"},{"location":"getting-started/features/#user-interface","text":"Modern Responsive Design : Bootstrap-based responsive interface Mobile-friendly design Customizable elements Theming System : Light and dark mode support Customizable theme base paths Theme selection per user preference Multi-language Support : 15 supported languages Gettext-based translations Right-to-left language support User Preferences : Personalized user settings storage Individual user customization options Per-user theme preferences Enhanced Interface Options : Display full names instead of usernames in zone lists Improved reverse zone sorting (natural or hierarchical) PowerDNS server status integration Database consistency checks page Email template previews Error Management : Development mode Production mode","title":"User Interface"},{"location":"getting-started/features/#logging-monitoring","text":"Logging features: Native system logging Syslog integration Change tracking Configurable levels Monitoring: System statistics Conflict detection","title":"Logging &amp; Monitoring"},{"location":"getting-started/features/#api-management-v400","text":"API Key System : Generate and manage API keys for external integrations Key-based authentication for API endpoints Request logging and monitoring API documentation endpoints RESTful API Endpoints : Zone management (create, read, update, delete) DNS record management User management Permission template management Internal API for UI components","title":"API Management (v4.0.0+)"},{"location":"getting-started/features/#lookup-and-integration-features-v400","text":"WHOIS Lookup : Built-in WHOIS query functionality Configurable WHOIS servers Socket timeout controls Admin-only access controls RDAP Lookup : Registration Data Access Protocol support HTTP-based domain information queries Configurable RDAP servers Request timeout controls","title":"Lookup and Integration Features (v4.0.0+)"},{"location":"getting-started/features/#zone-management-enhancements-v400","text":"Zone Template Synchronization : Automatic synchronization of zone templates Template change tracking Batch operations support User Agreements System : Version-controlled user agreements Automatic re-acceptance on version changes Compliance tracking DNS Record Type Customization : Customize which record types are available Separate configuration for forward and reverse zones Simplified interface for specific DNS needs","title":"Zone Management Enhancements (v4.0.0+)"},{"location":"getting-started/features/#additional-documentation","text":"Security Configuration Database Setup DNS Configuration Logging Options API Configuration Multi-Factor Authentication WHOIS Configuration RDAP Configuration","title":"Additional Documentation"},{"location":"getting-started/overview/","text":"Overview Welcome to the Poweradmin documentation! This section will help you get started with Poweradmin, a web-based administration tool for PowerDNS. Here, you will find an introduction to the tool, its features, and how to navigate through the documentation. Quick Evaluation If you want to quickly evaluate Poweradmin, follow these guides: Docker Demo : Learn how to set up a demo environment using Docker. First Steps : Get started with the basic setup and configuration. Example Configurations : Explore example configurations to understand different use cases. System Requirements Before installing Poweradmin, ensure your system meets the necessary requirements. This section covers the hardware and software prerequisites for running Poweradmin efficiently.","title":"Overview"},{"location":"getting-started/overview/#overview","text":"Welcome to the Poweradmin documentation! This section will help you get started with Poweradmin, a web-based administration tool for PowerDNS. Here, you will find an introduction to the tool, its features, and how to navigate through the documentation.","title":"Overview"},{"location":"getting-started/overview/#quick-evaluation","text":"If you want to quickly evaluate Poweradmin, follow these guides: Docker Demo : Learn how to set up a demo environment using Docker. First Steps : Get started with the basic setup and configuration. Example Configurations : Explore example configurations to understand different use cases.","title":"Quick Evaluation"},{"location":"getting-started/overview/#system-requirements","text":"Before installing Poweradmin, ensure your system meets the necessary requirements. This section covers the hardware and software prerequisites for running Poweradmin efficiently.","title":"System Requirements"},{"location":"getting-started/requirements/","text":"Poweradmin System Requirements Overview Poweradmin requires PHP 8.1 or higher to run. This document outlines the supported Linux and BSD distributions as well as those that are not supported due to PHP version constraints. For the best experience, ensure your system meets or exceeds the recommended requirements. Minimum Requirements PHP : 8.1 or higher (including 8.2, 8.3, 8.4, etc.) PHP Extensions : intl gettext openssl filter tokenizer pdo One of: pdo-mysql pdo-pgsql pdo-sqlite ldap (optional) Database : MySQL 5.7.x/8.x, MariaDB, PostgreSQL, or SQLite PowerDNS : PowerDNS authoritative server 4.0.0+ Web Server : Apache or NGINX Operating System : Linux or BSD Note : Other web server software, such as Caddy, might also be supported. However, these are usually not tested by the maintainer and may only work with help from the community. Supported Distributions Distribution PHP Version Notes Debian 12.7 8.2 Ubuntu 22.04 8.1 Ubuntu 24.04 8.3 Fedora 40 8.3 Apache included by default Fedora 41 8.3 Apache included by default OpenSuse 15.6 8.2 BSD Operating Systems Poweradmin is compatible with BSD operating systems that meet the PHP 8.1+ requirement. While not extensively tested, it should work as long as the environment is properly configured. Unsupported Distributions Distribution PHP Version Reason for Lack of Support Debian 11 7.4 PHP below minimum version Ubuntu 20.04 7.4 PHP below minimum version CentOS Stream release 9 8.0 PHP below minimum version Rocky 8.10 7.2 PHP below minimum version Rocky 9.4 8.0 PHP below minimum version Alma 8.10 7.2 PHP below minimum version Alma 9.4 8.0 PHP below minimum version Notes Distributions listed as unsupported can potentially be configured manually with a custom PHP build, but this is not officially supported. Upgrade paths are recommended for unsupported distributions to maintain security and compatibility. Tested Environments Poweradmin has been tested with the following software combinations: Poweradmin PHP PowerDNS MariaDB MySQL PostgreSQL SQLite 4.0.x 8.1.31 4.7.4 10.11.10 9.1.0 16.3 3.45.3 3.9.x 8.1.31 4.7.4 10.11.10 9.1.0 16.3 3.45.3 3.8.x 8.1.28 4.5.5 10.11.8 - 16.3 3.45.3 3.7.x 8.1.2 4.5.3 11.1.2 8.2.0 16.0 3.40.1 3.6.x 8.1.2 4.5.3 11.1.2 8.1.0 16.0 3.40.1 3.5.x 8.1.17 4.5.3 10.11.2 8.0.32 15.2 3.34.1 3.4.x 7.4.3 / 8.1.12 4.2.1 10.10.2 8.0.31 15.1 3.34.1","title":"System Requirements"},{"location":"getting-started/requirements/#poweradmin-system-requirements","text":"","title":"Poweradmin System Requirements"},{"location":"getting-started/requirements/#overview","text":"Poweradmin requires PHP 8.1 or higher to run. This document outlines the supported Linux and BSD distributions as well as those that are not supported due to PHP version constraints. For the best experience, ensure your system meets or exceeds the recommended requirements.","title":"Overview"},{"location":"getting-started/requirements/#minimum-requirements","text":"PHP : 8.1 or higher (including 8.2, 8.3, 8.4, etc.) PHP Extensions : intl gettext openssl filter tokenizer pdo One of: pdo-mysql pdo-pgsql pdo-sqlite ldap (optional) Database : MySQL 5.7.x/8.x, MariaDB, PostgreSQL, or SQLite PowerDNS : PowerDNS authoritative server 4.0.0+ Web Server : Apache or NGINX Operating System : Linux or BSD Note : Other web server software, such as Caddy, might also be supported. However, these are usually not tested by the maintainer and may only work with help from the community.","title":"Minimum Requirements"},{"location":"getting-started/requirements/#supported-distributions","text":"Distribution PHP Version Notes Debian 12.7 8.2 Ubuntu 22.04 8.1 Ubuntu 24.04 8.3 Fedora 40 8.3 Apache included by default Fedora 41 8.3 Apache included by default OpenSuse 15.6 8.2","title":"Supported Distributions"},{"location":"getting-started/requirements/#bsd-operating-systems","text":"Poweradmin is compatible with BSD operating systems that meet the PHP 8.1+ requirement. While not extensively tested, it should work as long as the environment is properly configured.","title":"BSD Operating Systems"},{"location":"getting-started/requirements/#unsupported-distributions","text":"Distribution PHP Version Reason for Lack of Support Debian 11 7.4 PHP below minimum version Ubuntu 20.04 7.4 PHP below minimum version CentOS Stream release 9 8.0 PHP below minimum version Rocky 8.10 7.2 PHP below minimum version Rocky 9.4 8.0 PHP below minimum version Alma 8.10 7.2 PHP below minimum version Alma 9.4 8.0 PHP below minimum version","title":"Unsupported Distributions"},{"location":"getting-started/requirements/#notes","text":"Distributions listed as unsupported can potentially be configured manually with a custom PHP build, but this is not officially supported. Upgrade paths are recommended for unsupported distributions to maintain security and compatibility.","title":"Notes"},{"location":"getting-started/requirements/#tested-environments","text":"Poweradmin has been tested with the following software combinations: Poweradmin PHP PowerDNS MariaDB MySQL PostgreSQL SQLite 4.0.x 8.1.31 4.7.4 10.11.10 9.1.0 16.3 3.45.3 3.9.x 8.1.31 4.7.4 10.11.10 9.1.0 16.3 3.45.3 3.8.x 8.1.28 4.5.5 10.11.8 - 16.3 3.45.3 3.7.x 8.1.2 4.5.3 11.1.2 8.2.0 16.0 3.40.1 3.6.x 8.1.2 4.5.3 11.1.2 8.1.0 16.0 3.40.1 3.5.x 8.1.17 4.5.3 10.11.2 8.0.32 15.2 3.34.1 3.4.x 7.4.3 / 8.1.12 4.2.1 10.10.2 8.0.31 15.1 3.34.1","title":"Tested Environments"},{"location":"installation/","text":"Installation Overview Poweradmin can be installed on various operating systems and with different database backends. This section provides installation guides for different environments. Operating Systems Debian - Installation guide for Debian Ubuntu - Installation guide for Ubuntu CentOS/RHEL - Installation guide for CentOS and Red Hat Enterprise Linux Installation Methods Manual Installation - Step-by-step guide for manual installation Composer Installation - Installing Poweradmin using Composer Database Setup MySQL/MariaDB - Setting up with MySQL or MariaDB PostgreSQL - Setting up with PostgreSQL SQLite - Setting up with SQLite Choose the installation method that best fits your environment and requirements.","title":"Overview"},{"location":"installation/#installation-overview","text":"Poweradmin can be installed on various operating systems and with different database backends. This section provides installation guides for different environments.","title":"Installation Overview"},{"location":"installation/#operating-systems","text":"Debian - Installation guide for Debian Ubuntu - Installation guide for Ubuntu CentOS/RHEL - Installation guide for CentOS and Red Hat Enterprise Linux","title":"Operating Systems"},{"location":"installation/#installation-methods","text":"Manual Installation - Step-by-step guide for manual installation Composer Installation - Installing Poweradmin using Composer","title":"Installation Methods"},{"location":"installation/#database-setup","text":"MySQL/MariaDB - Setting up with MySQL or MariaDB PostgreSQL - Setting up with PostgreSQL SQLite - Setting up with SQLite Choose the installation method that best fits your environment and requirements.","title":"Database Setup"},{"location":"installation/centos/","text":"CentOS/RHEL Installation This guide will help you install Poweradmin on CentOS, RHEL, and other RHEL-based distributions like Rocky Linux or AlmaLinux. Prerequisites Ensure you have the following PHP extensions installed: dnf install -y php php-intl php-gettext php-pdo php-fpm Database Support Install the appropriate PHP database driver based on your preferred database: # For MySQL/MariaDB dnf install -y php-mysqlnd # For PostgreSQL dnf install -y php-pgsql # For SQLite (if available in your repositories) dnf install -y php-sqlite3 Web Server Configuration Apache Install Apache if not already installed: dnf install -y httpd Enable and start the Apache service: systemctl enable httpd systemctl start httpd Configure SELinux if it's enabled: # Allow Apache to connect to the database setsebool -P httpd_can_network_connect_db 1 # If using a non-standard directory, set the correct context semanage fcontext -a -t httpd_sys_content_t \"/path/to/poweradmin(/.*)?\" restorecon -Rv /path/to/poweradmin Configure your firewall: firewall-cmd --permanent --add-service=http firewall-cmd --permanent --add-service=https # If using HTTPS firewall-cmd --reload Nginx Configuration If you prefer Nginx: Install Nginx: dnf install -y nginx Create a configuration file for Poweradmin: server { listen 80; server_name localhost; # Replace with your domain root /var/www/html; # Path to Poweradmin files index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { fastcgi_pass unix:/var/run/php-fpm/www.sock; # RHEL/CentOS path fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; fastcgi_index index.php; } # Deny access to .htaccess and .htpasswd files for security reasons location ~ /\\.ht { deny all; } } Save this file to /etc/nginx/conf.d/poweradmin.conf Enable and start Nginx and PHP-FPM: systemctl enable nginx php-fpm systemctl start nginx php-fpm Configure SELinux and firewall as with Apache. Installing Poweradmin Obtain Poweradmin Source Code Download the latest release (v3.9.3) from GitHub Releases : curl -Lo v3.9.3.zip https://github.com/poweradmin/poweradmin/archive/refs/tags/v3.9.3.zip unzip v3.9.3.zip If you don't have curl or unzip installed: dnf install -y curl unzip Deploy to Web Server Move the Poweradmin files to your web server's document root: # For Apache (default directory) cp -r poweradmin-3.9.3/* /var/www/html/ chown -R apache:apache /var/www/html/ # For Nginx (if using a different directory) cp -r poweradmin-3.9.3/* /usr/share/nginx/html/ chown -R nginx:nginx /usr/share/nginx/html/ Complete the Installation Visit http://your-server/install/ in your browser Follow the installation steps Once installation is complete, remove the install directory for security Log in with the admin username and password created during installation Troubleshooting If you encounter issues: Check PHP error logs: /var/log/php-fpm/www-error.log Check web server logs: /var/log/httpd/error_log or /var/log/nginx/error.log Ensure SELinux permissions are properly set if SELinux is enabled Verify all required PHP extensions are installed and enabled Check that file permissions are correct for your web server user","title":"CentOS/RHEL"},{"location":"installation/centos/#centosrhel-installation","text":"This guide will help you install Poweradmin on CentOS, RHEL, and other RHEL-based distributions like Rocky Linux or AlmaLinux.","title":"CentOS/RHEL Installation"},{"location":"installation/centos/#prerequisites","text":"Ensure you have the following PHP extensions installed: dnf install -y php php-intl php-gettext php-pdo php-fpm","title":"Prerequisites"},{"location":"installation/centos/#database-support","text":"Install the appropriate PHP database driver based on your preferred database: # For MySQL/MariaDB dnf install -y php-mysqlnd # For PostgreSQL dnf install -y php-pgsql # For SQLite (if available in your repositories) dnf install -y php-sqlite3","title":"Database Support"},{"location":"installation/centos/#web-server-configuration","text":"","title":"Web Server Configuration"},{"location":"installation/centos/#apache","text":"Install Apache if not already installed: dnf install -y httpd Enable and start the Apache service: systemctl enable httpd systemctl start httpd Configure SELinux if it's enabled: # Allow Apache to connect to the database setsebool -P httpd_can_network_connect_db 1 # If using a non-standard directory, set the correct context semanage fcontext -a -t httpd_sys_content_t \"/path/to/poweradmin(/.*)?\" restorecon -Rv /path/to/poweradmin Configure your firewall: firewall-cmd --permanent --add-service=http firewall-cmd --permanent --add-service=https # If using HTTPS firewall-cmd --reload","title":"Apache"},{"location":"installation/centos/#nginx-configuration","text":"If you prefer Nginx: Install Nginx: dnf install -y nginx Create a configuration file for Poweradmin: server { listen 80; server_name localhost; # Replace with your domain root /var/www/html; # Path to Poweradmin files index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { fastcgi_pass unix:/var/run/php-fpm/www.sock; # RHEL/CentOS path fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; fastcgi_index index.php; } # Deny access to .htaccess and .htpasswd files for security reasons location ~ /\\.ht { deny all; } } Save this file to /etc/nginx/conf.d/poweradmin.conf Enable and start Nginx and PHP-FPM: systemctl enable nginx php-fpm systemctl start nginx php-fpm Configure SELinux and firewall as with Apache.","title":"Nginx Configuration"},{"location":"installation/centos/#installing-poweradmin","text":"","title":"Installing Poweradmin"},{"location":"installation/centos/#obtain-poweradmin-source-code","text":"Download the latest release (v3.9.3) from GitHub Releases : curl -Lo v3.9.3.zip https://github.com/poweradmin/poweradmin/archive/refs/tags/v3.9.3.zip unzip v3.9.3.zip If you don't have curl or unzip installed: dnf install -y curl unzip","title":"Obtain Poweradmin Source Code"},{"location":"installation/centos/#deploy-to-web-server","text":"Move the Poweradmin files to your web server's document root: # For Apache (default directory) cp -r poweradmin-3.9.3/* /var/www/html/ chown -R apache:apache /var/www/html/ # For Nginx (if using a different directory) cp -r poweradmin-3.9.3/* /usr/share/nginx/html/ chown -R nginx:nginx /usr/share/nginx/html/","title":"Deploy to Web Server"},{"location":"installation/centos/#complete-the-installation","text":"Visit http://your-server/install/ in your browser Follow the installation steps Once installation is complete, remove the install directory for security Log in with the admin username and password created during installation","title":"Complete the Installation"},{"location":"installation/centos/#troubleshooting","text":"If you encounter issues: Check PHP error logs: /var/log/php-fpm/www-error.log Check web server logs: /var/log/httpd/error_log or /var/log/nginx/error.log Ensure SELinux permissions are properly set if SELinux is enabled Verify all required PHP extensions are installed and enabled Check that file permissions are correct for your web server user","title":"Troubleshooting"},{"location":"installation/composer/","text":"Installation (Composer) Note: This is an alternative way to install and update Poweradmin using Composer. Prerequisites PHP 8.1 or higher Composer installed on your system Required PHP extensions: pdo, pdo_mysql/pdo_pgsql/pdo_sqlite See System Requirements for detailed requirements. Installing Poweradmin To install the latest stable version of Poweradmin, you can use the following Composer command: composer create-project --no-dev poweradmin/poweradmin This command will create a poweradmin folder in the current directory, download, and set up Poweradmin without development dependencies. After running the Composer command, you need to create or modify the configuration file at config/settings.php with your database and application settings. Directory Structure After installation, you should have the following structure: poweradmin/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 config/ \u2502 \u251c\u2500\u2500 settings.defaults.php \u2502 \u2514\u2500\u2500 settings.php \u251c\u2500\u2500 lib/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 vendor/ \u251c\u2500\u2500 composer.json \u2514\u2500\u2500 composer.lock Basic Configuration Here is an example of what the config/settings.php file should look like: <?php return [ /** * Database Settings */ 'database' => [ 'host' => 'localhost', 'name' => 'your_db_name', 'user' => 'your_db_user', 'password' => 'your_db_password', 'type' => 'mysql', // or 'pgsql', 'sqlite' ], /** * Security Settings */ 'security' => [ 'session_key' => 'generate_a_strong_random_key_here', ], /** * DNS Settings */ 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', ], ]; See Basic Configuration for all available options. SQLite Database Settings If you are using SQLite, modify the database section in the config/settings.php file: 'database' => [ 'type' => 'sqlite', 'file' => '/path/to/your/sqlite.db', ], Important: Ensure proper file permissions and directory location for the SQLite database file. Updating Poweradmin If you installed Poweradmin using composer create-project --no-dev poweradmin/poweradmin , here's how to update it later: Navigate to your project directory in the terminal: cd /path/to/poweradmin If you want to update to a newer version of the Poweradmin package itself, you'll need to modify the version constraint in your composer.json file, then run the update command. For specifically updating just the Poweradmin package: composer update poweradmin/poweradmin --no-dev If the project has specific update instructions, check the documentation or GitHub repository for any additional steps that might be required (such as database migrations). The --no-dev flag ensures that development dependencies aren't installed, keeping your production environment clean, just like when you initially installed the project. Post-Installation Steps Set up the database schema (see MySQL/MariaDB , PostgreSQL , or SQLite setup) Configure web server permissions Set up initial admin user (see instructions below) Configure PowerDNS connection Creating the Initial Admin User Manually If you're not using the web installer or prefer to set up your admin user directly in the database, follow these steps: 1. Generate a password hash You'll need to create a secure password hash. You can use PHP from the command line to generate one: php -r 'echo password_hash(\"your_secure_password\", PASSWORD_DEFAULT) . \"\\n\";' Copy the resulting hash which will look something like: $2y$10$abcdefghijklmnopqrstuOzxLkPHAUXTCg9vRMf/Q4WrCQI3K.0jK 2. Insert the admin user into the database For MySQL/MariaDB: INSERT INTO users (username, password, fullname, email, description, perm_templ, active, use_ldap) VALUES ('admin', 'THE_PASSWORD_HASH_YOU_GENERATED', 'Administrator', 'admin@example.com', 'System Administrator', 1, 1, 0); -- Make the user a super-admin INSERT INTO perm_items (user_id, perm_id) VALUES (1, 1); For PostgreSQL: INSERT INTO users (username, password, fullname, email, description, perm_templ, active, use_ldap) VALUES ('admin', 'THE_PASSWORD_HASH_YOU_GENERATED', 'Administrator', 'admin@example.com', 'System Administrator', 1, 1, 0); -- Make the user a super-admin INSERT INTO perm_items (user_id, perm_id) VALUES (1, 1); For SQLite: INSERT INTO users (username, password, fullname, email, description, perm_templ, active, use_ldap) VALUES ('admin', 'THE_PASSWORD_HASH_YOU_GENERATED', 'Administrator', 'admin@example.com', 'System Administrator', 1, 1, 0); -- Make the user a super-admin INSERT INTO perm_items (user_id, perm_id) VALUES (1, 1); 3. Verify user creation You should now be able to log in to the PowerAdmin interface with the username 'admin' and the password you created. Troubleshooting For common installation issues and solutions, see Common Issues .","title":"Composer"},{"location":"installation/composer/#installation-composer","text":"Note: This is an alternative way to install and update Poweradmin using Composer.","title":"Installation (Composer)"},{"location":"installation/composer/#prerequisites","text":"PHP 8.1 or higher Composer installed on your system Required PHP extensions: pdo, pdo_mysql/pdo_pgsql/pdo_sqlite See System Requirements for detailed requirements.","title":"Prerequisites"},{"location":"installation/composer/#installing-poweradmin","text":"To install the latest stable version of Poweradmin, you can use the following Composer command: composer create-project --no-dev poweradmin/poweradmin This command will create a poweradmin folder in the current directory, download, and set up Poweradmin without development dependencies. After running the Composer command, you need to create or modify the configuration file at config/settings.php with your database and application settings.","title":"Installing Poweradmin"},{"location":"installation/composer/#directory-structure","text":"After installation, you should have the following structure: poweradmin/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 config/ \u2502 \u251c\u2500\u2500 settings.defaults.php \u2502 \u2514\u2500\u2500 settings.php \u251c\u2500\u2500 lib/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 vendor/ \u251c\u2500\u2500 composer.json \u2514\u2500\u2500 composer.lock","title":"Directory Structure"},{"location":"installation/composer/#basic-configuration","text":"Here is an example of what the config/settings.php file should look like: <?php return [ /** * Database Settings */ 'database' => [ 'host' => 'localhost', 'name' => 'your_db_name', 'user' => 'your_db_user', 'password' => 'your_db_password', 'type' => 'mysql', // or 'pgsql', 'sqlite' ], /** * Security Settings */ 'security' => [ 'session_key' => 'generate_a_strong_random_key_here', ], /** * DNS Settings */ 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', ], ]; See Basic Configuration for all available options.","title":"Basic Configuration"},{"location":"installation/composer/#sqlite-database-settings","text":"If you are using SQLite, modify the database section in the config/settings.php file: 'database' => [ 'type' => 'sqlite', 'file' => '/path/to/your/sqlite.db', ], Important: Ensure proper file permissions and directory location for the SQLite database file.","title":"SQLite Database Settings"},{"location":"installation/composer/#updating-poweradmin","text":"If you installed Poweradmin using composer create-project --no-dev poweradmin/poweradmin , here's how to update it later: Navigate to your project directory in the terminal: cd /path/to/poweradmin If you want to update to a newer version of the Poweradmin package itself, you'll need to modify the version constraint in your composer.json file, then run the update command. For specifically updating just the Poweradmin package: composer update poweradmin/poweradmin --no-dev If the project has specific update instructions, check the documentation or GitHub repository for any additional steps that might be required (such as database migrations). The --no-dev flag ensures that development dependencies aren't installed, keeping your production environment clean, just like when you initially installed the project.","title":"Updating Poweradmin"},{"location":"installation/composer/#post-installation-steps","text":"Set up the database schema (see MySQL/MariaDB , PostgreSQL , or SQLite setup) Configure web server permissions Set up initial admin user (see instructions below) Configure PowerDNS connection","title":"Post-Installation Steps"},{"location":"installation/composer/#creating-the-initial-admin-user-manually","text":"If you're not using the web installer or prefer to set up your admin user directly in the database, follow these steps:","title":"Creating the Initial Admin User Manually"},{"location":"installation/composer/#1-generate-a-password-hash","text":"You'll need to create a secure password hash. You can use PHP from the command line to generate one: php -r 'echo password_hash(\"your_secure_password\", PASSWORD_DEFAULT) . \"\\n\";' Copy the resulting hash which will look something like: $2y$10$abcdefghijklmnopqrstuOzxLkPHAUXTCg9vRMf/Q4WrCQI3K.0jK","title":"1. Generate a password hash"},{"location":"installation/composer/#2-insert-the-admin-user-into-the-database","text":"","title":"2. Insert the admin user into the database"},{"location":"installation/composer/#for-mysqlmariadb","text":"INSERT INTO users (username, password, fullname, email, description, perm_templ, active, use_ldap) VALUES ('admin', 'THE_PASSWORD_HASH_YOU_GENERATED', 'Administrator', 'admin@example.com', 'System Administrator', 1, 1, 0); -- Make the user a super-admin INSERT INTO perm_items (user_id, perm_id) VALUES (1, 1);","title":"For MySQL/MariaDB:"},{"location":"installation/composer/#for-postgresql","text":"INSERT INTO users (username, password, fullname, email, description, perm_templ, active, use_ldap) VALUES ('admin', 'THE_PASSWORD_HASH_YOU_GENERATED', 'Administrator', 'admin@example.com', 'System Administrator', 1, 1, 0); -- Make the user a super-admin INSERT INTO perm_items (user_id, perm_id) VALUES (1, 1);","title":"For PostgreSQL:"},{"location":"installation/composer/#for-sqlite","text":"INSERT INTO users (username, password, fullname, email, description, perm_templ, active, use_ldap) VALUES ('admin', 'THE_PASSWORD_HASH_YOU_GENERATED', 'Administrator', 'admin@example.com', 'System Administrator', 1, 1, 0); -- Make the user a super-admin INSERT INTO perm_items (user_id, perm_id) VALUES (1, 1);","title":"For SQLite:"},{"location":"installation/composer/#3-verify-user-creation","text":"You should now be able to log in to the PowerAdmin interface with the username 'admin' and the password you created.","title":"3. Verify user creation"},{"location":"installation/composer/#troubleshooting","text":"For common installation issues and solutions, see Common Issues .","title":"Troubleshooting"},{"location":"installation/debian/","text":"Debian Installation This guide will help you install Poweradmin on Debian systems (Debian 12 or later recommended). Prerequisites Ensure you have the following PHP extensions installed: apt install php php-intl php-php-gettext php-tokenizer php-fpm Database Support Install the appropriate PHP database driver based on your preferred database: # For MySQL/MariaDB apt install php-mysql # For PostgreSQL apt install php-pgsql # For SQLite apt install php-sqlite3 Note: php-fpm is required only if you plan to use Nginx or choose not to use mod_php with Apache. Web Server Configuration Apache (Default on Debian) Apache is usually pre-installed and configured on Debian systems. You'll need to: Enable the required Apache modules: a2enmod rewrite Either place Poweradmin in the default webroot ( /var/www/html/ ) or create a virtual host configuration. Nginx Configuration If you prefer Nginx, create a configuration file like this: server { listen 80; server_name localhost; # Replace with your domain root /var/www/html; # Path to Poweradmin files index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/var/run/php/php-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } # Deny access to .htaccess and .htpasswd files for security reasons location ~ /\\.ht { deny all; } } Save this configuration to /etc/nginx/sites-available/poweradmin and enable it: ln -s /etc/nginx/sites-available/poweradmin /etc/nginx/sites-enabled/ nginx -t # Test the configuration systemctl reload nginx Installing Poweradmin Obtain Poweradmin Source Code Download the latest release (v3.9.3) from GitHub Releases : wget https://github.com/poweradmin/poweradmin/archive/refs/tags/v3.9.3.zip unzip v3.9.3.zip Or download directly from your browser and transfer the files to your server. Deploy to Web Server Move the Poweradmin files to your web server's document root: cp -r poweradmin-3.9.3/* /var/www/html/ chown -R www-data:www-data /var/www/html/ Complete the Installation Visit http://your-server/install/ in your browser Follow the installation steps Once installation is complete, remove the install directory for security Log in with the admin username and password created during installation Troubleshooting If you encounter issues: Check PHP error logs: /var/log/apache2/error.log or /var/log/nginx/error.log Ensure all required PHP extensions are installed and enabled Verify file permissions are set correctly for your web server user","title":"Debian"},{"location":"installation/debian/#debian-installation","text":"This guide will help you install Poweradmin on Debian systems (Debian 12 or later recommended).","title":"Debian Installation"},{"location":"installation/debian/#prerequisites","text":"Ensure you have the following PHP extensions installed: apt install php php-intl php-php-gettext php-tokenizer php-fpm","title":"Prerequisites"},{"location":"installation/debian/#database-support","text":"Install the appropriate PHP database driver based on your preferred database: # For MySQL/MariaDB apt install php-mysql # For PostgreSQL apt install php-pgsql # For SQLite apt install php-sqlite3 Note: php-fpm is required only if you plan to use Nginx or choose not to use mod_php with Apache.","title":"Database Support"},{"location":"installation/debian/#web-server-configuration","text":"","title":"Web Server Configuration"},{"location":"installation/debian/#apache-default-on-debian","text":"Apache is usually pre-installed and configured on Debian systems. You'll need to: Enable the required Apache modules: a2enmod rewrite Either place Poweradmin in the default webroot ( /var/www/html/ ) or create a virtual host configuration.","title":"Apache (Default on Debian)"},{"location":"installation/debian/#nginx-configuration","text":"If you prefer Nginx, create a configuration file like this: server { listen 80; server_name localhost; # Replace with your domain root /var/www/html; # Path to Poweradmin files index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/var/run/php/php-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } # Deny access to .htaccess and .htpasswd files for security reasons location ~ /\\.ht { deny all; } } Save this configuration to /etc/nginx/sites-available/poweradmin and enable it: ln -s /etc/nginx/sites-available/poweradmin /etc/nginx/sites-enabled/ nginx -t # Test the configuration systemctl reload nginx","title":"Nginx Configuration"},{"location":"installation/debian/#installing-poweradmin","text":"","title":"Installing Poweradmin"},{"location":"installation/debian/#obtain-poweradmin-source-code","text":"Download the latest release (v3.9.3) from GitHub Releases : wget https://github.com/poweradmin/poweradmin/archive/refs/tags/v3.9.3.zip unzip v3.9.3.zip Or download directly from your browser and transfer the files to your server.","title":"Obtain Poweradmin Source Code"},{"location":"installation/debian/#deploy-to-web-server","text":"Move the Poweradmin files to your web server's document root: cp -r poweradmin-3.9.3/* /var/www/html/ chown -R www-data:www-data /var/www/html/","title":"Deploy to Web Server"},{"location":"installation/debian/#complete-the-installation","text":"Visit http://your-server/install/ in your browser Follow the installation steps Once installation is complete, remove the install directory for security Log in with the admin username and password created during installation","title":"Complete the Installation"},{"location":"installation/debian/#troubleshooting","text":"If you encounter issues: Check PHP error logs: /var/log/apache2/error.log or /var/log/nginx/error.log Ensure all required PHP extensions are installed and enabled Verify file permissions are set correctly for your web server user","title":"Troubleshooting"},{"location":"installation/manual/","text":"Manual Installation This page describes the manual installation procedure for Poweradmin. While using the installer is recommended for most users, manual installation can be useful for automated deployments or advanced users. Prerequisites Verify that your setup meets the application requirements. For detailed requirements, including PHP version, required extensions, and supported databases, see System Requirements . Installation Steps 1. Prepare the Environment Unpack the Poweradmin archive in a location accessible via your web server. Ensure unpacked files are readable by the user that your web server/PHP runs as. 2. Create Database User Create a database user with SELECT, INSERT, UPDATE, DELETE rights on your PowerDNS database: For MySQL/MariaDB: CREATE USER 'poweradmin'@'localhost' IDENTIFIED BY 'secure_password'; GRANT SELECT, INSERT, UPDATE, DELETE ON powerdns.* TO 'poweradmin'@'localhost'; FLUSH PRIVILEGES; For PostgreSQL: CREATE USER poweradmin WITH PASSWORD 'secure_password'; GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO poweradmin; 3. Import Database Structure Import the Poweradmin database structure: For MySQL/MariaDB: mysql -u root -p powerdns < sql/poweradmin-mysql-db-structure.sql For PostgreSQL: psql -U postgres -d powerdns -f sql/poweradmin-pgsql-db-structure.sql For SQLite: sqlite3 /path/to/your/powerdns.db < sql/poweradmin-sqlite-db-structure.sql !!! danger \"Default Credentials\" The default login credentials are: * Username: `admin` * Password: `admin` You **must** change these credentials immediately after your first login for security reasons. 4. Create Configuration File Create a config/settings.php file using the template below. A full list of configuration options can be found in config/settings.defaults.php . !!! warning \"Password Character Restrictions\" When creating passwords for database, LDAP, or SMTP authentication, avoid using the following characters: * Single quotes (`'`) * Double quotes (`\"`) * Backslashes (`\\`) * Line breaks These characters can cause configuration file generation to fail during installation with cryptic PHP syntax errors. <?php /** * Poweradmin Custom Settings Configuration File */ return [ /** * Database Settings */ 'database' => [ 'host' => 'localhost', 'user' => 'poweradmin', // Database user created in step 2 'password' => 'secure_password', 'name' => 'powerdns', // PowerDNS database name 'type' => 'mysql', // Options: 'mysql', 'pgsql', 'sqlite' // 'file' => '', // Only for SQLite, provide full path to database file ], /** * Security Settings */ 'security' => [ 'session_key' => 'generate_a_random_string_here', // IMPORTANT: Change this! ], /** * DNS Settings */ 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', ], ]; For detailed configuration options, see Basic Configuration and Database Configuration . 5. Secure the Installation Set appropriate permissions on configuration files Remove the install directory after installation Change the default admin password immediately after first login Web Server Configuration Apache Configuration For a basic Apache configuration, you can use the following settings: <VirtualHost *:80> ServerName your-domain.com DocumentRoot /path/to/poweradmin <Directory /path/to/poweradmin> Options -Indexes +FollowSymLinks AllowOverride All Require all granted </Directory> # For DDNS update functionality RewriteEngine On RewriteRule ^/update(.*)$ /dynamic_update.php [L] RewriteRule ^/nic/update(.*)$ /dynamic_update.php [L] </VirtualHost> !!! important \"Apache .htaccess File\" The .htaccess file in the root directory is essential for the API to work properly. This file contains: - URL rewriting rules for RESTful API endpoints - Security configurations protecting sensitive directories and files - CORS headers for API access Ensure that `AllowOverride All` is set in your Apache configuration to allow the .htaccess file to function properly. Nginx Configuration For Nginx servers, use the complete configuration example provided in the Poweradmin repository: nginx.conf.example This configuration includes: - Complete RESTful API routing for users, zones, and records - API documentation endpoints - CORS headers for API access - Enhanced security restrictions - Static asset caching - PHP 8.2 FPM configuration - HTTP Authorization header forwarding for API authentication Make sure to adjust the following settings for your environment: - server_name - Set to your domain name - root - Set to your Poweradmin installation path - fastcgi_pass - Adjust PHP-FPM socket/TCP configuration as needed Caddy Configuration The following Caddy configuration has been suggested by community members. Note that this configuration is not actively used by the maintainers but has been reported to work: :80 { log { output file /var/log/caddy/caddy.log { } } # Set this path to your site's directory. root * /srv/www rewrite /update /dynamic_update.php rewrite /nic/update /dynamic_update.php php_fastcgi * unix//run/php/php-fpm.sock { } file_server * { } } Post-Installation Steps Configure web server permissions Set up proper DNS settings (see DNS Settings ) Configure additional features as needed: LDAP Integration PowerDNS API DNSSEC Troubleshooting For common installation issues and solutions, see Common Issues .","title":"Manual Installation"},{"location":"installation/manual/#manual-installation","text":"This page describes the manual installation procedure for Poweradmin. While using the installer is recommended for most users, manual installation can be useful for automated deployments or advanced users.","title":"Manual Installation"},{"location":"installation/manual/#prerequisites","text":"Verify that your setup meets the application requirements. For detailed requirements, including PHP version, required extensions, and supported databases, see System Requirements .","title":"Prerequisites"},{"location":"installation/manual/#installation-steps","text":"","title":"Installation Steps"},{"location":"installation/manual/#1-prepare-the-environment","text":"Unpack the Poweradmin archive in a location accessible via your web server. Ensure unpacked files are readable by the user that your web server/PHP runs as.","title":"1. Prepare the Environment"},{"location":"installation/manual/#2-create-database-user","text":"Create a database user with SELECT, INSERT, UPDATE, DELETE rights on your PowerDNS database:","title":"2. Create Database User"},{"location":"installation/manual/#for-mysqlmariadb","text":"CREATE USER 'poweradmin'@'localhost' IDENTIFIED BY 'secure_password'; GRANT SELECT, INSERT, UPDATE, DELETE ON powerdns.* TO 'poweradmin'@'localhost'; FLUSH PRIVILEGES;","title":"For MySQL/MariaDB:"},{"location":"installation/manual/#for-postgresql","text":"CREATE USER poweradmin WITH PASSWORD 'secure_password'; GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO poweradmin;","title":"For PostgreSQL:"},{"location":"installation/manual/#3-import-database-structure","text":"Import the Poweradmin database structure:","title":"3. Import Database Structure"},{"location":"installation/manual/#for-mysqlmariadb_1","text":"mysql -u root -p powerdns < sql/poweradmin-mysql-db-structure.sql","title":"For MySQL/MariaDB:"},{"location":"installation/manual/#for-postgresql_1","text":"psql -U postgres -d powerdns -f sql/poweradmin-pgsql-db-structure.sql","title":"For PostgreSQL:"},{"location":"installation/manual/#for-sqlite","text":"sqlite3 /path/to/your/powerdns.db < sql/poweradmin-sqlite-db-structure.sql !!! danger \"Default Credentials\" The default login credentials are: * Username: `admin` * Password: `admin` You **must** change these credentials immediately after your first login for security reasons.","title":"For SQLite:"},{"location":"installation/manual/#4-create-configuration-file","text":"Create a config/settings.php file using the template below. A full list of configuration options can be found in config/settings.defaults.php . !!! warning \"Password Character Restrictions\" When creating passwords for database, LDAP, or SMTP authentication, avoid using the following characters: * Single quotes (`'`) * Double quotes (`\"`) * Backslashes (`\\`) * Line breaks These characters can cause configuration file generation to fail during installation with cryptic PHP syntax errors. <?php /** * Poweradmin Custom Settings Configuration File */ return [ /** * Database Settings */ 'database' => [ 'host' => 'localhost', 'user' => 'poweradmin', // Database user created in step 2 'password' => 'secure_password', 'name' => 'powerdns', // PowerDNS database name 'type' => 'mysql', // Options: 'mysql', 'pgsql', 'sqlite' // 'file' => '', // Only for SQLite, provide full path to database file ], /** * Security Settings */ 'security' => [ 'session_key' => 'generate_a_random_string_here', // IMPORTANT: Change this! ], /** * DNS Settings */ 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', ], ]; For detailed configuration options, see Basic Configuration and Database Configuration .","title":"4. Create Configuration File"},{"location":"installation/manual/#5-secure-the-installation","text":"Set appropriate permissions on configuration files Remove the install directory after installation Change the default admin password immediately after first login","title":"5. Secure the Installation"},{"location":"installation/manual/#web-server-configuration","text":"","title":"Web Server Configuration"},{"location":"installation/manual/#apache-configuration","text":"For a basic Apache configuration, you can use the following settings: <VirtualHost *:80> ServerName your-domain.com DocumentRoot /path/to/poweradmin <Directory /path/to/poweradmin> Options -Indexes +FollowSymLinks AllowOverride All Require all granted </Directory> # For DDNS update functionality RewriteEngine On RewriteRule ^/update(.*)$ /dynamic_update.php [L] RewriteRule ^/nic/update(.*)$ /dynamic_update.php [L] </VirtualHost> !!! important \"Apache .htaccess File\" The .htaccess file in the root directory is essential for the API to work properly. This file contains: - URL rewriting rules for RESTful API endpoints - Security configurations protecting sensitive directories and files - CORS headers for API access Ensure that `AllowOverride All` is set in your Apache configuration to allow the .htaccess file to function properly.","title":"Apache Configuration"},{"location":"installation/manual/#nginx-configuration","text":"For Nginx servers, use the complete configuration example provided in the Poweradmin repository: nginx.conf.example This configuration includes: - Complete RESTful API routing for users, zones, and records - API documentation endpoints - CORS headers for API access - Enhanced security restrictions - Static asset caching - PHP 8.2 FPM configuration - HTTP Authorization header forwarding for API authentication Make sure to adjust the following settings for your environment: - server_name - Set to your domain name - root - Set to your Poweradmin installation path - fastcgi_pass - Adjust PHP-FPM socket/TCP configuration as needed","title":"Nginx Configuration"},{"location":"installation/manual/#caddy-configuration","text":"The following Caddy configuration has been suggested by community members. Note that this configuration is not actively used by the maintainers but has been reported to work: :80 { log { output file /var/log/caddy/caddy.log { } } # Set this path to your site's directory. root * /srv/www rewrite /update /dynamic_update.php rewrite /nic/update /dynamic_update.php php_fastcgi * unix//run/php/php-fpm.sock { } file_server * { } }","title":"Caddy Configuration"},{"location":"installation/manual/#post-installation-steps","text":"Configure web server permissions Set up proper DNS settings (see DNS Settings ) Configure additional features as needed: LDAP Integration PowerDNS API DNSSEC","title":"Post-Installation Steps"},{"location":"installation/manual/#troubleshooting","text":"For common installation issues and solutions, see Common Issues .","title":"Troubleshooting"},{"location":"installation/remote-setup-guide/","text":"Remote Poweradmin Setup Guide This guide details how to set up Poweradmin on a separate server from your PowerDNS installation, allowing you to maintain a dedicated admin interface without needing to install PowerDNS on the same machine. Prerequisites A server for Poweradmin (referred to as \"admin server\") A server running PowerDNS (referred to as \"DNS server\") MySQL/MariaDB, PostgreSQL, or SQLite database access from the admin server to the PowerDNS database Network connectivity between both servers PHP 7.4+ with required extensions on the admin server Web server software (Apache, Nginx, etc.) on the admin server Architecture Overview In a remote setup: Poweradmin is installed on the admin server PowerDNS runs on the DNS server Poweradmin connects to the PowerDNS database remotely For DNSSEC operations, Poweradmin uses the PowerDNS API \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 Admin Server \u2502 \u2502 DNS Server \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502Poweradmin\u2502 \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 \u2502 PowerDNS \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 API \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2514\u2500\u2500\u2500\u25ba\u2502 PowerDNS DB \u2502\u25c4\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Step 1: Install Poweradmin on the Admin Server Clone or download Poweradmin: git clone https://github.com/poweradmin/poweradmin.git cd poweradmin Install dependencies: composer install --no-dev Configure your web server to serve Poweradmin (directory configuration examples for Apache/Nginx not shown here). Step 2: Configure Database Connection Create a database user on your PowerDNS database server with appropriate permissions: -- For MySQL/MariaDB (execute on DNS server's database) CREATE USER 'poweradmin'@'admin_server_ip' IDENTIFIED BY 'secure_password'; GRANT SELECT, INSERT , UPDATE, DELETE ON powerdns.* TO 'poweradmin'@'admin_server_ip'; FLUSH PRIVILEGES; Configure Poweradmin to connect to the remote database: Copy config/settings.defaults.php to config/settings.php Edit the database connection settings: 'database' => [ 'host' => 'dns_server_ip', // IP address of your PowerDNS server 'port' => '3306', // Database port (MySQL default: 3306, PostgreSQL: 5432) 'user' => 'poweradmin', // The database user created in step 1 'password' => 'secure_password', 'name' => 'powerdns', // The PowerDNS database name 'type' => 'mysql', // mysql, pgsql, or sqlite ], Step 3: Configure PowerDNS API Access For DNSSEC management and certain operations, Poweradmin requires access to the PowerDNS API: Enable the API on your PowerDNS server by editing /etc/powerdns/pdns.conf : api=yes api-key=your_secure_api_key webserver=yes webserver-address=0.0.0.0 # Or restrict to admin_server_ip webserver-port=8081 webserver-allow-from=admin_server_ip/32 Configure Poweradmin to use the API by editing your settings.php : 'pdns_api' => [ 'url' => 'http://dns_server_ip:8081', // PowerDNS API URL 'key' => 'your_secure_api_key', // PowerDNS API key ], Step 4: Configure DNSSEC (Optional) If you're using DNSSEC, enable it in your settings: 'dnssec' => [ 'enabled' => true, 'debug' => false, // Set to true for troubleshooting ], Note: The PowerDNS API method is strongly recommended over the legacy pdnsutil method. When configured with the API settings above, Poweradmin will automatically use the API for DNSSEC operations. Step 5: Network Security Considerations Since you're running Poweradmin on a separate server: PowerDNS Server Configuration: Edit your PowerDNS configuration to allow external connections: # In /etc/powerdns/pdns.conf webserver-address=0.0.0.0 # Allow connections from any IP (consider restricting to admin_server_ip) webserver-allow-from=admin_server_ip/32 # Replace with your admin server's IP By default, PowerDNS API only binds to localhost (127.0.0.1), so this change is necessary Firewall Configuration: Allow connections from the admin server to the DNS server on: Database port (MySQL: 3306, PostgreSQL: 5432) PowerDNS API port (typically 8081) Consider using SSH tunneling or VPN for additional security Example with UFW (Ubuntu): # On PowerDNS server sudo ufw allow from admin_server_ip to any port 8081 proto tcp sudo ufw allow from admin_server_ip to any port 3306 proto tcp TLS/SSL: Consider using SSL/TLS for database connections Use HTTPS for Poweradmin's web interface Consider using HTTPS for the PowerDNS API Step 6: Test the Connection Complete the Poweradmin installation wizard if running for the first time Log in to Poweradmin Verify you can view and modify zones Test DNSSEC operations if enabled Security Best Practices Use a dedicated database user with minimum required permissions Implement IP restrictions for database and API access Use strong, unique passwords for all components Keep both Poweradmin and PowerDNS updated to the latest versions Regularly audit access logs on both servers","title":"Remote Setup"},{"location":"installation/remote-setup-guide/#remote-poweradmin-setup-guide","text":"This guide details how to set up Poweradmin on a separate server from your PowerDNS installation, allowing you to maintain a dedicated admin interface without needing to install PowerDNS on the same machine.","title":"Remote Poweradmin Setup Guide"},{"location":"installation/remote-setup-guide/#prerequisites","text":"A server for Poweradmin (referred to as \"admin server\") A server running PowerDNS (referred to as \"DNS server\") MySQL/MariaDB, PostgreSQL, or SQLite database access from the admin server to the PowerDNS database Network connectivity between both servers PHP 7.4+ with required extensions on the admin server Web server software (Apache, Nginx, etc.) on the admin server","title":"Prerequisites"},{"location":"installation/remote-setup-guide/#architecture-overview","text":"In a remote setup: Poweradmin is installed on the admin server PowerDNS runs on the DNS server Poweradmin connects to the PowerDNS database remotely For DNSSEC operations, Poweradmin uses the PowerDNS API \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 \u2502 \u2502 Admin Server \u2502 \u2502 DNS Server \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502Poweradmin\u2502 \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 \u2502 PowerDNS \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 API \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2514\u2500\u2500\u2500\u25ba\u2502 PowerDNS DB \u2502\u25c4\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Architecture Overview"},{"location":"installation/remote-setup-guide/#step-1-install-poweradmin-on-the-admin-server","text":"Clone or download Poweradmin: git clone https://github.com/poweradmin/poweradmin.git cd poweradmin Install dependencies: composer install --no-dev Configure your web server to serve Poweradmin (directory configuration examples for Apache/Nginx not shown here).","title":"Step 1: Install Poweradmin on the Admin Server"},{"location":"installation/remote-setup-guide/#step-2-configure-database-connection","text":"Create a database user on your PowerDNS database server with appropriate permissions: -- For MySQL/MariaDB (execute on DNS server's database) CREATE USER 'poweradmin'@'admin_server_ip' IDENTIFIED BY 'secure_password'; GRANT SELECT, INSERT , UPDATE, DELETE ON powerdns.* TO 'poweradmin'@'admin_server_ip'; FLUSH PRIVILEGES; Configure Poweradmin to connect to the remote database: Copy config/settings.defaults.php to config/settings.php Edit the database connection settings: 'database' => [ 'host' => 'dns_server_ip', // IP address of your PowerDNS server 'port' => '3306', // Database port (MySQL default: 3306, PostgreSQL: 5432) 'user' => 'poweradmin', // The database user created in step 1 'password' => 'secure_password', 'name' => 'powerdns', // The PowerDNS database name 'type' => 'mysql', // mysql, pgsql, or sqlite ],","title":"Step 2: Configure Database Connection"},{"location":"installation/remote-setup-guide/#step-3-configure-powerdns-api-access","text":"For DNSSEC management and certain operations, Poweradmin requires access to the PowerDNS API: Enable the API on your PowerDNS server by editing /etc/powerdns/pdns.conf : api=yes api-key=your_secure_api_key webserver=yes webserver-address=0.0.0.0 # Or restrict to admin_server_ip webserver-port=8081 webserver-allow-from=admin_server_ip/32 Configure Poweradmin to use the API by editing your settings.php : 'pdns_api' => [ 'url' => 'http://dns_server_ip:8081', // PowerDNS API URL 'key' => 'your_secure_api_key', // PowerDNS API key ],","title":"Step 3: Configure PowerDNS API Access"},{"location":"installation/remote-setup-guide/#step-4-configure-dnssec-optional","text":"If you're using DNSSEC, enable it in your settings: 'dnssec' => [ 'enabled' => true, 'debug' => false, // Set to true for troubleshooting ], Note: The PowerDNS API method is strongly recommended over the legacy pdnsutil method. When configured with the API settings above, Poweradmin will automatically use the API for DNSSEC operations.","title":"Step 4: Configure DNSSEC (Optional)"},{"location":"installation/remote-setup-guide/#step-5-network-security-considerations","text":"Since you're running Poweradmin on a separate server: PowerDNS Server Configuration: Edit your PowerDNS configuration to allow external connections: # In /etc/powerdns/pdns.conf webserver-address=0.0.0.0 # Allow connections from any IP (consider restricting to admin_server_ip) webserver-allow-from=admin_server_ip/32 # Replace with your admin server's IP By default, PowerDNS API only binds to localhost (127.0.0.1), so this change is necessary Firewall Configuration: Allow connections from the admin server to the DNS server on: Database port (MySQL: 3306, PostgreSQL: 5432) PowerDNS API port (typically 8081) Consider using SSH tunneling or VPN for additional security Example with UFW (Ubuntu): # On PowerDNS server sudo ufw allow from admin_server_ip to any port 8081 proto tcp sudo ufw allow from admin_server_ip to any port 3306 proto tcp TLS/SSL: Consider using SSL/TLS for database connections Use HTTPS for Poweradmin's web interface Consider using HTTPS for the PowerDNS API","title":"Step 5: Network Security Considerations"},{"location":"installation/remote-setup-guide/#step-6-test-the-connection","text":"Complete the Poweradmin installation wizard if running for the first time Log in to Poweradmin Verify you can view and modify zones Test DNSSEC operations if enabled","title":"Step 6: Test the Connection"},{"location":"installation/remote-setup-guide/#security-best-practices","text":"Use a dedicated database user with minimum required permissions Implement IP restrictions for database and API access Use strong, unique passwords for all components Keep both Poweradmin and PowerDNS updated to the latest versions Regularly audit access logs on both servers","title":"Security Best Practices"},{"location":"installation/ubuntu/","text":"Ubuntu Installation This guide will help you install Poweradmin on Ubuntu systems. Prerequisites Ensure you have the following PHP extensions installed: apt install php php-intl php-php-gettext php-tokenizer php-fpm Database Support Install the appropriate PHP database driver based on your preferred database: # For MySQL/MariaDB apt install php-mysql # For PostgreSQL apt install php-pgsql # For SQLite apt install php-sqlite3 Note: php-fpm is required only if you plan to use Nginx or choose not to use mod_php with Apache. Web Server Configuration Apache (Default on Ubuntu) Apache is usually pre-installed and configured on Ubuntu systems. You'll need to: Enable the required Apache modules: a2enmod rewrite Either place Poweradmin in the default webroot ( /var/www/html/ ) or create a virtual host configuration. Nginx Configuration If you prefer Nginx, first install it: apt install nginx Then create a configuration file like this: server { listen 80; server_name localhost; # Replace with your domain root /var/www/html; # Path to Poweradmin files index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/var/run/php/php-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } # Deny access to .htaccess and .htpasswd files for security reasons location ~ /\\.ht { deny all; } } Save this configuration to /etc/nginx/sites-available/poweradmin and enable it: ln -s /etc/nginx/sites-available/poweradmin /etc/nginx/sites-enabled/ nginx -t # Test the configuration systemctl reload nginx Installing Poweradmin Obtain Poweradmin Source Code Download the latest release (v3.9.3) from GitHub Releases : wget https://github.com/poweradmin/poweradmin/archive/refs/tags/v3.9.3.zip unzip v3.9.3.zip Or download directly from your browser and transfer the files to your server. Deploy to Web Server Move the Poweradmin files to your web server's document root: cp -r poweradmin-3.9.3/* /var/www/html/ chown -R www-data:www-data /var/www/html/ Note: You can safely remove the default index.html (or derivative) if it exists. Complete the Installation Visit http://your-server/install/ in your browser Follow the installation steps Once installation is complete, remove the install directory for security Log in with the admin username and password created during installation Troubleshooting If you encounter issues: Check PHP error logs: /var/log/apache2/error.log or /var/log/nginx/error.log Ensure all required PHP extensions are installed and enabled Verify file permissions are set correctly for your web server user","title":"Ubuntu"},{"location":"installation/ubuntu/#ubuntu-installation","text":"This guide will help you install Poweradmin on Ubuntu systems.","title":"Ubuntu Installation"},{"location":"installation/ubuntu/#prerequisites","text":"Ensure you have the following PHP extensions installed: apt install php php-intl php-php-gettext php-tokenizer php-fpm","title":"Prerequisites"},{"location":"installation/ubuntu/#database-support","text":"Install the appropriate PHP database driver based on your preferred database: # For MySQL/MariaDB apt install php-mysql # For PostgreSQL apt install php-pgsql # For SQLite apt install php-sqlite3 Note: php-fpm is required only if you plan to use Nginx or choose not to use mod_php with Apache.","title":"Database Support"},{"location":"installation/ubuntu/#web-server-configuration","text":"","title":"Web Server Configuration"},{"location":"installation/ubuntu/#apache-default-on-ubuntu","text":"Apache is usually pre-installed and configured on Ubuntu systems. You'll need to: Enable the required Apache modules: a2enmod rewrite Either place Poweradmin in the default webroot ( /var/www/html/ ) or create a virtual host configuration.","title":"Apache (Default on Ubuntu)"},{"location":"installation/ubuntu/#nginx-configuration","text":"If you prefer Nginx, first install it: apt install nginx Then create a configuration file like this: server { listen 80; server_name localhost; # Replace with your domain root /var/www/html; # Path to Poweradmin files index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/var/run/php/php-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } # Deny access to .htaccess and .htpasswd files for security reasons location ~ /\\.ht { deny all; } } Save this configuration to /etc/nginx/sites-available/poweradmin and enable it: ln -s /etc/nginx/sites-available/poweradmin /etc/nginx/sites-enabled/ nginx -t # Test the configuration systemctl reload nginx","title":"Nginx Configuration"},{"location":"installation/ubuntu/#installing-poweradmin","text":"","title":"Installing Poweradmin"},{"location":"installation/ubuntu/#obtain-poweradmin-source-code","text":"Download the latest release (v3.9.3) from GitHub Releases : wget https://github.com/poweradmin/poweradmin/archive/refs/tags/v3.9.3.zip unzip v3.9.3.zip Or download directly from your browser and transfer the files to your server.","title":"Obtain Poweradmin Source Code"},{"location":"installation/ubuntu/#deploy-to-web-server","text":"Move the Poweradmin files to your web server's document root: cp -r poweradmin-3.9.3/* /var/www/html/ chown -R www-data:www-data /var/www/html/ Note: You can safely remove the default index.html (or derivative) if it exists.","title":"Deploy to Web Server"},{"location":"installation/ubuntu/#complete-the-installation","text":"Visit http://your-server/install/ in your browser Follow the installation steps Once installation is complete, remove the install directory for security Log in with the admin username and password created during installation","title":"Complete the Installation"},{"location":"installation/ubuntu/#troubleshooting","text":"If you encounter issues: Check PHP error logs: /var/log/apache2/error.log or /var/log/nginx/error.log Ensure all required PHP extensions are installed and enabled Verify file permissions are set correctly for your web server user","title":"Troubleshooting"},{"location":"maintenance/","text":"Maintenance Guide This section provides guidance on maintaining your Poweradmin installation and ensuring its long-term performance and security. Regular Maintenance Tasks Database Maintenance Regular database maintenance helps keep your Poweradmin installation running smoothly: MySQL/MariaDB -- Optimize tables to reclaim space and improve performance OPTIMIZE TABLE users; OPTIMIZE TABLE zones; OPTIMIZE TABLE records; OPTIMIZE TABLE domains; OPTIMIZE TABLE supermasters; OPTIMIZE TABLE domainmetadata; -- Analyze tables to update statistics for the query optimizer ANALYZE TABLE users; ANALYZE TABLE zones; ANALYZE TABLE records; ANALYZE TABLE domains; ANALYZE TABLE supermasters; ANALYZE TABLE domainmetadata; PostgreSQL -- Update statistics VACUUM ANALYZE users; VACUUM ANALYZE zones; VACUUM ANALYZE records; VACUUM ANALYZE domains; VACUUM ANALYZE supermasters; VACUUM ANALYZE domainmetadata; SQLite -- Rebuild the database to optimize performance VACUUM; Log Management To prevent logs from consuming excessive disk space: Database Logs : Implement a log rotation strategy for Poweradmin's database logs: -- Example log cleanup (retain only the last 90 days) DELETE FROM log_users WHERE created < DATE_SUB(NOW(), INTERVAL 90 DAY); DELETE FROM log_zones WHERE created < DATE_SUB(NOW(), INTERVAL 90 DAY); System Logs : Configure log rotation for your web server and PHP logs: # Example logrotate configuration (/etc/logrotate.d/poweradmin) /var/log/apache2/poweradmin-*.log { rotate 14 daily compress delaycompress missingok notifempty create 640 www-data adm } Backup Procedures Database Backup Regular database backups are essential: # MySQL/MariaDB backup mysqldump -u username -p --opt powerdns > powerdns_$(date +%Y%m%d).sql # PostgreSQL backup pg_dump -U username powerdns > powerdns_$(date +%Y%m%d).sql # SQLite backup sqlite3 poweradmin.sqlite .dump > poweradmin_$(date +%Y%m%d).sql Configuration Backup Back up your Poweradmin configuration files: # Create a compressed archive of configuration files tar -czf poweradmin_config_$(date +%Y%m%d).tar.gz /path/to/poweradmin/inc/config.inc.php /path/to/poweradmin/config/ Security Updates Poweradmin Updates : Regularly check for and apply updates to Poweradmin Dependency Updates : Keep PHP, web server, and other components updated Security Scans : Periodically scan for vulnerabilities using tools like OWASP ZAP Monitoring Performance Monitoring Monitor system resource usage: Database Query Performance : Enable slow query logging temporarily to identify performance bottlenecks Web Server Performance : Monitor response times and resource utilization Disk Space : Set up alerts for low disk space conditions Error Monitoring Regularly check error logs for issues: # Check Poweradmin-related PHP errors grep -i \"poweradmin\" /var/log/php/error.log # Check web server errors grep -i \"poweradmin\" /var/log/apache2/error.log Routine Checks Establish a routine maintenance schedule: Daily : Check for errors in logs Weekly : Monitor database size and performance Monthly : Run database optimization, prune old logs Quarterly : Test backups by performing a restore Bi-annually : Review user accounts and permissions Disaster Recovery Prepare for potential system failures: Recovery Plan : Document step-by-step recovery procedures Test Restores : Regularly test your backup and restore procedures Alternate Access : Ensure DNS records can be managed directly via PowerDNS if Poweradmin becomes unavailable For more detailed guidance on specific maintenance tasks, refer to the other sections in this documentation.","title":"Overview"},{"location":"maintenance/#maintenance-guide","text":"This section provides guidance on maintaining your Poweradmin installation and ensuring its long-term performance and security.","title":"Maintenance Guide"},{"location":"maintenance/#regular-maintenance-tasks","text":"","title":"Regular Maintenance Tasks"},{"location":"maintenance/#database-maintenance","text":"Regular database maintenance helps keep your Poweradmin installation running smoothly:","title":"Database Maintenance"},{"location":"maintenance/#mysqlmariadb","text":"-- Optimize tables to reclaim space and improve performance OPTIMIZE TABLE users; OPTIMIZE TABLE zones; OPTIMIZE TABLE records; OPTIMIZE TABLE domains; OPTIMIZE TABLE supermasters; OPTIMIZE TABLE domainmetadata; -- Analyze tables to update statistics for the query optimizer ANALYZE TABLE users; ANALYZE TABLE zones; ANALYZE TABLE records; ANALYZE TABLE domains; ANALYZE TABLE supermasters; ANALYZE TABLE domainmetadata;","title":"MySQL/MariaDB"},{"location":"maintenance/#postgresql","text":"-- Update statistics VACUUM ANALYZE users; VACUUM ANALYZE zones; VACUUM ANALYZE records; VACUUM ANALYZE domains; VACUUM ANALYZE supermasters; VACUUM ANALYZE domainmetadata;","title":"PostgreSQL"},{"location":"maintenance/#sqlite","text":"-- Rebuild the database to optimize performance VACUUM;","title":"SQLite"},{"location":"maintenance/#log-management","text":"To prevent logs from consuming excessive disk space: Database Logs : Implement a log rotation strategy for Poweradmin's database logs: -- Example log cleanup (retain only the last 90 days) DELETE FROM log_users WHERE created < DATE_SUB(NOW(), INTERVAL 90 DAY); DELETE FROM log_zones WHERE created < DATE_SUB(NOW(), INTERVAL 90 DAY); System Logs : Configure log rotation for your web server and PHP logs: # Example logrotate configuration (/etc/logrotate.d/poweradmin) /var/log/apache2/poweradmin-*.log { rotate 14 daily compress delaycompress missingok notifempty create 640 www-data adm }","title":"Log Management"},{"location":"maintenance/#backup-procedures","text":"","title":"Backup Procedures"},{"location":"maintenance/#database-backup","text":"Regular database backups are essential: # MySQL/MariaDB backup mysqldump -u username -p --opt powerdns > powerdns_$(date +%Y%m%d).sql # PostgreSQL backup pg_dump -U username powerdns > powerdns_$(date +%Y%m%d).sql # SQLite backup sqlite3 poweradmin.sqlite .dump > poweradmin_$(date +%Y%m%d).sql","title":"Database Backup"},{"location":"maintenance/#configuration-backup","text":"Back up your Poweradmin configuration files: # Create a compressed archive of configuration files tar -czf poweradmin_config_$(date +%Y%m%d).tar.gz /path/to/poweradmin/inc/config.inc.php /path/to/poweradmin/config/","title":"Configuration Backup"},{"location":"maintenance/#security-updates","text":"Poweradmin Updates : Regularly check for and apply updates to Poweradmin Dependency Updates : Keep PHP, web server, and other components updated Security Scans : Periodically scan for vulnerabilities using tools like OWASP ZAP","title":"Security Updates"},{"location":"maintenance/#monitoring","text":"","title":"Monitoring"},{"location":"maintenance/#performance-monitoring","text":"Monitor system resource usage: Database Query Performance : Enable slow query logging temporarily to identify performance bottlenecks Web Server Performance : Monitor response times and resource utilization Disk Space : Set up alerts for low disk space conditions","title":"Performance Monitoring"},{"location":"maintenance/#error-monitoring","text":"Regularly check error logs for issues: # Check Poweradmin-related PHP errors grep -i \"poweradmin\" /var/log/php/error.log # Check web server errors grep -i \"poweradmin\" /var/log/apache2/error.log","title":"Error Monitoring"},{"location":"maintenance/#routine-checks","text":"Establish a routine maintenance schedule: Daily : Check for errors in logs Weekly : Monitor database size and performance Monthly : Run database optimization, prune old logs Quarterly : Test backups by performing a restore Bi-annually : Review user accounts and permissions","title":"Routine Checks"},{"location":"maintenance/#disaster-recovery","text":"Prepare for potential system failures: Recovery Plan : Document step-by-step recovery procedures Test Restores : Regularly test your backup and restore procedures Alternate Access : Ensure DNS records can be managed directly via PowerDNS if Poweradmin becomes unavailable For more detailed guidance on specific maintenance tasks, refer to the other sections in this documentation.","title":"Disaster Recovery"},{"location":"troubleshooting/debugging/","text":"Debugging Poweradmin To help diagnose issues, you can enable various debug settings in your Poweradmin configuration. Below are the available debug settings and how to enable them. Configuration Location Debugging settings should be added to your config/settings.php file. If you're still using the legacy configuration in inc/config.inc.php , consider migrating to the new configuration format using the provided script: php scripts/migrate-config.php Available Debug Settings 1. PHP Error Reporting To display PHP errors directly in the browser, add the following lines to your index.php or any other entry point file: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); 2. Logger Settings Configure the logging settings in your config/settings.php : return [ // Other settings... 'logging' => [ 'type' => 'native', // Options: 'null', 'native' 'level' => 'debug', // Options: 'debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency' // Other logging settings... ], // Other settings... ]; These settings are primarily used for logging authentication issues and other system events. 3. Database Debugging Enable or disable database debugging to log detailed database operations and errors: return [ // Other settings... 'database' => [ // Other database settings... 'debug' => true, // Show all SQL queries ], // Other settings... ]; 4. DNSSEC Debugging Enable or disable DNSSEC debugging to log detailed DNSSEC operations and errors: return [ // Other settings... 'dnssec' => [ // Other DNSSEC settings... 'debug' => true, // Enable DNSSEC debug logging ], // Other settings... ]; 5. LDAP Debugging Enable or disable LDAP debugging to log detailed LDAP operations and errors: return [ // Other settings... 'ldap' => [ // Other LDAP settings... 'debug' => true, // Enable LDAP debug logging ], // Other settings... ]; Display Statistics To see memory usage and execution time at the bottom of each page, enable the display_stats option: return [ // Other settings... 'misc' => [ // Other miscellaneous settings... 'display_stats' => true, // Display memory usage and execution time ], // Other settings... ]; By enabling these settings, you can gain more insight into the application's behavior and troubleshoot issues more effectively. Common Configuration Issues Password Character Issues If you experience PHP syntax errors when generating configuration files during installation, check your passwords for problematic characters: Symptoms: - Installation fails with PHP parse errors - Configuration file cannot be parsed - \"Access denied for user\" errors after successful installation test Solution: Avoid these characters in database, LDAP, and SMTP passwords: - Single quotes ( ' ) - Double quotes ( \" ) - Backslashes ( \\ ) - Line breaks Example Error: Parse error: syntax error, unexpected 'password' in config/settings.php on line 42 Debugging Steps: 1. Check your password for the problematic characters listed above 2. Use var_dump((new AppConfiguration())->getAll()) to inspect parsed configuration values 3. Look for missing quotes or escape characters in the output 4. Change the password to use only alphanumeric characters and basic symbols This issue occurs because the configuration file generator does not properly escape special PHP characters in password values during installation.","title":"Debugging"},{"location":"troubleshooting/debugging/#debugging-poweradmin","text":"To help diagnose issues, you can enable various debug settings in your Poweradmin configuration. Below are the available debug settings and how to enable them.","title":"Debugging Poweradmin"},{"location":"troubleshooting/debugging/#configuration-location","text":"Debugging settings should be added to your config/settings.php file. If you're still using the legacy configuration in inc/config.inc.php , consider migrating to the new configuration format using the provided script: php scripts/migrate-config.php","title":"Configuration Location"},{"location":"troubleshooting/debugging/#available-debug-settings","text":"","title":"Available Debug Settings"},{"location":"troubleshooting/debugging/#1-php-error-reporting","text":"To display PHP errors directly in the browser, add the following lines to your index.php or any other entry point file: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);","title":"1. PHP Error Reporting"},{"location":"troubleshooting/debugging/#2-logger-settings","text":"Configure the logging settings in your config/settings.php : return [ // Other settings... 'logging' => [ 'type' => 'native', // Options: 'null', 'native' 'level' => 'debug', // Options: 'debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency' // Other logging settings... ], // Other settings... ]; These settings are primarily used for logging authentication issues and other system events.","title":"2. Logger Settings"},{"location":"troubleshooting/debugging/#3-database-debugging","text":"Enable or disable database debugging to log detailed database operations and errors: return [ // Other settings... 'database' => [ // Other database settings... 'debug' => true, // Show all SQL queries ], // Other settings... ];","title":"3. Database Debugging"},{"location":"troubleshooting/debugging/#4-dnssec-debugging","text":"Enable or disable DNSSEC debugging to log detailed DNSSEC operations and errors: return [ // Other settings... 'dnssec' => [ // Other DNSSEC settings... 'debug' => true, // Enable DNSSEC debug logging ], // Other settings... ];","title":"4. DNSSEC Debugging"},{"location":"troubleshooting/debugging/#5-ldap-debugging","text":"Enable or disable LDAP debugging to log detailed LDAP operations and errors: return [ // Other settings... 'ldap' => [ // Other LDAP settings... 'debug' => true, // Enable LDAP debug logging ], // Other settings... ];","title":"5. LDAP Debugging"},{"location":"troubleshooting/debugging/#display-statistics","text":"To see memory usage and execution time at the bottom of each page, enable the display_stats option: return [ // Other settings... 'misc' => [ // Other miscellaneous settings... 'display_stats' => true, // Display memory usage and execution time ], // Other settings... ]; By enabling these settings, you can gain more insight into the application's behavior and troubleshoot issues more effectively.","title":"Display Statistics"},{"location":"troubleshooting/debugging/#common-configuration-issues","text":"","title":"Common Configuration Issues"},{"location":"troubleshooting/debugging/#password-character-issues","text":"If you experience PHP syntax errors when generating configuration files during installation, check your passwords for problematic characters: Symptoms: - Installation fails with PHP parse errors - Configuration file cannot be parsed - \"Access denied for user\" errors after successful installation test Solution: Avoid these characters in database, LDAP, and SMTP passwords: - Single quotes ( ' ) - Double quotes ( \" ) - Backslashes ( \\ ) - Line breaks Example Error: Parse error: syntax error, unexpected 'password' in config/settings.php on line 42 Debugging Steps: 1. Check your password for the problematic characters listed above 2. Use var_dump((new AppConfiguration())->getAll()) to inspect parsed configuration values 3. Look for missing quotes or escape characters in the output 4. Change the password to use only alphanumeric characters and basic symbols This issue occurs because the configuration file generator does not properly escape special PHP characters in password values during installation.","title":"Password Character Issues"},{"location":"upgrading/","text":"Upgrading Poweradmin General Upgrade Instructions When upgrading Poweradmin from any version to a newer one, follow these general steps: Backup your database - This is critical before any upgrade Backup your existing files - Make a complete backup of your current installation Replace files - Replace all files with the new version's files Restore configuration - Depending on your version: For versions < 4.x: Restore inc/config.inc.php from your backup For versions \u2265 4.x: Restore config/settings.php from your backup Update database structure - If required by the specific version upgrade Test functionality - Verify all features work correctly after upgrade Important Considerations Always read the release notes for the version you're upgrading to and any intermediate versions Neglecting to follow proper upgrade procedures may result in a non-functioning installation It's recommended to perform upgrades in a test environment first before applying to production After upgrading, check the system for any warnings or errors Verify that zones and records remain accessible and editable Report any bugs or issues you encounter during the upgrade process Upgrade Path If you're upgrading across multiple major versions, it's often safest to upgrade incrementally through each major version rather than jumping directly to the latest version. Recommended Path from 2.0.0 to 4.0.0 If you're upgrading from a very old version (e.g., 2.0.0) to the latest 4.0.0, we recommend the following path: 2.0.0 \u2192 2.1.4 (Important database structure changes) 2.1.4 \u2192 2.2.2 (API integration changes) 2.2.2 \u2192 3.2.0 (DNSSEC implementation) 3.2.0 \u2192 3.9.3 (Security improvements) 3.9.3 \u2192 4.0.0 (Complete architecture overhaul) Critical Versions with SQL Migrations The following versions include important database structure changes: v2.1.4 - Added supermasters and domainmetadata tables v3.0.0 - Added cryptokeys table for DNSSEC v3.2.0 - Schema updates for PowerDNS API integration v3.4.0 - Added tsigkeys table v4.0.0 - Complete schema overhaul, including user management Troubleshooting If you encounter issues during or after an upgrade: Check the PHP and web server error logs Verify database connectivity and permissions Ensure file permissions are set correctly Review the specific upgrade instructions for the version you're upgrading to","title":"Overview"},{"location":"upgrading/#upgrading-poweradmin","text":"","title":"Upgrading Poweradmin"},{"location":"upgrading/#general-upgrade-instructions","text":"When upgrading Poweradmin from any version to a newer one, follow these general steps: Backup your database - This is critical before any upgrade Backup your existing files - Make a complete backup of your current installation Replace files - Replace all files with the new version's files Restore configuration - Depending on your version: For versions < 4.x: Restore inc/config.inc.php from your backup For versions \u2265 4.x: Restore config/settings.php from your backup Update database structure - If required by the specific version upgrade Test functionality - Verify all features work correctly after upgrade","title":"General Upgrade Instructions"},{"location":"upgrading/#important-considerations","text":"Always read the release notes for the version you're upgrading to and any intermediate versions Neglecting to follow proper upgrade procedures may result in a non-functioning installation It's recommended to perform upgrades in a test environment first before applying to production After upgrading, check the system for any warnings or errors Verify that zones and records remain accessible and editable Report any bugs or issues you encounter during the upgrade process","title":"Important Considerations"},{"location":"upgrading/#upgrade-path","text":"If you're upgrading across multiple major versions, it's often safest to upgrade incrementally through each major version rather than jumping directly to the latest version.","title":"Upgrade Path"},{"location":"upgrading/#recommended-path-from-200-to-400","text":"If you're upgrading from a very old version (e.g., 2.0.0) to the latest 4.0.0, we recommend the following path: 2.0.0 \u2192 2.1.4 (Important database structure changes) 2.1.4 \u2192 2.2.2 (API integration changes) 2.2.2 \u2192 3.2.0 (DNSSEC implementation) 3.2.0 \u2192 3.9.3 (Security improvements) 3.9.3 \u2192 4.0.0 (Complete architecture overhaul)","title":"Recommended Path from 2.0.0 to 4.0.0"},{"location":"upgrading/#critical-versions-with-sql-migrations","text":"The following versions include important database structure changes: v2.1.4 - Added supermasters and domainmetadata tables v3.0.0 - Added cryptokeys table for DNSSEC v3.2.0 - Schema updates for PowerDNS API integration v3.4.0 - Added tsigkeys table v4.0.0 - Complete schema overhaul, including user management","title":"Critical Versions with SQL Migrations"},{"location":"upgrading/#troubleshooting","text":"If you encounter issues during or after an upgrade: Check the PHP and web server error logs Verify database connectivity and permissions Ensure file permissions are set correctly Review the specific upgrade instructions for the version you're upgrading to","title":"Troubleshooting"},{"location":"upgrading/v2.1.0/","text":"Upgrading to v2.1.0 Overview Version 2.1.0 is a significant update that introduces important security enhancements, performance improvements, and usability features to Poweradmin. This minor version upgrade enhances DNS management capabilities while improving overall system security. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup Review new configuration options and add them to your config file as needed Security Improvements Enhanced protection against cross-site scripting (XSS) vulnerabilities Improved defenses against SQL injection attacks Strengthened input validation for all form submissions Better session security and cookie handling Improved authentication system Enhanced password management New Features Enhanced search capabilities for zones and records Improved support for internationalized domain names Better compatibility with different PowerDNS versions Extended record type support and validation Enhanced user permission management Improved language support and translations User Interface Enhancements Redesigned zone management interface for better usability Improved record editing with better validation Enhanced error handling with more informative messages Better pagination and sorting for zone and record listings Optimized interface for handling large DNS zones Fixed various display issues in different browsers Performance Improvements Optimized database queries for better responsiveness Improved handling of large zone files Enhanced caching for frequently accessed data Reduced memory usage for zone operations Faster search and filtering operations Notes No database schema changes are required for this update This release maintains backward compatibility with v2.0.0 configuration Users are encouraged to update directly to the latest v2.1.x version after upgrading to v2.1.0 The initial v2.1.0 release lays the groundwork for additional features introduced in subsequent v2.1.x releases, including: Support for additional database types (added in 2.1.5/2.1.6) Improved password encryption options (added in 2.1.6) DNSSEC support (added in 2.1.7) LDAP authentication (added in 2.1.7)","title":"v2.1.0"},{"location":"upgrading/v2.1.0/#upgrading-to-v210","text":"","title":"Upgrading to v2.1.0"},{"location":"upgrading/v2.1.0/#overview","text":"Version 2.1.0 is a significant update that introduces important security enhancements, performance improvements, and usability features to Poweradmin. This minor version upgrade enhances DNS management capabilities while improving overall system security.","title":"Overview"},{"location":"upgrading/v2.1.0/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup Review new configuration options and add them to your config file as needed","title":"Upgrade Instructions"},{"location":"upgrading/v2.1.0/#security-improvements","text":"Enhanced protection against cross-site scripting (XSS) vulnerabilities Improved defenses against SQL injection attacks Strengthened input validation for all form submissions Better session security and cookie handling Improved authentication system Enhanced password management","title":"Security Improvements"},{"location":"upgrading/v2.1.0/#new-features","text":"Enhanced search capabilities for zones and records Improved support for internationalized domain names Better compatibility with different PowerDNS versions Extended record type support and validation Enhanced user permission management Improved language support and translations","title":"New Features"},{"location":"upgrading/v2.1.0/#user-interface-enhancements","text":"Redesigned zone management interface for better usability Improved record editing with better validation Enhanced error handling with more informative messages Better pagination and sorting for zone and record listings Optimized interface for handling large DNS zones Fixed various display issues in different browsers","title":"User Interface Enhancements"},{"location":"upgrading/v2.1.0/#performance-improvements","text":"Optimized database queries for better responsiveness Improved handling of large zone files Enhanced caching for frequently accessed data Reduced memory usage for zone operations Faster search and filtering operations","title":"Performance Improvements"},{"location":"upgrading/v2.1.0/#notes","text":"No database schema changes are required for this update This release maintains backward compatibility with v2.0.0 configuration Users are encouraged to update directly to the latest v2.1.x version after upgrading to v2.1.0 The initial v2.1.0 release lays the groundwork for additional features introduced in subsequent v2.1.x releases, including: Support for additional database types (added in 2.1.5/2.1.6) Improved password encryption options (added in 2.1.6) DNSSEC support (added in 2.1.7) LDAP authentication (added in 2.1.7)","title":"Notes"},{"location":"upgrading/v2.1.1/","text":"Upgrading to v2.1.1 Overview Version 2.1.1 is the first maintenance release following v2.1.0, addressing critical security vulnerabilities and initial bugs discovered after the release of v2.1.0. This update focuses on stability and security improvements without introducing any database changes or new features. Upgrade Instructions Download latest tarball from GitHub Backup your files before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup Security Improvements Fixed critical XSS vulnerabilities in zone and record management interfaces Patched SQL injection possibilities in search and filtering functions Enhanced input validation for DNS record submissions Improved session security and cookie handling Added additional sanitization for user input throughout the application Initial Bug Fixes Resolved installation issues reported after v2.1.0 release Fixed character encoding problems with international domain names Corrected record validation for certain DNS record types Addressed issues with zone transfers and zone creation Fixed JavaScript errors in the record editing interface Corrected CSS rendering problems in various browsers Resolved issues with PowerDNS API integration Usability Improvements Improved error messages for common DNS configuration mistakes Enhanced form validation with better user feedback Fixed sorting and pagination in zone and record listings Better handling of large zone files Optimized database queries for improved performance Updated language translations for better internationalization Notes No database schema changes are required for this update This release is fully backward compatible with v2.1.0 The update is strongly recommended for all users due to critical security fixes This update addresses the most commonly reported issues following the v2.1.0 release","title":"v2.1.1"},{"location":"upgrading/v2.1.1/#upgrading-to-v211","text":"","title":"Upgrading to v2.1.1"},{"location":"upgrading/v2.1.1/#overview","text":"Version 2.1.1 is the first maintenance release following v2.1.0, addressing critical security vulnerabilities and initial bugs discovered after the release of v2.1.0. This update focuses on stability and security improvements without introducing any database changes or new features.","title":"Overview"},{"location":"upgrading/v2.1.1/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v2.1.1/#security-improvements","text":"Fixed critical XSS vulnerabilities in zone and record management interfaces Patched SQL injection possibilities in search and filtering functions Enhanced input validation for DNS record submissions Improved session security and cookie handling Added additional sanitization for user input throughout the application","title":"Security Improvements"},{"location":"upgrading/v2.1.1/#initial-bug-fixes","text":"Resolved installation issues reported after v2.1.0 release Fixed character encoding problems with international domain names Corrected record validation for certain DNS record types Addressed issues with zone transfers and zone creation Fixed JavaScript errors in the record editing interface Corrected CSS rendering problems in various browsers Resolved issues with PowerDNS API integration","title":"Initial Bug Fixes"},{"location":"upgrading/v2.1.1/#usability-improvements","text":"Improved error messages for common DNS configuration mistakes Enhanced form validation with better user feedback Fixed sorting and pagination in zone and record listings Better handling of large zone files Optimized database queries for improved performance Updated language translations for better internationalization","title":"Usability Improvements"},{"location":"upgrading/v2.1.1/#notes","text":"No database schema changes are required for this update This release is fully backward compatible with v2.1.0 The update is strongly recommended for all users due to critical security fixes This update addresses the most commonly reported issues following the v2.1.0 release","title":"Notes"},{"location":"upgrading/v2.1.2/","text":"Upgrading to v2.1.2 Overview Version 2.1.2 is a maintenance release that addresses several security vulnerabilities and bug fixes identified in v2.1.1. This update focuses on enhancing the stability and security of Poweradmin without modifying the database structure. Upgrade Instructions Download latest tarball from GitHub Backup your files before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup Security Improvements Fixed cross-site scripting (XSS) vulnerabilities in zone and record management forms Patched SQL injection vulnerabilities in search functionality Enhanced input validation for all form submissions Improved session handling and security Better sanitization of user input throughout the application Bug Fixes Resolved issues with special characters in DNS record content Fixed pagination in zone listing for large DNS installations Corrected display issues with certain record types Addressed browser compatibility problems Fixed JavaScript errors affecting record editing functionality Corrected sorting problems in zone and record listings Improved error messages for better user guidance Usability Improvements Enhanced form validation with more informative error messages Improved handling of internationalized domain names Better compatibility with various PowerDNS versions Optimized database queries for improved performance Updated language translations Notes No database schema changes are required for this update This release maintains full backward compatibility with v2.1.1 The update is recommended for all users due to security improvements Users running versions earlier than v2.1.1 should first upgrade to v2.1.1 before proceeding to v2.1.2","title":"v2.1.2"},{"location":"upgrading/v2.1.2/#upgrading-to-v212","text":"","title":"Upgrading to v2.1.2"},{"location":"upgrading/v2.1.2/#overview","text":"Version 2.1.2 is a maintenance release that addresses several security vulnerabilities and bug fixes identified in v2.1.1. This update focuses on enhancing the stability and security of Poweradmin without modifying the database structure.","title":"Overview"},{"location":"upgrading/v2.1.2/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v2.1.2/#security-improvements","text":"Fixed cross-site scripting (XSS) vulnerabilities in zone and record management forms Patched SQL injection vulnerabilities in search functionality Enhanced input validation for all form submissions Improved session handling and security Better sanitization of user input throughout the application","title":"Security Improvements"},{"location":"upgrading/v2.1.2/#bug-fixes","text":"Resolved issues with special characters in DNS record content Fixed pagination in zone listing for large DNS installations Corrected display issues with certain record types Addressed browser compatibility problems Fixed JavaScript errors affecting record editing functionality Corrected sorting problems in zone and record listings Improved error messages for better user guidance","title":"Bug Fixes"},{"location":"upgrading/v2.1.2/#usability-improvements","text":"Enhanced form validation with more informative error messages Improved handling of internationalized domain names Better compatibility with various PowerDNS versions Optimized database queries for improved performance Updated language translations","title":"Usability Improvements"},{"location":"upgrading/v2.1.2/#notes","text":"No database schema changes are required for this update This release maintains full backward compatibility with v2.1.1 The update is recommended for all users due to security improvements Users running versions earlier than v2.1.1 should first upgrade to v2.1.1 before proceeding to v2.1.2","title":"Notes"},{"location":"upgrading/v2.1.3/","text":"Upgrading to v2.1.3 Overview Version 2.1.3 is a maintenance release that addresses several security vulnerabilities and bug fixes discovered after the v2.1.2 release. This patch update enhances stability and security without introducing breaking changes. Upgrade Instructions Download latest tarball from GitHub Backup your files before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup Security Improvements Fixed potential XSS vulnerabilities in zone and record forms Enhanced protection against SQL injection in search functionality Improved input validation and sanitization across the application Strengthened CSRF protection for form submissions Better handling of malformed input in DNS record processing Bug Fixes Resolved issues with special characters in DNS record content Fixed pagination problems in zone listing Corrected form validation errors for certain DNS record types Addressed browser compatibility issues, especially with older Internet Explorer versions Fixed various UI rendering issues Corrected UTF-8 encoding problems with internationalized domain names Fixed several JavaScript issues affecting the zone editing interface Additional Improvements Enhanced error handling and user feedback Improved compatibility with different PHP versions Optimized database queries for better performance Better handling of zones with large numbers of records Updated translations for several languages Notes No database schema changes are required for this update This release maintains full backward compatibility with v2.1.2 The update is strongly recommended for all users due to security improvements Users upgrading from versions earlier than v2.1.2 should first upgrade to v2.1.2 before proceeding to v2.1.3","title":"v2.1.3"},{"location":"upgrading/v2.1.3/#upgrading-to-v213","text":"","title":"Upgrading to v2.1.3"},{"location":"upgrading/v2.1.3/#overview","text":"Version 2.1.3 is a maintenance release that addresses several security vulnerabilities and bug fixes discovered after the v2.1.2 release. This patch update enhances stability and security without introducing breaking changes.","title":"Overview"},{"location":"upgrading/v2.1.3/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v2.1.3/#security-improvements","text":"Fixed potential XSS vulnerabilities in zone and record forms Enhanced protection against SQL injection in search functionality Improved input validation and sanitization across the application Strengthened CSRF protection for form submissions Better handling of malformed input in DNS record processing","title":"Security Improvements"},{"location":"upgrading/v2.1.3/#bug-fixes","text":"Resolved issues with special characters in DNS record content Fixed pagination problems in zone listing Corrected form validation errors for certain DNS record types Addressed browser compatibility issues, especially with older Internet Explorer versions Fixed various UI rendering issues Corrected UTF-8 encoding problems with internationalized domain names Fixed several JavaScript issues affecting the zone editing interface","title":"Bug Fixes"},{"location":"upgrading/v2.1.3/#additional-improvements","text":"Enhanced error handling and user feedback Improved compatibility with different PHP versions Optimized database queries for better performance Better handling of zones with large numbers of records Updated translations for several languages","title":"Additional Improvements"},{"location":"upgrading/v2.1.3/#notes","text":"No database schema changes are required for this update This release maintains full backward compatibility with v2.1.2 The update is strongly recommended for all users due to security improvements Users upgrading from versions earlier than v2.1.2 should first upgrade to v2.1.2 before proceeding to v2.1.3","title":"Notes"},{"location":"upgrading/v2.1.4/","text":"Upgrading to v2.1.4 Overview Version 2.1.4 is a maintenance release focusing on security improvements and better handling of reverse DNS zones. Upgrade Instructions Download latest tarball from GitHub Backup old files, replace everything with content from downloaded file From backup restore only inc/config.inc.php Update database structure: MySQL CREATE TABLE `zone_templ` ( `id` int(11) NOT NULL auto_increment, `name` varchar(128) NOT NULL, `descr` text NOT NULL, `owner` int(11) NOT NULL, PRIMARY KEY (id) ); CREATE TABLE `zone_templ_records` ( `id` int(11) NOT NULL auto_increment, `zone_templ_id` int(11) NOT NULL, `name` varchar(255) NOT NULL, `type` varchar(6) NOT NULL, `content` varchar(255) NOT NULL, `ttl` int(11) NOT NULL, `prio` int(11) NOT NULL, PRIMARY KEY (id) ); PostgreSQL CREATE TABLE zone_templ ( id SERIAL PRIMARY KEY, name varchar(128) NOT NULL, descr text NOT NULL, owner integer default 0 ); CREATE TABLE zone_templ_records ( id SERIAL PRIMARY KEY, zone_templ_id integer NOT NULL, name varchar(255) NOT NULL, type varchar(6) NOT NULL, content varchar(255) NOT NULL, ttl integer default NULL, prio integer default NULL );","title":"v2.1.4"},{"location":"upgrading/v2.1.4/#upgrading-to-v214","text":"","title":"Upgrading to v2.1.4"},{"location":"upgrading/v2.1.4/#overview","text":"Version 2.1.4 is a maintenance release focusing on security improvements and better handling of reverse DNS zones.","title":"Overview"},{"location":"upgrading/v2.1.4/#upgrade-instructions","text":"Download latest tarball from GitHub Backup old files, replace everything with content from downloaded file From backup restore only inc/config.inc.php Update database structure:","title":"Upgrade Instructions"},{"location":"upgrading/v2.1.4/#mysql","text":"CREATE TABLE `zone_templ` ( `id` int(11) NOT NULL auto_increment, `name` varchar(128) NOT NULL, `descr` text NOT NULL, `owner` int(11) NOT NULL, PRIMARY KEY (id) ); CREATE TABLE `zone_templ_records` ( `id` int(11) NOT NULL auto_increment, `zone_templ_id` int(11) NOT NULL, `name` varchar(255) NOT NULL, `type` varchar(6) NOT NULL, `content` varchar(255) NOT NULL, `ttl` int(11) NOT NULL, `prio` int(11) NOT NULL, PRIMARY KEY (id) );","title":"MySQL"},{"location":"upgrading/v2.1.4/#postgresql","text":"CREATE TABLE zone_templ ( id SERIAL PRIMARY KEY, name varchar(128) NOT NULL, descr text NOT NULL, owner integer default 0 ); CREATE TABLE zone_templ_records ( id SERIAL PRIMARY KEY, zone_templ_id integer NOT NULL, name varchar(255) NOT NULL, type varchar(6) NOT NULL, content varchar(255) NOT NULL, ttl integer default NULL, prio integer default NULL );","title":"PostgreSQL"},{"location":"upgrading/v2.1.5/","text":"Upgrading to v2.1.5 Overview Version 2.1.5 adds improved LDAP integration and fixes several issues related to user management and zone permissions. Upgrade Instructions Download latest tarball from GitHub Backup old files, replace everything with content from downloaded file From backup restore only inc/config.inc.php Update database structure: MySQL ALTER TABLE `zones` ADD `zone_templ_id` INT( 11 ) NOT NULL; ALTER TABLE zones ENGINE = InnoDB; ALTER TABLE zone_templ ENGINE = InnoDB; ALTER TABLE zone_templ_records ENGINE = InnoDB; PostgreSQL ALTER TABLE zones ADD zone_templ_id INT DEFAULT NULL;","title":"v2.1.5"},{"location":"upgrading/v2.1.5/#upgrading-to-v215","text":"","title":"Upgrading to v2.1.5"},{"location":"upgrading/v2.1.5/#overview","text":"Version 2.1.5 adds improved LDAP integration and fixes several issues related to user management and zone permissions.","title":"Overview"},{"location":"upgrading/v2.1.5/#upgrade-instructions","text":"Download latest tarball from GitHub Backup old files, replace everything with content from downloaded file From backup restore only inc/config.inc.php Update database structure:","title":"Upgrade Instructions"},{"location":"upgrading/v2.1.5/#mysql","text":"ALTER TABLE `zones` ADD `zone_templ_id` INT( 11 ) NOT NULL; ALTER TABLE zones ENGINE = InnoDB; ALTER TABLE zone_templ ENGINE = InnoDB; ALTER TABLE zone_templ_records ENGINE = InnoDB;","title":"MySQL"},{"location":"upgrading/v2.1.5/#postgresql","text":"ALTER TABLE zones ADD zone_templ_id INT DEFAULT NULL;","title":"PostgreSQL"},{"location":"upgrading/v2.1.6/","text":"Upgrading to v2.1.6 Overview Version 2.1.6 focuses on performance improvements and adds better support for record types and search functionality. Upgrade Instructions Download latest tarball from GitHub Backup old files, replace everything with content from downloaded file From backup restore only inc/config.inc.php Update database structure: MySQL ALTER TABLE users MODIFY username VARCHAR(64) NOT NULL DEFAULT '0'; ALTER TABLE users MODIFY password VARCHAR(128) NOT NULL DEFAULT '0'; PostgreSQL ALTER TABLE users ALTER COLUMN username TYPE VARCHAR(64); ALTER TABLE users ALTER COLUMN password TYPE VARCHAR(128);","title":"v2.1.6"},{"location":"upgrading/v2.1.6/#upgrading-to-v216","text":"","title":"Upgrading to v2.1.6"},{"location":"upgrading/v2.1.6/#overview","text":"Version 2.1.6 focuses on performance improvements and adds better support for record types and search functionality.","title":"Overview"},{"location":"upgrading/v2.1.6/#upgrade-instructions","text":"Download latest tarball from GitHub Backup old files, replace everything with content from downloaded file From backup restore only inc/config.inc.php Update database structure:","title":"Upgrade Instructions"},{"location":"upgrading/v2.1.6/#mysql","text":"ALTER TABLE users MODIFY username VARCHAR(64) NOT NULL DEFAULT '0'; ALTER TABLE users MODIFY password VARCHAR(128) NOT NULL DEFAULT '0';","title":"MySQL"},{"location":"upgrading/v2.1.6/#postgresql","text":"ALTER TABLE users ALTER COLUMN username TYPE VARCHAR(64); ALTER TABLE users ALTER COLUMN password TYPE VARCHAR(128);","title":"PostgreSQL"},{"location":"upgrading/v2.1.7/","text":"Upgrading to v2.1.7 Overview Version 2.1.7 introduces several bug fixes and usability improvements, particularly for zone management and DNSSEC handling. Upgrade Instructions Download latest tarball from GitHub Backup old files, replace everything with content from downloaded file From backup restore only inc/config.inc.php Backup your database Update database structure Note: There is a possibility that this script will not work correctly, so instead use migration script from version 2.2.1. Execute migration script http://YOUR_HOSTNAME/migrations/201405302318_add_relations_to_zone_templates.php. Later you can remove this file. MySQL Read some notes on migration to InnoDB Migration ALTER TABLE users ADD use_ldap BOOLEAN NOT NULL; ALTER TABLE users ENGINE=InnoDB; ALTER TABLE perm_items ENGINE=InnoDB; ALTER TABLE perm_templ ENGINE=InnoDB; ALTER TABLE perm_templ_items ENGINE=InnoDB; ALTER TABLE zones ENGINE=InnoDB; ALTER TABLE zone_templ ENGINE=InnoDB; ALTER TABLE zone_templ_records ENGINE=InnoDB; ALTER TABLE domainmetadata ENGINE=InnoDB; ALTER TABLE cryptokeys ENGINE=InnoDB; ALTER TABLE tsigkeys ENGINE=InnoDB; ALTER TABLE domains ENGINE=InnoDB; ALTER TABLE records ENGINE=InnoDB; ALTER TABLE supermasters ENGINE=InnoDB; CREATE TABLE records_zone_templ ( domain_id INTEGER NOT NULL, record_id INTEGER NOT NULL, zone_templ_id INTEGER NOT NULL ) ENGINE=InnoDB DEFAULT CHARSET=latin1; CREATE TABLE migrations ( version VARCHAR(255) NOT NULL, apply_time INTEGER NOT NULL ) ENGINE=InnoDB DEFAULT CHARSET=latin1; PostgreSQL ALTER TABLE users ADD COLUMN use_ldap smallint NOT NULL DEFAULT 0; CREATE TABLE records_zone_templ ( domain_id integer NOT NULL, record_id integer NOT NULL, zone_templ_id integer NOT NULL ); CREATE TABLE migrations ( version varchar(255) NOT NULL, apply_time integer NOT NULL ); SQLite ALTER TABLE users ADD use_ldap BOOLEAN NOT NULL DEFAULT 0; CREATE TABLE records_zone_templ ( domain_id int(11) NOT NULL, record_id int(11) NOT NULL, zone_templ_id int(11) NOT NULL ); CREATE TABLE migrations ( version varchar(255) NOT NULL, apply_time int(11) NOT NULL );","title":"v2.1.7"},{"location":"upgrading/v2.1.7/#upgrading-to-v217","text":"","title":"Upgrading to v2.1.7"},{"location":"upgrading/v2.1.7/#overview","text":"Version 2.1.7 introduces several bug fixes and usability improvements, particularly for zone management and DNSSEC handling.","title":"Overview"},{"location":"upgrading/v2.1.7/#upgrade-instructions","text":"Download latest tarball from GitHub Backup old files, replace everything with content from downloaded file From backup restore only inc/config.inc.php Backup your database Update database structure Note: There is a possibility that this script will not work correctly, so instead use migration script from version 2.2.1. Execute migration script http://YOUR_HOSTNAME/migrations/201405302318_add_relations_to_zone_templates.php. Later you can remove this file.","title":"Upgrade Instructions"},{"location":"upgrading/v2.1.7/#mysql","text":"Read some notes on migration to InnoDB Migration ALTER TABLE users ADD use_ldap BOOLEAN NOT NULL; ALTER TABLE users ENGINE=InnoDB; ALTER TABLE perm_items ENGINE=InnoDB; ALTER TABLE perm_templ ENGINE=InnoDB; ALTER TABLE perm_templ_items ENGINE=InnoDB; ALTER TABLE zones ENGINE=InnoDB; ALTER TABLE zone_templ ENGINE=InnoDB; ALTER TABLE zone_templ_records ENGINE=InnoDB; ALTER TABLE domainmetadata ENGINE=InnoDB; ALTER TABLE cryptokeys ENGINE=InnoDB; ALTER TABLE tsigkeys ENGINE=InnoDB; ALTER TABLE domains ENGINE=InnoDB; ALTER TABLE records ENGINE=InnoDB; ALTER TABLE supermasters ENGINE=InnoDB; CREATE TABLE records_zone_templ ( domain_id INTEGER NOT NULL, record_id INTEGER NOT NULL, zone_templ_id INTEGER NOT NULL ) ENGINE=InnoDB DEFAULT CHARSET=latin1; CREATE TABLE migrations ( version VARCHAR(255) NOT NULL, apply_time INTEGER NOT NULL ) ENGINE=InnoDB DEFAULT CHARSET=latin1;","title":"MySQL"},{"location":"upgrading/v2.1.7/#postgresql","text":"ALTER TABLE users ADD COLUMN use_ldap smallint NOT NULL DEFAULT 0; CREATE TABLE records_zone_templ ( domain_id integer NOT NULL, record_id integer NOT NULL, zone_templ_id integer NOT NULL ); CREATE TABLE migrations ( version varchar(255) NOT NULL, apply_time integer NOT NULL );","title":"PostgreSQL"},{"location":"upgrading/v2.1.7/#sqlite","text":"ALTER TABLE users ADD use_ldap BOOLEAN NOT NULL DEFAULT 0; CREATE TABLE records_zone_templ ( domain_id int(11) NOT NULL, record_id int(11) NOT NULL, zone_templ_id int(11) NOT NULL ); CREATE TABLE migrations ( version varchar(255) NOT NULL, apply_time int(11) NOT NULL );","title":"SQLite"},{"location":"upgrading/v2.1.8/","text":"Upgrading to v2.1.8 Overview Version 2.1.8 includes security improvements and minor bugfixes. This is a maintenance release that focuses on security enhancements and code quality improvements. Detailed upgrade instructions will be added later.","title":"v2.1.8"},{"location":"upgrading/v2.1.8/#upgrading-to-v218","text":"","title":"Upgrading to v2.1.8"},{"location":"upgrading/v2.1.8/#overview","text":"Version 2.1.8 includes security improvements and minor bugfixes. This is a maintenance release that focuses on security enhancements and code quality improvements. Detailed upgrade instructions will be added later.","title":"Overview"},{"location":"upgrading/v2.1.9/","text":"Upgrading to v2.1.9 Overview Version 2.1.9 introduces additional DNSSEC configuration options and zone type defaults, along with various bug fixes and performance improvements. Upgrade Instructions Download latest tarball from GitHub Backup all files before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup Configuration Updates The following new configuration options are available in v2.1.9: // In your inc/config.inc.php: // Set default zone type for new zones (MASTER or NATIVE) $dns_zone_type_default = 'MASTER'; // Enable DNSSEC debugging $dnssec_debug = false; No database schema changes are required for this update. Notes This release adds support for configuring the default zone type when creating new zones DNSSEC debugging can now be enabled for troubleshooting DNSSEC-related issues Various bug fixes and performance improvements are included in this release","title":"v2.1.9"},{"location":"upgrading/v2.1.9/#upgrading-to-v219","text":"","title":"Upgrading to v2.1.9"},{"location":"upgrading/v2.1.9/#overview","text":"Version 2.1.9 introduces additional DNSSEC configuration options and zone type defaults, along with various bug fixes and performance improvements.","title":"Overview"},{"location":"upgrading/v2.1.9/#upgrade-instructions","text":"Download latest tarball from GitHub Backup all files before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v2.1.9/#configuration-updates","text":"The following new configuration options are available in v2.1.9: // In your inc/config.inc.php: // Set default zone type for new zones (MASTER or NATIVE) $dns_zone_type_default = 'MASTER'; // Enable DNSSEC debugging $dnssec_debug = false; No database schema changes are required for this update.","title":"Configuration Updates"},{"location":"upgrading/v2.1.9/#notes","text":"This release adds support for configuring the default zone type when creating new zones DNSSEC debugging can now be enabled for troubleshooting DNSSEC-related issues Various bug fixes and performance improvements are included in this release","title":"Notes"},{"location":"upgrading/v2.2.0/","text":"Upgrading to v2.2.0 Overview Version 2.2.0 introduces database structure improvements, user interface enhancements, and several new features to improve DNS zone management. Upgrade Instructions Download latest tarball from GitHub Backup all files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup Update database structure: MySQL -- Database structure improvements ALTER TABLE perm_templ_items MODIFY templ_id int(11) NOT NULL; ALTER TABLE perm_templ_items MODIFY perm_id int(11) NOT NULL; ALTER TABLE zones MODIFY id int(11) NOT NULL AUTO_INCREMENT; ALTER TABLE zones MODIFY domain_id int(11) NOT NULL; ALTER TABLE zones MODIFY owner int(11) NOT NULL; ALTER TABLE zones MODIFY zone_templ_id int(11) NOT NULL; PostgreSQL For PostgreSQL users, similar changes are recommended to ensure proper field types and constraints. Configuration Updates The following new configuration options are available in v2.2.0: // In your inc/config.inc.php: // Enable or disable showing zone comments in the UI $show_zone_comments = true; // New default SOA record settings $soa_refresh = 28800; // 8 hours $soa_retry = 7200; // 2 hours $soa_expire = 604800; // 1 week $soa_minimum = 86400; // 24 hours New Features Improved support for zone comments management Enhanced default SOA record settings Database performance optimizations User interface improvements Bug fixes and stability improvements Notes Review all configuration options after upgrade to ensure they match your requirements The database structure changes improve data integrity and performance If you had customized templates or styles, you may need to reapply your changes","title":"v2.2.0"},{"location":"upgrading/v2.2.0/#upgrading-to-v220","text":"","title":"Upgrading to v2.2.0"},{"location":"upgrading/v2.2.0/#overview","text":"Version 2.2.0 introduces database structure improvements, user interface enhancements, and several new features to improve DNS zone management.","title":"Overview"},{"location":"upgrading/v2.2.0/#upgrade-instructions","text":"Download latest tarball from GitHub Backup all files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup Update database structure:","title":"Upgrade Instructions"},{"location":"upgrading/v2.2.0/#mysql","text":"-- Database structure improvements ALTER TABLE perm_templ_items MODIFY templ_id int(11) NOT NULL; ALTER TABLE perm_templ_items MODIFY perm_id int(11) NOT NULL; ALTER TABLE zones MODIFY id int(11) NOT NULL AUTO_INCREMENT; ALTER TABLE zones MODIFY domain_id int(11) NOT NULL; ALTER TABLE zones MODIFY owner int(11) NOT NULL; ALTER TABLE zones MODIFY zone_templ_id int(11) NOT NULL;","title":"MySQL"},{"location":"upgrading/v2.2.0/#postgresql","text":"For PostgreSQL users, similar changes are recommended to ensure proper field types and constraints.","title":"PostgreSQL"},{"location":"upgrading/v2.2.0/#configuration-updates","text":"The following new configuration options are available in v2.2.0: // In your inc/config.inc.php: // Enable or disable showing zone comments in the UI $show_zone_comments = true; // New default SOA record settings $soa_refresh = 28800; // 8 hours $soa_retry = 7200; // 2 hours $soa_expire = 604800; // 1 week $soa_minimum = 86400; // 24 hours","title":"Configuration Updates"},{"location":"upgrading/v2.2.0/#new-features","text":"Improved support for zone comments management Enhanced default SOA record settings Database performance optimizations User interface improvements Bug fixes and stability improvements","title":"New Features"},{"location":"upgrading/v2.2.0/#notes","text":"Review all configuration options after upgrade to ensure they match your requirements The database structure changes improve data integrity and performance If you had customized templates or styles, you may need to reapply your changes","title":"Notes"},{"location":"upgrading/v2.2.1/","text":"Upgrading to v2.2.1 Overview Version 2.2.1 is a maintenance release that provides bug fixes, security improvements, and minor enhancements to the Poweradmin interface. Upgrade Instructions Download latest tarball from GitHub Backup all files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup Bug Fixes and Improvements Fixed various security vulnerabilities Improved error handling for database connections Enhanced input validation for DNS records Updated translations with latest corrections Fixed UI rendering issues in various browsers Optimized database queries for better performance Addressed compatibility issues with PowerDNS 4.x Notes No database schema changes are required for this update This release maintains backward compatibility with v2.2.0 If you are upgrading from a version earlier than v2.2.0, please first upgrade to v2.2.0 before proceeding to v2.2.1","title":"v2.2.1"},{"location":"upgrading/v2.2.1/#upgrading-to-v221","text":"","title":"Upgrading to v2.2.1"},{"location":"upgrading/v2.2.1/#overview","text":"Version 2.2.1 is a maintenance release that provides bug fixes, security improvements, and minor enhancements to the Poweradmin interface.","title":"Overview"},{"location":"upgrading/v2.2.1/#upgrade-instructions","text":"Download latest tarball from GitHub Backup all files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v2.2.1/#bug-fixes-and-improvements","text":"Fixed various security vulnerabilities Improved error handling for database connections Enhanced input validation for DNS records Updated translations with latest corrections Fixed UI rendering issues in various browsers Optimized database queries for better performance Addressed compatibility issues with PowerDNS 4.x","title":"Bug Fixes and Improvements"},{"location":"upgrading/v2.2.1/#notes","text":"No database schema changes are required for this update This release maintains backward compatibility with v2.2.0 If you are upgrading from a version earlier than v2.2.0, please first upgrade to v2.2.0 before proceeding to v2.2.1","title":"Notes"},{"location":"upgrading/v2.2.2/","text":"Upgrading to v2.2.2 Overview Version 2.2.2 is a maintenance and security update that addresses several important issues and enhances overall stability of the Poweradmin system. Upgrade Instructions Download latest tarball from GitHub Backup all files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup Security Improvements Fixed potential XSS vulnerabilities in record editing forms Improved session handling and token validation Enhanced protection against SQL injection attacks Added input sanitization for user and zone management Strengthened CSRF protection mechanisms Bug Fixes and Improvements Fixed issues with record type validation for certain DNS record types Addressed performance issues with large zone databases Improved compatibility with PowerDNS 4.3+ Enhanced theme consistency across all pages Fixed several UI bugs in the zone editing interface Updated language translations with latest corrections Notes No database schema changes are required for this update This release maintains backward compatibility with v2.2.1 If you are upgrading from a version earlier than v2.2.0, please first upgrade to v2.2.0 before proceeding to v2.2.2 Review your custom templates if you have any, as some template structure may have changed","title":"v2.2.2"},{"location":"upgrading/v2.2.2/#upgrading-to-v222","text":"","title":"Upgrading to v2.2.2"},{"location":"upgrading/v2.2.2/#overview","text":"Version 2.2.2 is a maintenance and security update that addresses several important issues and enhances overall stability of the Poweradmin system.","title":"Overview"},{"location":"upgrading/v2.2.2/#upgrade-instructions","text":"Download latest tarball from GitHub Backup all files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file (inc/config.inc.php) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v2.2.2/#security-improvements","text":"Fixed potential XSS vulnerabilities in record editing forms Improved session handling and token validation Enhanced protection against SQL injection attacks Added input sanitization for user and zone management Strengthened CSRF protection mechanisms","title":"Security Improvements"},{"location":"upgrading/v2.2.2/#bug-fixes-and-improvements","text":"Fixed issues with record type validation for certain DNS record types Addressed performance issues with large zone databases Improved compatibility with PowerDNS 4.3+ Enhanced theme consistency across all pages Fixed several UI bugs in the zone editing interface Updated language translations with latest corrections","title":"Bug Fixes and Improvements"},{"location":"upgrading/v2.2.2/#notes","text":"No database schema changes are required for this update This release maintains backward compatibility with v2.2.1 If you are upgrading from a version earlier than v2.2.0, please first upgrade to v2.2.0 before proceeding to v2.2.2 Review your custom templates if you have any, as some template structure may have changed","title":"Notes"},{"location":"upgrading/v3.0.0/","text":"Upgrading to v3.0.0 Overview Version 3.0.0 is a major release that introduces significant architectural changes, modernizing the Poweradmin codebase and enhancing security, usability, and performance. This upgrade requires careful attention due to substantial changes in the application structure. Upgrade Instructions Download latest tarball from GitHub Make a full backup of your files and database before proceeding Replace all files with content from the downloaded archive Important : Your old configuration file (inc/config.inc.php) will not be compatible with v3.0.0 Create a new configuration file at inc/config.inc.php using the provided settings.defaults.php as a template Transfer your old configuration values from your previous inc/config.inc.php to the new format Update database structure: MySQL CREATE TABLE `log_users` ( `id` int(11) NOT NULL AUTO_INCREMENT, `event` varchar(2048) NOT NULL, `created_at` timestamp NOT NULL DEFAULT current_timestamp(), `priority` int(11) NOT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB; CREATE TABLE `log_zones` ( `id` int(11) NOT NULL AUTO_INCREMENT, `event` varchar(2048) NOT NULL, `created_at` timestamp NOT NULL DEFAULT current_timestamp(), `priority` int(11) NOT NULL, `zone_id` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB; PostgreSQL and SQLite Similar tables need to be created for PostgreSQL and SQLite databases. See the SQL files in the sql/ directory for the exact syntax. Major Changes Architecture Completely refactored codebase with modern MVC architecture Adopted PSR-4 autoloading and PHP namespaces Implemented dependency injection for better maintainability Added Twig templating engine for views New routing system with controller-based request handling Configuration New structured configuration format in inc/config.inc.php Enhanced security options including password policies Default password encryption changed to bcrypt Session security improvements with token validation Features New logging system with database support Two display options for index page: cards or list view Improved DNSSEC support and management Enhanced database logging for zone and record changes Improved user interface and experience Breaking Changes Configuration Format : The configuration format has changed completely. You must manually transfer your settings to the new format. File Structure : The application file structure has been reorganized: inc/ directory is mostly deprecated New lib/ directory contains application code New config/ directory holds configuration files Templates moved to templates/ directory Password Encryption : Default encryption method changed to bcrypt. Existing passwords will continue to work but new passwords will use the new method. Custom Themes/Templates : If you had custom templates, they need to be redone for the new templating system. Notes This is a major version upgrade that includes substantial changes to the codebase Plan for adequate testing time before deploying to production For complex installations, consider setting up a test environment first Review all configuration options carefully to ensure secure settings","title":"v3.0.0"},{"location":"upgrading/v3.0.0/#upgrading-to-v300","text":"","title":"Upgrading to v3.0.0"},{"location":"upgrading/v3.0.0/#overview","text":"Version 3.0.0 is a major release that introduces significant architectural changes, modernizing the Poweradmin codebase and enhancing security, usability, and performance. This upgrade requires careful attention due to substantial changes in the application structure.","title":"Overview"},{"location":"upgrading/v3.0.0/#upgrade-instructions","text":"Download latest tarball from GitHub Make a full backup of your files and database before proceeding Replace all files with content from the downloaded archive Important : Your old configuration file (inc/config.inc.php) will not be compatible with v3.0.0 Create a new configuration file at inc/config.inc.php using the provided settings.defaults.php as a template Transfer your old configuration values from your previous inc/config.inc.php to the new format Update database structure:","title":"Upgrade Instructions"},{"location":"upgrading/v3.0.0/#mysql","text":"CREATE TABLE `log_users` ( `id` int(11) NOT NULL AUTO_INCREMENT, `event` varchar(2048) NOT NULL, `created_at` timestamp NOT NULL DEFAULT current_timestamp(), `priority` int(11) NOT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB; CREATE TABLE `log_zones` ( `id` int(11) NOT NULL AUTO_INCREMENT, `event` varchar(2048) NOT NULL, `created_at` timestamp NOT NULL DEFAULT current_timestamp(), `priority` int(11) NOT NULL, `zone_id` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB;","title":"MySQL"},{"location":"upgrading/v3.0.0/#postgresql-and-sqlite","text":"Similar tables need to be created for PostgreSQL and SQLite databases. See the SQL files in the sql/ directory for the exact syntax.","title":"PostgreSQL and SQLite"},{"location":"upgrading/v3.0.0/#major-changes","text":"","title":"Major Changes"},{"location":"upgrading/v3.0.0/#architecture","text":"Completely refactored codebase with modern MVC architecture Adopted PSR-4 autoloading and PHP namespaces Implemented dependency injection for better maintainability Added Twig templating engine for views New routing system with controller-based request handling","title":"Architecture"},{"location":"upgrading/v3.0.0/#configuration","text":"New structured configuration format in inc/config.inc.php Enhanced security options including password policies Default password encryption changed to bcrypt Session security improvements with token validation","title":"Configuration"},{"location":"upgrading/v3.0.0/#features","text":"New logging system with database support Two display options for index page: cards or list view Improved DNSSEC support and management Enhanced database logging for zone and record changes Improved user interface and experience","title":"Features"},{"location":"upgrading/v3.0.0/#breaking-changes","text":"Configuration Format : The configuration format has changed completely. You must manually transfer your settings to the new format. File Structure : The application file structure has been reorganized: inc/ directory is mostly deprecated New lib/ directory contains application code New config/ directory holds configuration files Templates moved to templates/ directory Password Encryption : Default encryption method changed to bcrypt. Existing passwords will continue to work but new passwords will use the new method. Custom Themes/Templates : If you had custom templates, they need to be redone for the new templating system.","title":"Breaking Changes"},{"location":"upgrading/v3.0.0/#notes","text":"This is a major version upgrade that includes substantial changes to the codebase Plan for adequate testing time before deploying to production For complex installations, consider setting up a test environment first Review all configuration options carefully to ensure secure settings","title":"Notes"},{"location":"upgrading/v3.1.0/","text":"Upgrading to v3.1.0 Overview Version 3.1.0 is a maintenance and enhancement release that builds on the modern architecture introduced in v3.0.0. This update primarily focuses on user interface improvements and system stability. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Add the following new configuration option to your inc/config.inc.php file: 'interface' => [ // ... existing configuration ... 'index_display' => 'cards', // Options: 'cards', 'list' // ... existing configuration ... ], New Features User Interface Improvements Added new \"index_display\" option for configuring the main interface view Two display modes now available: 'cards': Modern card-based layout for zones and records (default) 'list': Traditional list view for zones and records Enhanced visual design and responsiveness Improved compatibility with various screen sizes and browsers System Improvements Performance optimizations for zone listing and record display Enhanced error handling and user feedback Improved browser compatibility Updated dependencies to latest versions Bug Fixes Fixed various UI rendering issues in the zone editor Addressed compatibility issues with certain PowerDNS versions Improved form validation and error messages Fixed session handling edge cases Notes No database schema changes are required for this update This release is fully compatible with v3.0.0 configuration files, with the addition of the new index_display option Users upgrading from versions prior to v3.0.0 should first upgrade to v3.0.0 before proceeding to v3.1.0","title":"v3.1.0"},{"location":"upgrading/v3.1.0/#upgrading-to-v310","text":"","title":"Upgrading to v3.1.0"},{"location":"upgrading/v3.1.0/#overview","text":"Version 3.1.0 is a maintenance and enhancement release that builds on the modern architecture introduced in v3.0.0. This update primarily focuses on user interface improvements and system stability.","title":"Overview"},{"location":"upgrading/v3.1.0/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Add the following new configuration option to your inc/config.inc.php file: 'interface' => [ // ... existing configuration ... 'index_display' => 'cards', // Options: 'cards', 'list' // ... existing configuration ... ],","title":"Upgrade Instructions"},{"location":"upgrading/v3.1.0/#new-features","text":"","title":"New Features"},{"location":"upgrading/v3.1.0/#user-interface-improvements","text":"Added new \"index_display\" option for configuring the main interface view Two display modes now available: 'cards': Modern card-based layout for zones and records (default) 'list': Traditional list view for zones and records Enhanced visual design and responsiveness Improved compatibility with various screen sizes and browsers","title":"User Interface Improvements"},{"location":"upgrading/v3.1.0/#system-improvements","text":"Performance optimizations for zone listing and record display Enhanced error handling and user feedback Improved browser compatibility Updated dependencies to latest versions","title":"System Improvements"},{"location":"upgrading/v3.1.0/#bug-fixes","text":"Fixed various UI rendering issues in the zone editor Addressed compatibility issues with certain PowerDNS versions Improved form validation and error messages Fixed session handling edge cases","title":"Bug Fixes"},{"location":"upgrading/v3.1.0/#notes","text":"No database schema changes are required for this update This release is fully compatible with v3.0.0 configuration files, with the addition of the new index_display option Users upgrading from versions prior to v3.0.0 should first upgrade to v3.0.0 before proceeding to v3.1.0","title":"Notes"},{"location":"upgrading/v3.2.0/","text":"Upgrading to v3.2.0 Overview Version 3.2.0 introduces a comprehensive logging system for tracking user and zone changes, enhances the user interface with multiple display options, and improves overall system security through better audit trails. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Update database structure based on your database type: MySQL CREATE TABLE `log_users` ( `id` int(11) NOT NULL AUTO_INCREMENT, `event` varchar(2048) NOT NULL, `created_at` timestamp NOT NULL DEFAULT current_timestamp(), `priority` int(11) NOT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB; CREATE TABLE `log_zones` ( `id` int(11) NOT NULL AUTO_INCREMENT, `event` varchar(2048) NOT NULL, `created_at` timestamp NOT NULL DEFAULT current_timestamp(), `priority` int(11) NOT NULL, `zone_id` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB; PostgreSQL CREATE SEQUENCE log_users_id_seq INCREMENT 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1; CREATE TABLE \"log_users\" ( \"id\" integer DEFAULT nextval('log_users_id_seq') NOT NULL, \"event\" character varying(2048), \"created_at\" timestamp DEFAULT CURRENT_TIMESTAMP, \"priority\" integer, CONSTRAINT \"log_users_pkey\" PRIMARY KEY (\"id\") ) WITH (oids = false); CREATE SEQUENCE log_zones_id_seq INCREMENT 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1; CREATE TABLE \"log_zones\" ( \"id\" integer DEFAULT nextval('log_zones_id_seq') NOT NULL, \"event\" character varying(2048), \"created_at\" timestamp DEFAULT CURRENT_TIMESTAMP, \"priority\" integer, \"zone_id\" integer, CONSTRAINT \"log_zones_pkey\" PRIMARY KEY (\"id\") ) WITH (oids = false); SQLite CREATE TABLE log_users (id integer PRIMARY KEY, event VARCHAR(2048) NOT NULL, created_at timestamp DEFAULT current_timestamp, priority integer NOT NULL); CREATE TABLE log_zones (id integer PRIMARY KEY, event VARCHAR(2048) NOT NULL, created_at timestamp DEFAULT current_timestamp, priority integer NOT NULL, zone_id integer); Add the following new configuration options to your inc/config.inc.php file: 'interface' => [ // ... existing configuration ... 'index_display' => 'cards', // Options: 'cards', 'list' (added in 3.2.0) // ... existing configuration ... ], 'logging' => [ // ... existing configuration ... 'database_enabled' => false, // Enable logging zone and record changes to the database (added in 3.2.0) // ... existing configuration ... ], New Features Database Logging System Comprehensive activity logging for user actions and zone changes New tables for storing user and zone logs with timestamps Administrative interface for viewing, searching, and filtering logs Zone logs include references to specific zones for targeted filtering User logs track authentication and user management activities User Interface Improvements Two display modes for the main dashboard: 'cards': Modern card-based layout (default) 'list': Traditional list view New log viewing interfaces for administrators Enhanced navigation and user experience Security Enhancements Improved audit trail capabilities for security monitoring Better tracking of user authentication attempts Detailed logging of zone and record modifications Only users with administrative privileges can access log views Notes Database logging is disabled by default. Enable it in the configuration if needed. Older logs will not be available after upgrade - only new activity will be logged. Regular database maintenance may be needed if logs accumulate in high-traffic environments. Consider implementing a log rotation policy for long-term use.","title":"v3.2.0"},{"location":"upgrading/v3.2.0/#upgrading-to-v320","text":"","title":"Upgrading to v3.2.0"},{"location":"upgrading/v3.2.0/#overview","text":"Version 3.2.0 introduces a comprehensive logging system for tracking user and zone changes, enhances the user interface with multiple display options, and improves overall system security through better audit trails.","title":"Overview"},{"location":"upgrading/v3.2.0/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Update database structure based on your database type:","title":"Upgrade Instructions"},{"location":"upgrading/v3.2.0/#mysql","text":"CREATE TABLE `log_users` ( `id` int(11) NOT NULL AUTO_INCREMENT, `event` varchar(2048) NOT NULL, `created_at` timestamp NOT NULL DEFAULT current_timestamp(), `priority` int(11) NOT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB; CREATE TABLE `log_zones` ( `id` int(11) NOT NULL AUTO_INCREMENT, `event` varchar(2048) NOT NULL, `created_at` timestamp NOT NULL DEFAULT current_timestamp(), `priority` int(11) NOT NULL, `zone_id` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB;","title":"MySQL"},{"location":"upgrading/v3.2.0/#postgresql","text":"CREATE SEQUENCE log_users_id_seq INCREMENT 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1; CREATE TABLE \"log_users\" ( \"id\" integer DEFAULT nextval('log_users_id_seq') NOT NULL, \"event\" character varying(2048), \"created_at\" timestamp DEFAULT CURRENT_TIMESTAMP, \"priority\" integer, CONSTRAINT \"log_users_pkey\" PRIMARY KEY (\"id\") ) WITH (oids = false); CREATE SEQUENCE log_zones_id_seq INCREMENT 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1; CREATE TABLE \"log_zones\" ( \"id\" integer DEFAULT nextval('log_zones_id_seq') NOT NULL, \"event\" character varying(2048), \"created_at\" timestamp DEFAULT CURRENT_TIMESTAMP, \"priority\" integer, \"zone_id\" integer, CONSTRAINT \"log_zones_pkey\" PRIMARY KEY (\"id\") ) WITH (oids = false);","title":"PostgreSQL"},{"location":"upgrading/v3.2.0/#sqlite","text":"CREATE TABLE log_users (id integer PRIMARY KEY, event VARCHAR(2048) NOT NULL, created_at timestamp DEFAULT current_timestamp, priority integer NOT NULL); CREATE TABLE log_zones (id integer PRIMARY KEY, event VARCHAR(2048) NOT NULL, created_at timestamp DEFAULT current_timestamp, priority integer NOT NULL, zone_id integer); Add the following new configuration options to your inc/config.inc.php file: 'interface' => [ // ... existing configuration ... 'index_display' => 'cards', // Options: 'cards', 'list' (added in 3.2.0) // ... existing configuration ... ], 'logging' => [ // ... existing configuration ... 'database_enabled' => false, // Enable logging zone and record changes to the database (added in 3.2.0) // ... existing configuration ... ],","title":"SQLite"},{"location":"upgrading/v3.2.0/#new-features","text":"","title":"New Features"},{"location":"upgrading/v3.2.0/#database-logging-system","text":"Comprehensive activity logging for user actions and zone changes New tables for storing user and zone logs with timestamps Administrative interface for viewing, searching, and filtering logs Zone logs include references to specific zones for targeted filtering User logs track authentication and user management activities","title":"Database Logging System"},{"location":"upgrading/v3.2.0/#user-interface-improvements","text":"Two display modes for the main dashboard: 'cards': Modern card-based layout (default) 'list': Traditional list view New log viewing interfaces for administrators Enhanced navigation and user experience","title":"User Interface Improvements"},{"location":"upgrading/v3.2.0/#security-enhancements","text":"Improved audit trail capabilities for security monitoring Better tracking of user authentication attempts Detailed logging of zone and record modifications Only users with administrative privileges can access log views","title":"Security Enhancements"},{"location":"upgrading/v3.2.0/#notes","text":"Database logging is disabled by default. Enable it in the configuration if needed. Older logs will not be available after upgrade - only new activity will be logged. Regular database maintenance may be needed if logs accumulate in high-traffic environments. Consider implementing a log rotation policy for long-term use.","title":"Notes"},{"location":"upgrading/v3.3.0/","text":"Upgrading to v3.3.0 Overview Version 3.3.0 is a maintenance and performance release that builds on the improved architecture introduced in v3.0.0 and the logging capabilities of v3.2.0. This update focuses on enhancing stability, security, and user experience. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Improvements Performance Enhancements Optimized database queries for faster zone and record loading Improved caching mechanisms for frequently accessed data Reduced memory usage for large zone operations Enhanced page load times throughout the application User Interface Refinements Improved responsive design for better mobile compatibility Enhanced form validation and error messaging Polished visual elements for better user experience Fixed various rendering issues in different browsers Security Updates Updated dependencies to latest secure versions Enhanced input validation and sanitization Improved session handling and security Fixed potential XSS issues in various forms Bug Fixes Corrected issues with special characters in record content Fixed sorting and pagination in zone and record listings Resolved problems with DNSSEC key management Addressed compatibility issues with newer PHP versions Fixed various template rendering bugs Notes No database schema changes are required for this update This release maintains backward compatibility with v3.2.0 configuration files The performance improvements are especially noticeable on systems with many zones Users upgrading from versions prior to v3.2.0 should first upgrade to v3.2.0 before proceeding to v3.3.0","title":"v3.3.0"},{"location":"upgrading/v3.3.0/#upgrading-to-v330","text":"","title":"Upgrading to v3.3.0"},{"location":"upgrading/v3.3.0/#overview","text":"Version 3.3.0 is a maintenance and performance release that builds on the improved architecture introduced in v3.0.0 and the logging capabilities of v3.2.0. This update focuses on enhancing stability, security, and user experience.","title":"Overview"},{"location":"upgrading/v3.3.0/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v3.3.0/#improvements","text":"","title":"Improvements"},{"location":"upgrading/v3.3.0/#performance-enhancements","text":"Optimized database queries for faster zone and record loading Improved caching mechanisms for frequently accessed data Reduced memory usage for large zone operations Enhanced page load times throughout the application","title":"Performance Enhancements"},{"location":"upgrading/v3.3.0/#user-interface-refinements","text":"Improved responsive design for better mobile compatibility Enhanced form validation and error messaging Polished visual elements for better user experience Fixed various rendering issues in different browsers","title":"User Interface Refinements"},{"location":"upgrading/v3.3.0/#security-updates","text":"Updated dependencies to latest secure versions Enhanced input validation and sanitization Improved session handling and security Fixed potential XSS issues in various forms","title":"Security Updates"},{"location":"upgrading/v3.3.0/#bug-fixes","text":"Corrected issues with special characters in record content Fixed sorting and pagination in zone and record listings Resolved problems with DNSSEC key management Addressed compatibility issues with newer PHP versions Fixed various template rendering bugs","title":"Bug Fixes"},{"location":"upgrading/v3.3.0/#notes","text":"No database schema changes are required for this update This release maintains backward compatibility with v3.2.0 configuration files The performance improvements are especially noticeable on systems with many zones Users upgrading from versions prior to v3.2.0 should first upgrade to v3.2.0 before proceeding to v3.3.0","title":"Notes"},{"location":"upgrading/v3.4.0/","text":"Upgrading to v3.4.0 Overview Version 3.4.0 is a stability and enhancement release that continues to improve the modernized codebase introduced in v3.0.0. This update focuses on refining the user experience, strengthening security, and improving compatibility with current web standards and PowerDNS versions. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Improvements DNSSEC Management Enhanced DNSSEC key management interface Improved visualization of DNSSEC signing status Better handling of DNSSEC key rotation More informative error messages for DNSSEC operations Browser Compatibility Improved support for modern browsers Enhanced mobile responsiveness Fixed rendering issues in various browser environments Improved accessibility for users with disabilities Code Quality Refactored core components for better maintainability Enhanced error handling and reporting Improved code organization following PSR standards Updated third-party dependencies to latest stable versions Security Enhancements Strengthened protection against common web vulnerabilities Improved input validation and sanitization Enhanced session security measures Better handling of special characters in DNS records User Experience Streamlined zone and record management workflows Improved search and filtering capabilities Enhanced pagination for large zone databases Refined user interface elements for better usability Bug Fixes Resolved issues with record editing in certain scenarios Fixed sorting problems in record listings Addressed template rendering bugs Corrected various form validation issues Fixed compatibility issues with newer PHP versions Notes No database schema changes are required for this update This release maintains backward compatibility with v3.3.0 configuration files Users upgrading from versions prior to v3.2.0 should first upgrade to v3.2.0 before proceeding to v3.4.0 The improvements to DNSSEC management are particularly beneficial for users actively using DNSSEC","title":"v3.4.0"},{"location":"upgrading/v3.4.0/#upgrading-to-v340","text":"","title":"Upgrading to v3.4.0"},{"location":"upgrading/v3.4.0/#overview","text":"Version 3.4.0 is a stability and enhancement release that continues to improve the modernized codebase introduced in v3.0.0. This update focuses on refining the user experience, strengthening security, and improving compatibility with current web standards and PowerDNS versions.","title":"Overview"},{"location":"upgrading/v3.4.0/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v3.4.0/#improvements","text":"","title":"Improvements"},{"location":"upgrading/v3.4.0/#dnssec-management","text":"Enhanced DNSSEC key management interface Improved visualization of DNSSEC signing status Better handling of DNSSEC key rotation More informative error messages for DNSSEC operations","title":"DNSSEC Management"},{"location":"upgrading/v3.4.0/#browser-compatibility","text":"Improved support for modern browsers Enhanced mobile responsiveness Fixed rendering issues in various browser environments Improved accessibility for users with disabilities","title":"Browser Compatibility"},{"location":"upgrading/v3.4.0/#code-quality","text":"Refactored core components for better maintainability Enhanced error handling and reporting Improved code organization following PSR standards Updated third-party dependencies to latest stable versions","title":"Code Quality"},{"location":"upgrading/v3.4.0/#security-enhancements","text":"Strengthened protection against common web vulnerabilities Improved input validation and sanitization Enhanced session security measures Better handling of special characters in DNS records","title":"Security Enhancements"},{"location":"upgrading/v3.4.0/#user-experience","text":"Streamlined zone and record management workflows Improved search and filtering capabilities Enhanced pagination for large zone databases Refined user interface elements for better usability","title":"User Experience"},{"location":"upgrading/v3.4.0/#bug-fixes","text":"Resolved issues with record editing in certain scenarios Fixed sorting problems in record listings Addressed template rendering bugs Corrected various form validation issues Fixed compatibility issues with newer PHP versions","title":"Bug Fixes"},{"location":"upgrading/v3.4.0/#notes","text":"No database schema changes are required for this update This release maintains backward compatibility with v3.3.0 configuration files Users upgrading from versions prior to v3.2.0 should first upgrade to v3.2.0 before proceeding to v3.4.0 The improvements to DNSSEC management are particularly beneficial for users actively using DNSSEC","title":"Notes"},{"location":"upgrading/v3.4.1/","text":"Upgrading to v3.4.1 Overview Version 3.4.1 is a maintenance release that addresses several important bug fixes and security improvements discovered after the v3.4.0 release. This patch update focuses on enhancing stability, security, and installer functionality without introducing breaking changes. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Security Improvements Fixed session security with enhanced cookie handling Improved CSRF token validation for forms Enhanced input validation and sanitization Updated third-party dependencies to address security vulnerabilities Fixed potential XSS issues in various forms Bug Fixes Corrected issues with PHP extension dependency checks Fixed MySQL user creation syntax in installer Resolved installation step progression issues Improved error handling throughout the application Fixed issues with special characters in DNS records Addressed browser compatibility issues Corrected form validation and error reporting Fixed template rendering bugs in certain scenarios Installation Improvements Enhanced error handling during installation Improved database configuration validation Better feedback for configuration errors More reliable language handling during installation Code Improvements Restructured installation helpers for better maintainability Standardized database parameter handling Improved request object handling for forms Enhanced error logging and reporting Notes No database schema changes are required for this update This release maintains full backward compatibility with v3.4.0 The update is recommended for all users due to security improvements The installation process improvements only affect new installations","title":"v3.4.1"},{"location":"upgrading/v3.4.1/#upgrading-to-v341","text":"","title":"Upgrading to v3.4.1"},{"location":"upgrading/v3.4.1/#overview","text":"Version 3.4.1 is a maintenance release that addresses several important bug fixes and security improvements discovered after the v3.4.0 release. This patch update focuses on enhancing stability, security, and installer functionality without introducing breaking changes.","title":"Overview"},{"location":"upgrading/v3.4.1/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v3.4.1/#security-improvements","text":"Fixed session security with enhanced cookie handling Improved CSRF token validation for forms Enhanced input validation and sanitization Updated third-party dependencies to address security vulnerabilities Fixed potential XSS issues in various forms","title":"Security Improvements"},{"location":"upgrading/v3.4.1/#bug-fixes","text":"Corrected issues with PHP extension dependency checks Fixed MySQL user creation syntax in installer Resolved installation step progression issues Improved error handling throughout the application Fixed issues with special characters in DNS records Addressed browser compatibility issues Corrected form validation and error reporting Fixed template rendering bugs in certain scenarios","title":"Bug Fixes"},{"location":"upgrading/v3.4.1/#installation-improvements","text":"Enhanced error handling during installation Improved database configuration validation Better feedback for configuration errors More reliable language handling during installation","title":"Installation Improvements"},{"location":"upgrading/v3.4.1/#code-improvements","text":"Restructured installation helpers for better maintainability Standardized database parameter handling Improved request object handling for forms Enhanced error logging and reporting","title":"Code Improvements"},{"location":"upgrading/v3.4.1/#notes","text":"No database schema changes are required for this update This release maintains full backward compatibility with v3.4.0 The update is recommended for all users due to security improvements The installation process improvements only affect new installations","title":"Notes"},{"location":"upgrading/v3.4.2/","text":"Upgrading to v3.4.2 Overview Version 3.4.2 is a maintenance release that addresses critical bug fixes and security improvements discovered after the v3.4.1 release. This patch update focuses on enhancing stability, reliability, and resolving specific issues reported by users. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Security Improvements Further enhanced cookie handling for improved session security Fixed additional edge cases in CSRF token validation Addressed potential security vulnerabilities in form handling Updated third-party dependencies to latest secure versions Strengthened input sanitation for search and filtering functions Bug Fixes Resolved DNS record content validation issues with certain record types Fixed character encoding problems in record content display Addressed issues with zone template application under specific conditions Corrected sorting and pagination in record listings with special characters Fixed JavaScript errors in certain browsers Improved form validation feedback for users Resolved issues with PowerDNS API integration for newer versions Browser Compatibility Enhanced compatibility with latest browser versions Fixed rendering issues in mobile browsers Improved responsive design for various screen sizes Resolved CSS inconsistencies across different browsers Performance Optimizations Improved caching mechanism for frequently accessed data Optimized database queries for better performance Reduced memory usage for large zone operations Enhanced page load times for record-heavy zones Notes No database schema changes are required for this update This release maintains full backward compatibility with v3.4.1 The update is recommended for all users due to security improvements This patch version focuses solely on bug fixes and security enhancements without introducing new features","title":"v3.4.2"},{"location":"upgrading/v3.4.2/#upgrading-to-v342","text":"","title":"Upgrading to v3.4.2"},{"location":"upgrading/v3.4.2/#overview","text":"Version 3.4.2 is a maintenance release that addresses critical bug fixes and security improvements discovered after the v3.4.1 release. This patch update focuses on enhancing stability, reliability, and resolving specific issues reported by users.","title":"Overview"},{"location":"upgrading/v3.4.2/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v3.4.2/#security-improvements","text":"Further enhanced cookie handling for improved session security Fixed additional edge cases in CSRF token validation Addressed potential security vulnerabilities in form handling Updated third-party dependencies to latest secure versions Strengthened input sanitation for search and filtering functions","title":"Security Improvements"},{"location":"upgrading/v3.4.2/#bug-fixes","text":"Resolved DNS record content validation issues with certain record types Fixed character encoding problems in record content display Addressed issues with zone template application under specific conditions Corrected sorting and pagination in record listings with special characters Fixed JavaScript errors in certain browsers Improved form validation feedback for users Resolved issues with PowerDNS API integration for newer versions","title":"Bug Fixes"},{"location":"upgrading/v3.4.2/#browser-compatibility","text":"Enhanced compatibility with latest browser versions Fixed rendering issues in mobile browsers Improved responsive design for various screen sizes Resolved CSS inconsistencies across different browsers","title":"Browser Compatibility"},{"location":"upgrading/v3.4.2/#performance-optimizations","text":"Improved caching mechanism for frequently accessed data Optimized database queries for better performance Reduced memory usage for large zone operations Enhanced page load times for record-heavy zones","title":"Performance Optimizations"},{"location":"upgrading/v3.4.2/#notes","text":"No database schema changes are required for this update This release maintains full backward compatibility with v3.4.1 The update is recommended for all users due to security improvements This patch version focuses solely on bug fixes and security enhancements without introducing new features","title":"Notes"},{"location":"upgrading/v3.5.0/","text":"Upgrading to v3.5.0 Overview Version 3.5.0 introduces several important improvements to the Poweradmin platform, focusing on enhancing zone template functionality, improving user experience, and strengthening overall system security. This minor version update builds on the bug fixes from v3.4.2 while adding new features. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Review new configuration options and add them to your settings file as needed New Features and Improvements Enhanced Zone Templates Expanded zone template functionality with better validation Improved template application to existing zones Enhanced template record management interface Support for more complex record configurations in templates User Interface Enhancements New configurable display options for zone listings Improved record management forms with better layout Enhanced navigation and information architecture Better feedback for user actions and form validations PowerDNS Integration Improved compatibility with latest PowerDNS versions Enhanced DNSSEC key management and visualization Better support for PowerDNS-specific record types Improved error handling for API communications Search and Filtering Enhanced search functionality for zones and records Improved filtering options for large zone databases Better performance for search operations More intuitive search interface and results display Security Improvements Strengthened authentication mechanisms Enhanced protection against common web vulnerabilities Improved session management and security Better handling of special characters in DNS records Performance Optimizations Improved caching mechanisms for frequently accessed data Optimized database queries for better performance Reduced memory usage for large zone operations Enhanced page load times throughout the application Bug Fixes Resolved issues with special characters in DNS records Fixed template application problems in certain scenarios Corrected pagination issues in zone and record listings Addressed various UI rendering bugs in different browsers Fixed multiple form validation and submission issues Notes No database schema changes are required for this update This release maintains backward compatibility with v3.4.2 configuration files Users upgrading from versions prior to v3.4.0 should first upgrade incrementally If you have customized templates, review them against the new versions as some structure may have changed","title":"v3.5.0"},{"location":"upgrading/v3.5.0/#upgrading-to-v350","text":"","title":"Upgrading to v3.5.0"},{"location":"upgrading/v3.5.0/#overview","text":"Version 3.5.0 introduces several important improvements to the Poweradmin platform, focusing on enhancing zone template functionality, improving user experience, and strengthening overall system security. This minor version update builds on the bug fixes from v3.4.2 while adding new features.","title":"Overview"},{"location":"upgrading/v3.5.0/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Review new configuration options and add them to your settings file as needed","title":"Upgrade Instructions"},{"location":"upgrading/v3.5.0/#new-features-and-improvements","text":"","title":"New Features and Improvements"},{"location":"upgrading/v3.5.0/#enhanced-zone-templates","text":"Expanded zone template functionality with better validation Improved template application to existing zones Enhanced template record management interface Support for more complex record configurations in templates","title":"Enhanced Zone Templates"},{"location":"upgrading/v3.5.0/#user-interface-enhancements","text":"New configurable display options for zone listings Improved record management forms with better layout Enhanced navigation and information architecture Better feedback for user actions and form validations","title":"User Interface Enhancements"},{"location":"upgrading/v3.5.0/#powerdns-integration","text":"Improved compatibility with latest PowerDNS versions Enhanced DNSSEC key management and visualization Better support for PowerDNS-specific record types Improved error handling for API communications","title":"PowerDNS Integration"},{"location":"upgrading/v3.5.0/#search-and-filtering","text":"Enhanced search functionality for zones and records Improved filtering options for large zone databases Better performance for search operations More intuitive search interface and results display","title":"Search and Filtering"},{"location":"upgrading/v3.5.0/#security-improvements","text":"Strengthened authentication mechanisms Enhanced protection against common web vulnerabilities Improved session management and security Better handling of special characters in DNS records","title":"Security Improvements"},{"location":"upgrading/v3.5.0/#performance-optimizations","text":"Improved caching mechanisms for frequently accessed data Optimized database queries for better performance Reduced memory usage for large zone operations Enhanced page load times throughout the application","title":"Performance Optimizations"},{"location":"upgrading/v3.5.0/#bug-fixes","text":"Resolved issues with special characters in DNS records Fixed template application problems in certain scenarios Corrected pagination issues in zone and record listings Addressed various UI rendering bugs in different browsers Fixed multiple form validation and submission issues","title":"Bug Fixes"},{"location":"upgrading/v3.5.0/#notes","text":"No database schema changes are required for this update This release maintains backward compatibility with v3.4.2 configuration files Users upgrading from versions prior to v3.4.0 should first upgrade incrementally If you have customized templates, review them against the new versions as some structure may have changed","title":"Notes"},{"location":"upgrading/v3.5.1/","text":"Upgrading to v3.5.1 Overview Version 3.5.1 is a maintenance release that addresses several bugs and security issues discovered after the v3.5.0 release. This patch update focuses on enhancing stability, security, and resolving specific issues reported by users without introducing breaking changes. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Security Improvements Fixed potential XSS vulnerabilities in zone template management Enhanced CSRF token validation for specific forms Improved input sanitization for search and filtering functions Updated third-party dependencies to address security vulnerabilities Strengthened validation of DNS record content Bug Fixes Resolved issues with special characters in template zone records Fixed pagination issues in zones with large numbers of records Corrected form validation for certain DNS record types Addressed browser compatibility issues with newer browser versions Fixed JavaScript errors in the zone template editing interface Resolved UI rendering inconsistencies in the dark theme Fixed session handling edge cases that could cause unexpected logouts Performance Optimizations Improved caching behavior for template data Optimized database queries for better performance with large zone databases Reduced memory usage for complex operations Enhanced page loading times for record-heavy zones Browser Compatibility Fixed rendering issues in latest Chrome and Firefox versions Improved responsive design behavior on mobile devices Addressed CSS inconsistencies in various browsers Enhanced keyboard navigation and accessibility Notes No database schema changes are required for this update This release maintains full backward compatibility with v3.5.0 The update is recommended for all users due to security improvements This patch version focuses solely on bug fixes and security enhancements without introducing new features","title":"v3.5.1"},{"location":"upgrading/v3.5.1/#upgrading-to-v351","text":"","title":"Upgrading to v3.5.1"},{"location":"upgrading/v3.5.1/#overview","text":"Version 3.5.1 is a maintenance release that addresses several bugs and security issues discovered after the v3.5.0 release. This patch update focuses on enhancing stability, security, and resolving specific issues reported by users without introducing breaking changes.","title":"Overview"},{"location":"upgrading/v3.5.1/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v3.5.1/#security-improvements","text":"Fixed potential XSS vulnerabilities in zone template management Enhanced CSRF token validation for specific forms Improved input sanitization for search and filtering functions Updated third-party dependencies to address security vulnerabilities Strengthened validation of DNS record content","title":"Security Improvements"},{"location":"upgrading/v3.5.1/#bug-fixes","text":"Resolved issues with special characters in template zone records Fixed pagination issues in zones with large numbers of records Corrected form validation for certain DNS record types Addressed browser compatibility issues with newer browser versions Fixed JavaScript errors in the zone template editing interface Resolved UI rendering inconsistencies in the dark theme Fixed session handling edge cases that could cause unexpected logouts","title":"Bug Fixes"},{"location":"upgrading/v3.5.1/#performance-optimizations","text":"Improved caching behavior for template data Optimized database queries for better performance with large zone databases Reduced memory usage for complex operations Enhanced page loading times for record-heavy zones","title":"Performance Optimizations"},{"location":"upgrading/v3.5.1/#browser-compatibility","text":"Fixed rendering issues in latest Chrome and Firefox versions Improved responsive design behavior on mobile devices Addressed CSS inconsistencies in various browsers Enhanced keyboard navigation and accessibility","title":"Browser Compatibility"},{"location":"upgrading/v3.5.1/#notes","text":"No database schema changes are required for this update This release maintains full backward compatibility with v3.5.0 The update is recommended for all users due to security improvements This patch version focuses solely on bug fixes and security enhancements without introducing new features","title":"Notes"},{"location":"upgrading/v3.6.0/","text":"Upgrading to v3.6.0 Overview Version 3.6.0 introduces several new features and enhancements to Poweradmin, focusing on improved usability, advanced DNS management, and enhanced security. This minor version update builds upon the stability improvements in v3.5.1 while adding new functionality. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Review new configuration options and add them to your settings file as needed New Features and Improvements Advanced Zone Management Enhanced bulk operations for DNS records Improved zone cloning functionality Advanced search and filtering capabilities for large DNS installations Better handling of internationalized domain names Enhanced zone template system with more flexible record definitions PowerDNS Integration Improved compatibility with latest PowerDNS versions Better support for PowerDNS-specific record types and features Enhanced API integration for remote PowerDNS servers More detailed error reporting for PowerDNS operations Improved DNSSEC key management and visualization User Interface Enhancements Redesigned zone editing interface for improved usability Enhanced responsive design for better mobile compatibility Improved accessibility features New customizable dashboard views Better organization of administrative functions Enhanced dark mode theme with improved contrast Security Improvements Enhanced authentication system with more secure defaults Improved protection against common web vulnerabilities Better session management and security Enhanced input validation and sanitization Strengthened CSRF protections across the application Performance Optimizations Improved caching mechanisms for frequently accessed data Optimized database queries for better performance with large zone databases Reduced memory usage for complex operations Enhanced page loading times throughout the application Better handling of zones with large numbers of records Bug Fixes Resolved issues with special characters in DNS records Fixed pagination problems in zone listings Corrected form validation errors for certain DNS record types Addressed browser compatibility issues Fixed JavaScript errors in various interfaces Corrected UI rendering issues in both light and dark themes Notes No database schema changes are required for this update This release maintains backward compatibility with v3.5.1 configuration New configuration options are optional with sensible defaults Consider reviewing your permission templates after upgrade as some new features may require additional permissions Users upgrading from versions prior to v3.5.0 should first upgrade to v3.5.0 or v3.5.1 before proceeding to v3.6.0","title":"v3.6.0"},{"location":"upgrading/v3.6.0/#upgrading-to-v360","text":"","title":"Upgrading to v3.6.0"},{"location":"upgrading/v3.6.0/#overview","text":"Version 3.6.0 introduces several new features and enhancements to Poweradmin, focusing on improved usability, advanced DNS management, and enhanced security. This minor version update builds upon the stability improvements in v3.5.1 while adding new functionality.","title":"Overview"},{"location":"upgrading/v3.6.0/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Review new configuration options and add them to your settings file as needed","title":"Upgrade Instructions"},{"location":"upgrading/v3.6.0/#new-features-and-improvements","text":"","title":"New Features and Improvements"},{"location":"upgrading/v3.6.0/#advanced-zone-management","text":"Enhanced bulk operations for DNS records Improved zone cloning functionality Advanced search and filtering capabilities for large DNS installations Better handling of internationalized domain names Enhanced zone template system with more flexible record definitions","title":"Advanced Zone Management"},{"location":"upgrading/v3.6.0/#powerdns-integration","text":"Improved compatibility with latest PowerDNS versions Better support for PowerDNS-specific record types and features Enhanced API integration for remote PowerDNS servers More detailed error reporting for PowerDNS operations Improved DNSSEC key management and visualization","title":"PowerDNS Integration"},{"location":"upgrading/v3.6.0/#user-interface-enhancements","text":"Redesigned zone editing interface for improved usability Enhanced responsive design for better mobile compatibility Improved accessibility features New customizable dashboard views Better organization of administrative functions Enhanced dark mode theme with improved contrast","title":"User Interface Enhancements"},{"location":"upgrading/v3.6.0/#security-improvements","text":"Enhanced authentication system with more secure defaults Improved protection against common web vulnerabilities Better session management and security Enhanced input validation and sanitization Strengthened CSRF protections across the application","title":"Security Improvements"},{"location":"upgrading/v3.6.0/#performance-optimizations","text":"Improved caching mechanisms for frequently accessed data Optimized database queries for better performance with large zone databases Reduced memory usage for complex operations Enhanced page loading times throughout the application Better handling of zones with large numbers of records","title":"Performance Optimizations"},{"location":"upgrading/v3.6.0/#bug-fixes","text":"Resolved issues with special characters in DNS records Fixed pagination problems in zone listings Corrected form validation errors for certain DNS record types Addressed browser compatibility issues Fixed JavaScript errors in various interfaces Corrected UI rendering issues in both light and dark themes","title":"Bug Fixes"},{"location":"upgrading/v3.6.0/#notes","text":"No database schema changes are required for this update This release maintains backward compatibility with v3.5.1 configuration New configuration options are optional with sensible defaults Consider reviewing your permission templates after upgrade as some new features may require additional permissions Users upgrading from versions prior to v3.5.0 should first upgrade to v3.5.0 or v3.5.1 before proceeding to v3.6.0","title":"Notes"},{"location":"upgrading/v3.6.1/","text":"Upgrading to v3.6.1 Overview Version 3.6.1 is a maintenance release that addresses several bugs and security issues discovered after the v3.6.0 release. This patch update focuses on enhancing stability, security, and fixing specific issues reported by users without introducing breaking changes. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Security Improvements Fixed potential XSS vulnerabilities in zone template interface Enhanced CSRF token validation for record management forms Improved input sanitization for search and filtering functions Updated third-party dependencies to address security vulnerabilities Strengthened validation for DNS record content, particularly for TXT and SPF records Bug Fixes Resolved issues with special characters in DNS record content Fixed bulk operations functionality for certain record types Corrected pagination issues in zones with large numbers of records Addressed browser compatibility issues with newer browser versions Fixed JavaScript errors in the advanced zone management interface Resolved UI rendering inconsistencies in the dark theme Fixed issues with the zone cloning functionality Corrected problems with internationalized domain name handling PowerDNS Integration Fixes Resolved API connectivity issues with specific PowerDNS versions Fixed DNSSEC key visualization in certain browser environments Corrected error handling for PowerDNS API operations Addressed compatibility issues with PowerDNS configuration settings Performance Optimizations Improved caching behavior for frequently accessed data Optimized database queries for better performance with large zone databases Reduced memory usage for complex zone operations Enhanced page loading times throughout the application Notes No database schema changes are required for this update This release maintains full backward compatibility with v3.6.0 The update is recommended for all users due to security improvements This patch version focuses solely on bug fixes and security enhancements without introducing new features","title":"v3.6.1"},{"location":"upgrading/v3.6.1/#upgrading-to-v361","text":"","title":"Upgrading to v3.6.1"},{"location":"upgrading/v3.6.1/#overview","text":"Version 3.6.1 is a maintenance release that addresses several bugs and security issues discovered after the v3.6.0 release. This patch update focuses on enhancing stability, security, and fixing specific issues reported by users without introducing breaking changes.","title":"Overview"},{"location":"upgrading/v3.6.1/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v3.6.1/#security-improvements","text":"Fixed potential XSS vulnerabilities in zone template interface Enhanced CSRF token validation for record management forms Improved input sanitization for search and filtering functions Updated third-party dependencies to address security vulnerabilities Strengthened validation for DNS record content, particularly for TXT and SPF records","title":"Security Improvements"},{"location":"upgrading/v3.6.1/#bug-fixes","text":"Resolved issues with special characters in DNS record content Fixed bulk operations functionality for certain record types Corrected pagination issues in zones with large numbers of records Addressed browser compatibility issues with newer browser versions Fixed JavaScript errors in the advanced zone management interface Resolved UI rendering inconsistencies in the dark theme Fixed issues with the zone cloning functionality Corrected problems with internationalized domain name handling","title":"Bug Fixes"},{"location":"upgrading/v3.6.1/#powerdns-integration-fixes","text":"Resolved API connectivity issues with specific PowerDNS versions Fixed DNSSEC key visualization in certain browser environments Corrected error handling for PowerDNS API operations Addressed compatibility issues with PowerDNS configuration settings","title":"PowerDNS Integration Fixes"},{"location":"upgrading/v3.6.1/#performance-optimizations","text":"Improved caching behavior for frequently accessed data Optimized database queries for better performance with large zone databases Reduced memory usage for complex zone operations Enhanced page loading times throughout the application","title":"Performance Optimizations"},{"location":"upgrading/v3.6.1/#notes","text":"No database schema changes are required for this update This release maintains full backward compatibility with v3.6.0 The update is recommended for all users due to security improvements This patch version focuses solely on bug fixes and security enhancements without introducing new features","title":"Notes"},{"location":"upgrading/v3.7.0/","text":"Upgrading to v3.7.0 Overview Version 3.7.0 introduces significant improvements to Poweradmin's DNSSEC management capabilities through integration with the PowerDNS API. This update modernizes DNSSEC operations, moving away from command-line tools to a more reliable and secure API-based approach. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Add the following new configuration options to your inc/config.inc.php file: 'pdns_api' => [ 'url' => '', // PowerDNS API URL, e.g., 'http://127.0.0.1:8081' 'key' => '', // PowerDNS API key ], PowerDNS API Setup To use the new API-based DNSSEC management: Configure your PowerDNS server to enable the API: Edit your PowerDNS configuration (typically /etc/powerdns/pdns.conf ) Set api=yes to enable the API Set api-key=your-secret-key to secure the API Configure webserver-address and webserver-port as needed Restart PowerDNS to apply changes Add the API details to your Poweradmin configuration: Set the URL to your PowerDNS API (e.g., http://127.0.0.1:8081 ) Set the API key to match the one configured in PowerDNS New Features and Improvements PowerDNS API Integration Modern API-based management of DNSSEC operations More reliable and secure than command-line based approach Better error handling and feedback for DNSSEC operations Enhanced compatibility with newer versions of PowerDNS Support for remote PowerDNS servers (not just local instances) DNSSEC Management Improvements Improved key management interface Better visualization of DNSSEC signing status Enhanced error reporting for DNSSEC operations More reliable key rotation and management Simplified setup and configuration process User Interface Enhancements Improved DNSSEC management screens Better feedback for DNSSEC operations Enhanced zone listing with more detailed DNSSEC status More intuitive DNSSEC setup workflow Security Improvements More secure approach to DNSSEC management using API authentication Reduced reliance on command-line tools and system permissions Better isolation between Poweradmin and PowerDNS server Enhanced input validation for DNSSEC operations Additional Fixes Fixed various bugs and issues from v3.6.1 Improved browser compatibility Enhanced error handling throughout the application Fixed UI rendering issues in various sections Performance improvements for common operations Updated third-party dependencies to latest secure versions Notes No database schema changes are required for this update The older command-line based DNSSEC management will still work if you don't configure the API Using the PowerDNS API is strongly recommended for better security and reliability Review your firewall settings if using a remote PowerDNS server to ensure API access This update significantly improves DNSSEC management but requires PowerDNS to be configured for API access","title":"v3.7.0"},{"location":"upgrading/v3.7.0/#upgrading-to-v370","text":"","title":"Upgrading to v3.7.0"},{"location":"upgrading/v3.7.0/#overview","text":"Version 3.7.0 introduces significant improvements to Poweradmin's DNSSEC management capabilities through integration with the PowerDNS API. This update modernizes DNSSEC operations, moving away from command-line tools to a more reliable and secure API-based approach.","title":"Overview"},{"location":"upgrading/v3.7.0/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Add the following new configuration options to your inc/config.inc.php file: 'pdns_api' => [ 'url' => '', // PowerDNS API URL, e.g., 'http://127.0.0.1:8081' 'key' => '', // PowerDNS API key ],","title":"Upgrade Instructions"},{"location":"upgrading/v3.7.0/#powerdns-api-setup","text":"To use the new API-based DNSSEC management: Configure your PowerDNS server to enable the API: Edit your PowerDNS configuration (typically /etc/powerdns/pdns.conf ) Set api=yes to enable the API Set api-key=your-secret-key to secure the API Configure webserver-address and webserver-port as needed Restart PowerDNS to apply changes Add the API details to your Poweradmin configuration: Set the URL to your PowerDNS API (e.g., http://127.0.0.1:8081 ) Set the API key to match the one configured in PowerDNS","title":"PowerDNS API Setup"},{"location":"upgrading/v3.7.0/#new-features-and-improvements","text":"","title":"New Features and Improvements"},{"location":"upgrading/v3.7.0/#powerdns-api-integration","text":"Modern API-based management of DNSSEC operations More reliable and secure than command-line based approach Better error handling and feedback for DNSSEC operations Enhanced compatibility with newer versions of PowerDNS Support for remote PowerDNS servers (not just local instances)","title":"PowerDNS API Integration"},{"location":"upgrading/v3.7.0/#dnssec-management-improvements","text":"Improved key management interface Better visualization of DNSSEC signing status Enhanced error reporting for DNSSEC operations More reliable key rotation and management Simplified setup and configuration process","title":"DNSSEC Management Improvements"},{"location":"upgrading/v3.7.0/#user-interface-enhancements","text":"Improved DNSSEC management screens Better feedback for DNSSEC operations Enhanced zone listing with more detailed DNSSEC status More intuitive DNSSEC setup workflow","title":"User Interface Enhancements"},{"location":"upgrading/v3.7.0/#security-improvements","text":"More secure approach to DNSSEC management using API authentication Reduced reliance on command-line tools and system permissions Better isolation between Poweradmin and PowerDNS server Enhanced input validation for DNSSEC operations","title":"Security Improvements"},{"location":"upgrading/v3.7.0/#additional-fixes","text":"Fixed various bugs and issues from v3.6.1 Improved browser compatibility Enhanced error handling throughout the application Fixed UI rendering issues in various sections Performance improvements for common operations Updated third-party dependencies to latest secure versions","title":"Additional Fixes"},{"location":"upgrading/v3.7.0/#notes","text":"No database schema changes are required for this update The older command-line based DNSSEC management will still work if you don't configure the API Using the PowerDNS API is strongly recommended for better security and reliability Review your firewall settings if using a remote PowerDNS server to ensure API access This update significantly improves DNSSEC management but requires PowerDNS to be configured for API access","title":"Notes"},{"location":"upgrading/v3.8.0/","text":"Upgrading to v3.8.0 Overview Version 3.8.0 introduces several new configuration options and features to enhance the usability and flexibility of Poweradmin. Key improvements include support for separate PowerDNS databases, configurable language options, and enhanced search functionality. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Add the following new configuration options to your inc/config.inc.php file: 'database' => [ // ... existing database configuration ... 'pdns_db_name' => 'powerdns', // Separate database for PowerDNS (experimental) ], 'interface' => [ // ... existing interface configuration ... 'enabled_languages' => 'cs_CZ,de_DE,en_EN,fr_FR,it_IT,ja_JP,lt_LT,nb_NO,nl_NL,pl_PL,ru_RU,tr_TR,zh_CN', 'search_group_records' => false, // Group records by name and content in search results ], New Features and Improvements Separate PowerDNS Database Support New experimental feature to connect to PowerDNS tables in a separate database Allows using different database credentials for Poweradmin and PowerDNS Configure via the pdns_db_name option in the database settings Useful for enhanced security or when PowerDNS is managed by a different team Tables are automatically prefixed with the database name when this feature is enabled Enhanced Language Configuration New enabled_languages setting to specify which languages are available to users Language selector on login page only appears when multiple languages are enabled Default includes all available translations: Czech, German, English, French, Italian, Japanese, Lithuanian, Norwegian, Dutch, Polish, Russian, Turkish, and Chinese Improved locale handling with better session integration Better user experience for international deployments Search Result Grouping Added option to group search results by record name and content Reduces duplicate entries in search results for large DNS deployments Configure via the search_group_records option in interface settings Particularly useful for zones with many similar records Enhances readability of search results Additional Improvements Updated search interface with better filtering and organization Improved language selection in the user interface Enhanced error handling and user feedback Various bug fixes and performance improvements Security updates and dependency upgrades Notes No database schema changes are required for this update The separate PowerDNS database feature is marked as experimental - test thoroughly before using in production All new configuration options have sensible defaults if not specified If you have customized templates, review them after upgrade as some interface elements may have changed This release maintains backward compatibility with v3.7.0 configuration","title":"v3.8.0"},{"location":"upgrading/v3.8.0/#upgrading-to-v380","text":"","title":"Upgrading to v3.8.0"},{"location":"upgrading/v3.8.0/#overview","text":"Version 3.8.0 introduces several new configuration options and features to enhance the usability and flexibility of Poweradmin. Key improvements include support for separate PowerDNS databases, configurable language options, and enhanced search functionality.","title":"Overview"},{"location":"upgrading/v3.8.0/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Add the following new configuration options to your inc/config.inc.php file: 'database' => [ // ... existing database configuration ... 'pdns_db_name' => 'powerdns', // Separate database for PowerDNS (experimental) ], 'interface' => [ // ... existing interface configuration ... 'enabled_languages' => 'cs_CZ,de_DE,en_EN,fr_FR,it_IT,ja_JP,lt_LT,nb_NO,nl_NL,pl_PL,ru_RU,tr_TR,zh_CN', 'search_group_records' => false, // Group records by name and content in search results ],","title":"Upgrade Instructions"},{"location":"upgrading/v3.8.0/#new-features-and-improvements","text":"","title":"New Features and Improvements"},{"location":"upgrading/v3.8.0/#separate-powerdns-database-support","text":"New experimental feature to connect to PowerDNS tables in a separate database Allows using different database credentials for Poweradmin and PowerDNS Configure via the pdns_db_name option in the database settings Useful for enhanced security or when PowerDNS is managed by a different team Tables are automatically prefixed with the database name when this feature is enabled","title":"Separate PowerDNS Database Support"},{"location":"upgrading/v3.8.0/#enhanced-language-configuration","text":"New enabled_languages setting to specify which languages are available to users Language selector on login page only appears when multiple languages are enabled Default includes all available translations: Czech, German, English, French, Italian, Japanese, Lithuanian, Norwegian, Dutch, Polish, Russian, Turkish, and Chinese Improved locale handling with better session integration Better user experience for international deployments","title":"Enhanced Language Configuration"},{"location":"upgrading/v3.8.0/#search-result-grouping","text":"Added option to group search results by record name and content Reduces duplicate entries in search results for large DNS deployments Configure via the search_group_records option in interface settings Particularly useful for zones with many similar records Enhances readability of search results","title":"Search Result Grouping"},{"location":"upgrading/v3.8.0/#additional-improvements","text":"Updated search interface with better filtering and organization Improved language selection in the user interface Enhanced error handling and user feedback Various bug fixes and performance improvements Security updates and dependency upgrades","title":"Additional Improvements"},{"location":"upgrading/v3.8.0/#notes","text":"No database schema changes are required for this update The separate PowerDNS database feature is marked as experimental - test thoroughly before using in production All new configuration options have sensible defaults if not specified If you have customized templates, review them after upgrade as some interface elements may have changed This release maintains backward compatibility with v3.7.0 configuration","title":"Notes"},{"location":"upgrading/v3.8.1/","text":"Upgrading to v3.8.1 Overview Version 3.8.1 is a maintenance release that addresses several bugs and issues discovered in the v3.8.0 release. This patch update focuses on enhancing stability, security, and resolving specific issues with the new features introduced in v3.8.0. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Bug Fixes and Improvements Separate PowerDNS Database Fixes Fixed parameter name inconsistencies in database configuration Improved error handling for connections to separate PowerDNS databases Optimized SQL queries when accessing tables across different databases Enhanced performance for operations involving joins between Poweradmin and PowerDNS tables Fixed edge cases where database prefixing was incorrectly applied Language System Improvements Resolved session persistence issues with language preferences Enhanced validation of the enabled_languages configuration option Fixed browser language detection compatibility issues Improved fallback behavior when configured languages are unavailable Corrected character encoding issues in certain language files Search Functionality Enhancements Fixed incorrect record counts when using the search grouping feature Optimized SQL queries for grouped search results Resolved pagination issues when using record grouping Improved memory usage for large search result sets Enhanced handling of special characters in search queries Security Improvements Fixed potential XSS vulnerabilities in record display and edit forms Enhanced CSRF token validation throughout the application Improved input sanitization for user-supplied data Updated third-party dependencies to address security vulnerabilities Strengthened validation for DNS record content Browser Compatibility Fixed CSS rendering issues in latest browser versions Resolved JavaScript errors in the record management interfaces Improved mobile responsiveness throughout the application Enhanced keyboard navigation and accessibility Fixed UI rendering inconsistencies in various browsers Performance Optimizations Improved caching behavior for frequently accessed data Optimized database queries for better performance Reduced memory usage for zone listing and editing operations Enhanced page loading times throughout the application Notes No database schema changes are required for this update This release maintains full backward compatibility with v3.8.0 The update is recommended for all users, especially those using the new features introduced in v3.8.0 This patch version focuses solely on bug fixes and enhancements without introducing new features","title":"v3.8.1"},{"location":"upgrading/v3.8.1/#upgrading-to-v381","text":"","title":"Upgrading to v3.8.1"},{"location":"upgrading/v3.8.1/#overview","text":"Version 3.8.1 is a maintenance release that addresses several bugs and issues discovered in the v3.8.0 release. This patch update focuses on enhancing stability, security, and resolving specific issues with the new features introduced in v3.8.0.","title":"Overview"},{"location":"upgrading/v3.8.1/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v3.8.1/#bug-fixes-and-improvements","text":"","title":"Bug Fixes and Improvements"},{"location":"upgrading/v3.8.1/#separate-powerdns-database-fixes","text":"Fixed parameter name inconsistencies in database configuration Improved error handling for connections to separate PowerDNS databases Optimized SQL queries when accessing tables across different databases Enhanced performance for operations involving joins between Poweradmin and PowerDNS tables Fixed edge cases where database prefixing was incorrectly applied","title":"Separate PowerDNS Database Fixes"},{"location":"upgrading/v3.8.1/#language-system-improvements","text":"Resolved session persistence issues with language preferences Enhanced validation of the enabled_languages configuration option Fixed browser language detection compatibility issues Improved fallback behavior when configured languages are unavailable Corrected character encoding issues in certain language files","title":"Language System Improvements"},{"location":"upgrading/v3.8.1/#search-functionality-enhancements","text":"Fixed incorrect record counts when using the search grouping feature Optimized SQL queries for grouped search results Resolved pagination issues when using record grouping Improved memory usage for large search result sets Enhanced handling of special characters in search queries","title":"Search Functionality Enhancements"},{"location":"upgrading/v3.8.1/#security-improvements","text":"Fixed potential XSS vulnerabilities in record display and edit forms Enhanced CSRF token validation throughout the application Improved input sanitization for user-supplied data Updated third-party dependencies to address security vulnerabilities Strengthened validation for DNS record content","title":"Security Improvements"},{"location":"upgrading/v3.8.1/#browser-compatibility","text":"Fixed CSS rendering issues in latest browser versions Resolved JavaScript errors in the record management interfaces Improved mobile responsiveness throughout the application Enhanced keyboard navigation and accessibility Fixed UI rendering inconsistencies in various browsers","title":"Browser Compatibility"},{"location":"upgrading/v3.8.1/#performance-optimizations","text":"Improved caching behavior for frequently accessed data Optimized database queries for better performance Reduced memory usage for zone listing and editing operations Enhanced page loading times throughout the application","title":"Performance Optimizations"},{"location":"upgrading/v3.8.1/#notes","text":"No database schema changes are required for this update This release maintains full backward compatibility with v3.8.0 The update is recommended for all users, especially those using the new features introduced in v3.8.0 This patch version focuses solely on bug fixes and enhancements without introducing new features","title":"Notes"},{"location":"upgrading/v3.9.0/","text":"Upgrading to v3.9.0 Overview Version 3.9.0 introduces several significant improvements to Poweradmin, including enhanced security with token validation, flexible UI configuration options, improved record comments functionality, and a more robust logging system. This update also includes a database schema change to support longer content in zone template records. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Update your database schema based on the database system you're using: MySQL ALTER TABLE zone_templ_records MODIFY COLUMN content varchar(2048) NOT NULL; PostgreSQL ALTER TABLE zone_templ_records ALTER COLUMN content TYPE varchar(2048), ALTER COLUMN content SET NOT NULL; SQLite BEGIN; CREATE TABLE zone_templ_records_new ( \"id\" integer NULL PRIMARY KEY AUTOINCREMENT, \"zone_templ_id\" integer NOT NULL, \"name\" text NOT NULL, \"type\" text NOT NULL, \"content\" text(2048) NOT NULL, \"ttl\" integer NOT NULL, \"prio\" integer NOT NULL ); INSERT INTO zone_templ_records_new SELECT * FROM zone_templ_records; DROP TABLE zone_templ_records; ALTER TABLE zone_templ_records_new RENAME TO zone_templ_records; COMMIT; Add the following new configuration options to your inc/config.inc.php file: 'security' => [ // ... existing security configuration ... 'login_token_validation' => true, // Enable token validation for login form 'global_token_validation' => true, // Enable token validation for all forms ], 'interface' => [ // ... existing interface configuration ... 'show_record_id' => true, // Show record ID column in edit mode 'position_record_form_top' => false, // Position the \"Add record\" form at the top of the page 'position_save_button_top' => false, // Position the \"Save changes\" button at the top of the page 'show_record_comments' => false, // Show or hide record comments ], 'logging' => [ // ... existing logging configuration ... 'type' => 'null', // Options: 'null', 'native' 'level' => 'info', // Options: 'debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency' ], 'misc' => [ // ... existing misc configuration ... 'record_comments_sync' => false, // Enable bidirectional comment sync between A and PTR records ], New Features and Improvements Enhanced Security Added CSRF token validation for login forms to prevent cross-site request forgery attacks Added option to enable token validation for all forms throughout the application Improved security against common web vulnerabilities Enhanced protection against form-based attacks Flexible UI Configuration Option to show record ID column in edit mode for easier reference Configurable position for record add form (top or bottom of page) Configurable position for save buttons (top or bottom of page) Option to show or hide record comments in the interface Better customization of the user experience for different workflows Record Comment Management Added support for bidirectional synchronization of comments between A/AAAA and PTR records When enabled, editing a comment on an A/AAAA record automatically updates the corresponding PTR record comment Likewise, editing a PTR record comment updates the associated A/AAAA record comment Improved visibility and management of DNS record documentation Improved Logging System Implemented a more robust logging system with configurable log types Added support for different log levels (debug, info, notice, warning, error, critical, alert, emergency) Null logger for minimal performance impact when logging is not needed Native logger for more detailed logging capabilities PSR-3 compatible logging interface for better integration with monitoring tools Database Improvements Expanded zone template record content field to support longer record values (2048 characters) Better support for complex record types like TXT records with lengthy content Improved handling of DNSSEC-related records Additional Enhancements Various bug fixes and performance improvements Enhanced error handling and user feedback Updated third-party dependencies to latest secure versions Improved browser compatibility Notes Database schema changes are required for this update - make sure to run the appropriate SQL commands All new configuration options have sensible defaults if not specified The record comments synchronization feature is disabled by default Token validation is enabled by default for better security If you've customized any templates, review them after the upgrade as some interface elements may have changed","title":"v3.9.0"},{"location":"upgrading/v3.9.0/#upgrading-to-v390","text":"","title":"Upgrading to v3.9.0"},{"location":"upgrading/v3.9.0/#overview","text":"Version 3.9.0 introduces several significant improvements to Poweradmin, including enhanced security with token validation, flexible UI configuration options, improved record comments functionality, and a more robust logging system. This update also includes a database schema change to support longer content in zone template records.","title":"Overview"},{"location":"upgrading/v3.9.0/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Update your database schema based on the database system you're using:","title":"Upgrade Instructions"},{"location":"upgrading/v3.9.0/#mysql","text":"ALTER TABLE zone_templ_records MODIFY COLUMN content varchar(2048) NOT NULL;","title":"MySQL"},{"location":"upgrading/v3.9.0/#postgresql","text":"ALTER TABLE zone_templ_records ALTER COLUMN content TYPE varchar(2048), ALTER COLUMN content SET NOT NULL;","title":"PostgreSQL"},{"location":"upgrading/v3.9.0/#sqlite","text":"BEGIN; CREATE TABLE zone_templ_records_new ( \"id\" integer NULL PRIMARY KEY AUTOINCREMENT, \"zone_templ_id\" integer NOT NULL, \"name\" text NOT NULL, \"type\" text NOT NULL, \"content\" text(2048) NOT NULL, \"ttl\" integer NOT NULL, \"prio\" integer NOT NULL ); INSERT INTO zone_templ_records_new SELECT * FROM zone_templ_records; DROP TABLE zone_templ_records; ALTER TABLE zone_templ_records_new RENAME TO zone_templ_records; COMMIT; Add the following new configuration options to your inc/config.inc.php file: 'security' => [ // ... existing security configuration ... 'login_token_validation' => true, // Enable token validation for login form 'global_token_validation' => true, // Enable token validation for all forms ], 'interface' => [ // ... existing interface configuration ... 'show_record_id' => true, // Show record ID column in edit mode 'position_record_form_top' => false, // Position the \"Add record\" form at the top of the page 'position_save_button_top' => false, // Position the \"Save changes\" button at the top of the page 'show_record_comments' => false, // Show or hide record comments ], 'logging' => [ // ... existing logging configuration ... 'type' => 'null', // Options: 'null', 'native' 'level' => 'info', // Options: 'debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency' ], 'misc' => [ // ... existing misc configuration ... 'record_comments_sync' => false, // Enable bidirectional comment sync between A and PTR records ],","title":"SQLite"},{"location":"upgrading/v3.9.0/#new-features-and-improvements","text":"","title":"New Features and Improvements"},{"location":"upgrading/v3.9.0/#enhanced-security","text":"Added CSRF token validation for login forms to prevent cross-site request forgery attacks Added option to enable token validation for all forms throughout the application Improved security against common web vulnerabilities Enhanced protection against form-based attacks","title":"Enhanced Security"},{"location":"upgrading/v3.9.0/#flexible-ui-configuration","text":"Option to show record ID column in edit mode for easier reference Configurable position for record add form (top or bottom of page) Configurable position for save buttons (top or bottom of page) Option to show or hide record comments in the interface Better customization of the user experience for different workflows","title":"Flexible UI Configuration"},{"location":"upgrading/v3.9.0/#record-comment-management","text":"Added support for bidirectional synchronization of comments between A/AAAA and PTR records When enabled, editing a comment on an A/AAAA record automatically updates the corresponding PTR record comment Likewise, editing a PTR record comment updates the associated A/AAAA record comment Improved visibility and management of DNS record documentation","title":"Record Comment Management"},{"location":"upgrading/v3.9.0/#improved-logging-system","text":"Implemented a more robust logging system with configurable log types Added support for different log levels (debug, info, notice, warning, error, critical, alert, emergency) Null logger for minimal performance impact when logging is not needed Native logger for more detailed logging capabilities PSR-3 compatible logging interface for better integration with monitoring tools","title":"Improved Logging System"},{"location":"upgrading/v3.9.0/#database-improvements","text":"Expanded zone template record content field to support longer record values (2048 characters) Better support for complex record types like TXT records with lengthy content Improved handling of DNSSEC-related records","title":"Database Improvements"},{"location":"upgrading/v3.9.0/#additional-enhancements","text":"Various bug fixes and performance improvements Enhanced error handling and user feedback Updated third-party dependencies to latest secure versions Improved browser compatibility","title":"Additional Enhancements"},{"location":"upgrading/v3.9.0/#notes","text":"Database schema changes are required for this update - make sure to run the appropriate SQL commands All new configuration options have sensible defaults if not specified The record comments synchronization feature is disabled by default Token validation is enabled by default for better security If you've customized any templates, review them after the upgrade as some interface elements may have changed","title":"Notes"},{"location":"upgrading/v3.9.1/","text":"Upgrading to v3.9.1 Overview Version 3.9.1 is a maintenance release that addresses several bugs and issues discovered in the v3.9.0 release. This patch update focuses on enhancing stability, security, and fixing specific issues related to the new features introduced in v3.9.0. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Bug Fixes and Improvements CSRF Token Validation Fixes Fixed edge cases where token validation fails in certain browsers Improved token generation and validation performance Resolved issues with token expiration and renewal Fixed compatibility issues with certain proxy setups Enhanced error handling for token validation failures UI Configuration Improvements Resolved display issues when toggling between different UI configurations Fixed CSS layout problems with record form positioning Addressed inconsistencies in save button positioning Improved responsiveness of record ID column display Fixed styling issues with record comments display Record Comment Synchronization Fixes Corrected synchronization failures between A/AAAA and PTR records Improved handling of special characters in synchronized comments Fixed comment synchronization in large zones Addressed edge cases where synchronization might fail Enhanced error handling for synchronization operations Logging System Improvements Resolved file permission issues with native logging Optimized logging performance for high-load environments Fixed log level filtering bugs Improved log message formatting and consistency Enhanced error handling for logging failures Database Improvements Fixed validation issues with longer content values in zone templates Addressed edge cases with encoding of special characters in record content Improved handling of very long TXT records Optimized database queries for record template operations Security Enhancements Updated dependencies to address security vulnerabilities Fixed minor XSS issues in form displays Strengthened input validation for all form fields Improved sanitization of user-supplied data Enhanced protection against common web vulnerabilities Browser Compatibility Fixed JavaScript issues in newer browser versions Resolved CSS rendering problems across different devices Improved mobile responsiveness of form elements Enhanced keyboard accessibility for all new UI elements Fixed display issues in various screen sizes Notes No database schema changes are required for this update This release maintains full backward compatibility with v3.9.0 The update is recommended for all users due to security improvements This patch version focuses solely on bug fixes and enhancements without introducing new features","title":"v3.9.1"},{"location":"upgrading/v3.9.1/#upgrading-to-v391","text":"","title":"Upgrading to v3.9.1"},{"location":"upgrading/v3.9.1/#overview","text":"Version 3.9.1 is a maintenance release that addresses several bugs and issues discovered in the v3.9.0 release. This patch update focuses on enhancing stability, security, and fixing specific issues related to the new features introduced in v3.9.0.","title":"Overview"},{"location":"upgrading/v3.9.1/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v3.9.1/#bug-fixes-and-improvements","text":"","title":"Bug Fixes and Improvements"},{"location":"upgrading/v3.9.1/#csrf-token-validation-fixes","text":"Fixed edge cases where token validation fails in certain browsers Improved token generation and validation performance Resolved issues with token expiration and renewal Fixed compatibility issues with certain proxy setups Enhanced error handling for token validation failures","title":"CSRF Token Validation Fixes"},{"location":"upgrading/v3.9.1/#ui-configuration-improvements","text":"Resolved display issues when toggling between different UI configurations Fixed CSS layout problems with record form positioning Addressed inconsistencies in save button positioning Improved responsiveness of record ID column display Fixed styling issues with record comments display","title":"UI Configuration Improvements"},{"location":"upgrading/v3.9.1/#record-comment-synchronization-fixes","text":"Corrected synchronization failures between A/AAAA and PTR records Improved handling of special characters in synchronized comments Fixed comment synchronization in large zones Addressed edge cases where synchronization might fail Enhanced error handling for synchronization operations","title":"Record Comment Synchronization Fixes"},{"location":"upgrading/v3.9.1/#logging-system-improvements","text":"Resolved file permission issues with native logging Optimized logging performance for high-load environments Fixed log level filtering bugs Improved log message formatting and consistency Enhanced error handling for logging failures","title":"Logging System Improvements"},{"location":"upgrading/v3.9.1/#database-improvements","text":"Fixed validation issues with longer content values in zone templates Addressed edge cases with encoding of special characters in record content Improved handling of very long TXT records Optimized database queries for record template operations","title":"Database Improvements"},{"location":"upgrading/v3.9.1/#security-enhancements","text":"Updated dependencies to address security vulnerabilities Fixed minor XSS issues in form displays Strengthened input validation for all form fields Improved sanitization of user-supplied data Enhanced protection against common web vulnerabilities","title":"Security Enhancements"},{"location":"upgrading/v3.9.1/#browser-compatibility","text":"Fixed JavaScript issues in newer browser versions Resolved CSS rendering problems across different devices Improved mobile responsiveness of form elements Enhanced keyboard accessibility for all new UI elements Fixed display issues in various screen sizes","title":"Browser Compatibility"},{"location":"upgrading/v3.9.1/#notes","text":"No database schema changes are required for this update This release maintains full backward compatibility with v3.9.0 The update is recommended for all users due to security improvements This patch version focuses solely on bug fixes and enhancements without introducing new features","title":"Notes"},{"location":"upgrading/v3.9.2/","text":"Upgrading to v3.9.2 Overview Version 3.9.2 is a maintenance release that introduces TXT record formatting improvements along with various bug fixes and security enhancements. This patch update focuses on enhancing DNS record management and resolving issues discovered after the v3.9.1 release. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Add the following new configuration option to your inc/config.inc.php file: 'dns' => [ // ... existing DNS configuration ... 'txt_auto_quote' => false, // Automatically quote TXT records ], New Features and Improvements TXT Record Auto-Quoting Added new txt_auto_quote configuration option for TXT record handling When enabled, automatically adds double quotes around TXT record content if they're missing Makes TXT record management more user-friendly by handling required quoting automatically Prevents common issues with unquoted TXT records being rejected by DNS servers Applied to both regular DNS records and zone template records TXT Record Handling Improvements Enhanced validation of TXT record content Improved handling of special characters in TXT records Better support for multiline and concatenated TXT records Fixed issues with escaping and quote handling in complex TXT content More consistent display of quoted and unquoted TXT records Bug Fixes and Security Improvements Form Handling Fixed remaining edge cases in token validation Improved handling of special characters in form submissions Enhanced input validation for DNS record content Addressed issues with form positioning options Fixed display issues in the record management interface Comment Synchronization Resolved issues with record comment synchronization between reverse and forward zones Fixed edge cases in comment handling with special characters Improved performance of comment synchronization for large zones Enhanced error handling for comment sync operations Security Enhancements Updated dependencies to address security vulnerabilities Fixed potential XSS issues in record display Improved sanitization of user input Enhanced token validation robustness Browser Compatibility Fixed UI rendering issues in latest browser versions Improved mobile responsiveness Enhanced keyboard navigation for accessibility Fixed display inconsistencies across different screen sizes Performance Improvements Optimized database queries for DNS record handling Improved caching for commonly accessed data Reduced memory usage for zone listing operations Enhanced page loading times throughout the application Notes No database schema changes are required for this update The new txt_auto_quote option is disabled by default for backward compatibility This release is compatible with all configurations from v3.9.1 Enable the txt_auto_quote feature if users frequently forget to add quotes to TXT records or if you've experienced issues with unquoted TXT records The feature only adds quotes when they're completely missing and won't modify properly quoted records","title":"v3.9.2"},{"location":"upgrading/v3.9.2/#upgrading-to-v392","text":"","title":"Upgrading to v3.9.2"},{"location":"upgrading/v3.9.2/#overview","text":"Version 3.9.2 is a maintenance release that introduces TXT record formatting improvements along with various bug fixes and security enhancements. This patch update focuses on enhancing DNS record management and resolving issues discovered after the v3.9.1 release.","title":"Overview"},{"location":"upgrading/v3.9.2/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Add the following new configuration option to your inc/config.inc.php file: 'dns' => [ // ... existing DNS configuration ... 'txt_auto_quote' => false, // Automatically quote TXT records ],","title":"Upgrade Instructions"},{"location":"upgrading/v3.9.2/#new-features-and-improvements","text":"","title":"New Features and Improvements"},{"location":"upgrading/v3.9.2/#txt-record-auto-quoting","text":"Added new txt_auto_quote configuration option for TXT record handling When enabled, automatically adds double quotes around TXT record content if they're missing Makes TXT record management more user-friendly by handling required quoting automatically Prevents common issues with unquoted TXT records being rejected by DNS servers Applied to both regular DNS records and zone template records","title":"TXT Record Auto-Quoting"},{"location":"upgrading/v3.9.2/#txt-record-handling-improvements","text":"Enhanced validation of TXT record content Improved handling of special characters in TXT records Better support for multiline and concatenated TXT records Fixed issues with escaping and quote handling in complex TXT content More consistent display of quoted and unquoted TXT records","title":"TXT Record Handling Improvements"},{"location":"upgrading/v3.9.2/#bug-fixes-and-security-improvements","text":"","title":"Bug Fixes and Security Improvements"},{"location":"upgrading/v3.9.2/#form-handling","text":"Fixed remaining edge cases in token validation Improved handling of special characters in form submissions Enhanced input validation for DNS record content Addressed issues with form positioning options Fixed display issues in the record management interface","title":"Form Handling"},{"location":"upgrading/v3.9.2/#comment-synchronization","text":"Resolved issues with record comment synchronization between reverse and forward zones Fixed edge cases in comment handling with special characters Improved performance of comment synchronization for large zones Enhanced error handling for comment sync operations","title":"Comment Synchronization"},{"location":"upgrading/v3.9.2/#security-enhancements","text":"Updated dependencies to address security vulnerabilities Fixed potential XSS issues in record display Improved sanitization of user input Enhanced token validation robustness","title":"Security Enhancements"},{"location":"upgrading/v3.9.2/#browser-compatibility","text":"Fixed UI rendering issues in latest browser versions Improved mobile responsiveness Enhanced keyboard navigation for accessibility Fixed display inconsistencies across different screen sizes","title":"Browser Compatibility"},{"location":"upgrading/v3.9.2/#performance-improvements","text":"Optimized database queries for DNS record handling Improved caching for commonly accessed data Reduced memory usage for zone listing operations Enhanced page loading times throughout the application","title":"Performance Improvements"},{"location":"upgrading/v3.9.2/#notes","text":"No database schema changes are required for this update The new txt_auto_quote option is disabled by default for backward compatibility This release is compatible with all configurations from v3.9.1 Enable the txt_auto_quote feature if users frequently forget to add quotes to TXT records or if you've experienced issues with unquoted TXT records The feature only adds quotes when they're completely missing and won't modify properly quoted records","title":"Notes"},{"location":"upgrading/v3.9.3/","text":"Upgrading to v3.9.3 Overview Version 3.9.3 is a maintenance release focused on bug fixes and improvements for database compatibility and user interface functionality. This patch update resolves various issues discovered after the v3.9.2 release. Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup Bug Fixes and Improvements Database Improvements PowerDNS database prefix support : Added proper support for PowerDNS database prefixes in the \"has_similar_records\" method PostgreSQL compatibility : Improved PostgreSQL compatibility for domain pagination with complex sorting operations Domain pagination : Resolved pagination issues affecting domains with multiple owners User Interface Enhancements Case-insensitive filtering : Made letter navigation case-insensitive for zone filtering, improving user experience Notes No database schema changes are required for this update This release is compatible with all configurations from v3.9.2 Users with PowerDNS database prefixes should verify record operations work correctly PostgreSQL users should test domain listing and pagination functionality","title":"v3.9.3"},{"location":"upgrading/v3.9.3/#upgrading-to-v393","text":"","title":"Upgrading to v3.9.3"},{"location":"upgrading/v3.9.3/#overview","text":"Version 3.9.3 is a maintenance release focused on bug fixes and improvements for database compatibility and user interface functionality. This patch update resolves various issues discovered after the v3.9.2 release.","title":"Overview"},{"location":"upgrading/v3.9.3/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding Replace all files with content from the downloaded archive Restore your configuration file ( inc/config.inc.php ) from backup","title":"Upgrade Instructions"},{"location":"upgrading/v3.9.3/#bug-fixes-and-improvements","text":"","title":"Bug Fixes and Improvements"},{"location":"upgrading/v3.9.3/#database-improvements","text":"PowerDNS database prefix support : Added proper support for PowerDNS database prefixes in the \"has_similar_records\" method PostgreSQL compatibility : Improved PostgreSQL compatibility for domain pagination with complex sorting operations Domain pagination : Resolved pagination issues affecting domains with multiple owners","title":"Database Improvements"},{"location":"upgrading/v3.9.3/#user-interface-enhancements","text":"Case-insensitive filtering : Made letter navigation case-insensitive for zone filtering, improving user experience","title":"User Interface Enhancements"},{"location":"upgrading/v3.9.3/#notes","text":"No database schema changes are required for this update This release is compatible with all configurations from v3.9.2 Users with PowerDNS database prefixes should verify record operations work correctly PostgreSQL users should test domain listing and pagination functionality","title":"Notes"},{"location":"upgrading/v4.0.0/","text":"Upgrading to Version 4.0.0 Overview Version 4.0.0 represents a major update to Poweradmin with significant architectural improvements, enhanced security features, and a new configuration system. This guide will help you migrate from older versions. Key Changes Configuration file format and location have changed Database schema updates including 8 new tables for enhanced functionality New theming system with light/dark mode support Enhanced security with multi-factor authentication (MFA) Advanced account lockout and password reset features API key management system User preferences and agreements system Google reCAPTCHA integration WHOIS and RDAP lookup functionality Enhanced email system with multiple transport options Improved object-oriented architecture with proper separation of concerns Upgrade Instructions Download latest tarball from GitHub Backup your files and database before proceeding - this is especially important for a major version upgrade Replace all files with content from the downloaded archive Run the database migration (see Database Schema Updates section below) Migrate your configuration (see Configuration Changes section below) Migrating from Legacy Configuration If you're upgrading from an older version of Poweradmin (pre-4.0.0), you need to migrate your legacy configuration: php scripts/migrate-config.php This will convert your old inc/config.inc.php settings to the new config/settings.php format. Configuration Changes Old Configuration Location inc/config.inc.php New Configuration Location config/settings.php Configuration Format The configuration format has changed from direct variable assignments to a structured array format: Old Format (pre-4.0.0) $db_host = 'localhost'; $db_user = 'poweradmin'; $db_pass = 'password'; $db_name = 'powerdns'; $db_type = 'mysql'; New Format (4.0.0+) return [ 'database' => [ 'host' => 'localhost', 'user' => 'poweradmin', 'password' => 'password', 'name' => 'powerdns', 'type' => 'mysql', ], ]; Manual Migration Steps If the automatic migration script doesn't work for your setup, follow these steps: Create a new config/settings.php file Refer to config/settings.defaults.php for available options Map your old settings to the new format Test the configuration Database Schema Updates Version 4.0.0 introduces significant database schema changes including multiple new tables for enhanced security, API management, user preferences, and multi-factor authentication. New Tables Added in v4.0.0 login_attempts - Login attempt tracking for security migrations - Database migration tracking api_keys - API access management user_mfa - Multi-factor authentication support user_preferences - User preferences and settings zone_template_sync - Zone template synchronization password_reset_tokens - Password reset functionality user_agreements - User agreement tracking Database Migration Files Important : Instead of running individual SQL statements, use the dedicated migration files from the Poweradmin repository: MySQL: mysql -u [username] -p [database_name] < sql/poweradmin-mysql-update-to-4.0.0.sql Download: poweradmin-mysql-update-to-4.0.0.sql PostgreSQL: psql -U [username] -d [database_name] -f sql/poweradmin-pgsql-update-to-4.0.0.sql Download: poweradmin-pgsql-update-to-4.0.0.sql SQLite: sqlite3 [database_file] < sql/poweradmin-sqlite-update-to-4.0.0.sql Download: poweradmin-sqlite-update-to-4.0.0.sql Migration Prerequisites Note : Users upgrading from versions earlier than v3.9.0 should first upgrade to v3.9.0 and run those migrations before upgrading to v4.0.0. Verify Database Migration Completeness After running the migration, verify your database has all required tables for v4.0.0: New Tables for v4.0.0: - login_attempts - Login tracking for security - migrations - Database migration tracking - api_keys - API access management - user_mfa - Multi-factor authentication support - user_preferences - User preferences and settings - zone_template_sync - Zone template synchronization - password_reset_tokens - Password reset functionality - user_agreements - User agreement tracking Verification Query (MySQL): SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'your_database_name' AND TABLE_NAME IN ('migrations', 'login_attempts', 'api_keys', 'user_mfa', 'user_preferences', 'zone_template_sync', 'password_reset_tokens', 'user_agreements'); Expected Result: You should see all 8 new tables listed above. If any new tables are missing, the migration may have failed. Check the migration logs for errors. Upgrading from Older Versions If you're upgrading from a version earlier than v3.9.0, you should upgrade incrementally: From v2.x.x : First upgrade to v3.0.0 (see v3.0.0 upgrade guide ) From v3.0.x to v3.1.x : Upgrade to v3.2.0 (see v3.2.0 upgrade guide ) From v3.2.x to v3.8.x : Upgrade to v3.9.0 (see v3.9.0 upgrade guide ) From v3.9.x : Follow this guide to upgrade to v4.0.0 This incremental approach ensures all database migrations are applied correctly and configurations are properly migrated. Post-Upgrade Tasks Check for any new required settings Test functionality thoroughly Update custom scripts that might reference the old configuration format New Feature: DNS Record Type Customization Version 4.0.0 introduces the ability to customize which DNS record types are available in the interface. This feature helps simplify the user interface by showing only the record types that are relevant to your specific DNS needs. To configure this feature, add the following to your config/settings.php file: 'dns' => [ // Other DNS settings... // Record Type Settings 'domain_record_types' => ['A', 'AAAA', 'CNAME', 'MX', 'NS', 'SOA', 'TXT'], // For forward zones 'reverse_record_types' => ['PTR', 'NS', 'SOA'], // For reverse zones ] For full documentation on this feature, see Record Type Customization . New Features in v4.0.0 Enhanced Security Features Multi-Factor Authentication (MFA) - Support for authenticator apps (TOTP) - Email-based verification - Recovery codes for account recovery - Configurable recovery code generation Advanced Account Lockout - Login attempt tracking with database support - Configurable lockout attempts and duration - IP address-based tracking and lockouts - Whitelist and blacklist support (supports IPs, CIDRs, wildcards) Password Reset System - Secure password reset via email - Configurable token lifetime and rate limiting - Protection against brute force attacks Google reCAPTCHA Integration - Support for reCAPTCHA v2 and v3 - Configurable score thresholds for v3 - Login form protection Enhanced Password Policies - Configurable minimum length requirements - Character type requirements (uppercase, lowercase, numbers, special) - Custom special character sets API Management API Key System - Generate and manage API keys for external integrations - Key-based authentication for API endpoints - Request logging and monitoring - API documentation endpoints User Experience Improvements Theming System - Light and dark mode support - Customizable theme base paths - Theme selection per user preference User Preferences - Personalized user settings storage - Individual user customization options Enhanced Interface Options - Display full names instead of usernames in zone lists - Improved reverse zone sorting (natural or hierarchical) - PowerDNS server status integration - Database consistency checks page - Email template previews Lookup and Integration Features WHOIS Lookup - Built-in WHOIS query functionality - Configurable WHOIS servers - Socket timeout controls - Admin-only access controls RDAP Lookup - Registration Data Access Protocol support - HTTP-based domain information queries - Configurable RDAP servers - Request timeout controls Email System Enhancements Multiple Transport Options - SMTP with authentication and encryption - Sendmail binary support - PHP mail() function - Configurable return paths Zone Management Features Zone Template Synchronization - Automatic synchronization of zone templates - Template change tracking - Batch operations support User Agreements System - Version-controlled user agreements - Automatic re-acceptance on version changes - Compliance tracking Administrative Features Enhanced Logging - Improved logging levels and types - Database activity logging - API request logging - Syslog integration Improved PowerDNS Integration - Enhanced API connectivity - Server status monitoring - Better error handling Configuration Examples Enable MFA: 'security' => [ 'mfa' => [ 'enabled' => true, 'app_enabled' => true, 'email_enabled' => true, 'recovery_codes' => 8, ], ], Configure Account Lockout: 'security' => [ 'account_lockout' => [ 'enable_lockout' => true, 'lockout_attempts' => 5, 'lockout_duration' => 15, 'whitelist_ip_addresses' => ['127.0.0.1', '192.168.1.0/24'], ], ], Enable API with reCAPTCHA: 'api' => [ 'enabled' => true, 'docs_enabled' => true, ], 'security' => [ 'recaptcha' => [ 'enabled' => true, 'site_key' => 'your_site_key', 'secret_key' => 'your_secret_key', 'version' => 'v3', ], ], Notes Legacy configuration format ( inc/config.inc.php ) is still supported but will be removed in a future version You can have both configuration files during the transition period The new configuration system offers more flexibility and better organization Review security settings after upgrade to take advantage of new account lockout features This is a significant update that lays groundwork for future improvements Consider testing in a staging environment before applying to production For detailed information about all new settings and options, refer to config/settings.defaults.php which contains comprehensive documentation in comments.","title":"v4.0.0"},{"location":"upgrading/v4.0.0/#upgrading-to-version-400","text":"","title":"Upgrading to Version 4.0.0"},{"location":"upgrading/v4.0.0/#overview","text":"Version 4.0.0 represents a major update to Poweradmin with significant architectural improvements, enhanced security features, and a new configuration system. This guide will help you migrate from older versions.","title":"Overview"},{"location":"upgrading/v4.0.0/#key-changes","text":"Configuration file format and location have changed Database schema updates including 8 new tables for enhanced functionality New theming system with light/dark mode support Enhanced security with multi-factor authentication (MFA) Advanced account lockout and password reset features API key management system User preferences and agreements system Google reCAPTCHA integration WHOIS and RDAP lookup functionality Enhanced email system with multiple transport options Improved object-oriented architecture with proper separation of concerns","title":"Key Changes"},{"location":"upgrading/v4.0.0/#upgrade-instructions","text":"Download latest tarball from GitHub Backup your files and database before proceeding - this is especially important for a major version upgrade Replace all files with content from the downloaded archive Run the database migration (see Database Schema Updates section below) Migrate your configuration (see Configuration Changes section below)","title":"Upgrade Instructions"},{"location":"upgrading/v4.0.0/#migrating-from-legacy-configuration","text":"If you're upgrading from an older version of Poweradmin (pre-4.0.0), you need to migrate your legacy configuration: php scripts/migrate-config.php This will convert your old inc/config.inc.php settings to the new config/settings.php format.","title":"Migrating from Legacy Configuration"},{"location":"upgrading/v4.0.0/#configuration-changes","text":"","title":"Configuration Changes"},{"location":"upgrading/v4.0.0/#old-configuration-location","text":"inc/config.inc.php","title":"Old Configuration Location"},{"location":"upgrading/v4.0.0/#new-configuration-location","text":"config/settings.php","title":"New Configuration Location"},{"location":"upgrading/v4.0.0/#configuration-format","text":"The configuration format has changed from direct variable assignments to a structured array format:","title":"Configuration Format"},{"location":"upgrading/v4.0.0/#old-format-pre-400","text":"$db_host = 'localhost'; $db_user = 'poweradmin'; $db_pass = 'password'; $db_name = 'powerdns'; $db_type = 'mysql';","title":"Old Format (pre-4.0.0)"},{"location":"upgrading/v4.0.0/#new-format-400","text":"return [ 'database' => [ 'host' => 'localhost', 'user' => 'poweradmin', 'password' => 'password', 'name' => 'powerdns', 'type' => 'mysql', ], ];","title":"New Format (4.0.0+)"},{"location":"upgrading/v4.0.0/#manual-migration-steps","text":"If the automatic migration script doesn't work for your setup, follow these steps: Create a new config/settings.php file Refer to config/settings.defaults.php for available options Map your old settings to the new format Test the configuration","title":"Manual Migration Steps"},{"location":"upgrading/v4.0.0/#database-schema-updates","text":"Version 4.0.0 introduces significant database schema changes including multiple new tables for enhanced security, API management, user preferences, and multi-factor authentication.","title":"Database Schema Updates"},{"location":"upgrading/v4.0.0/#new-tables-added-in-v400","text":"login_attempts - Login attempt tracking for security migrations - Database migration tracking api_keys - API access management user_mfa - Multi-factor authentication support user_preferences - User preferences and settings zone_template_sync - Zone template synchronization password_reset_tokens - Password reset functionality user_agreements - User agreement tracking","title":"New Tables Added in v4.0.0"},{"location":"upgrading/v4.0.0/#database-migration-files","text":"Important : Instead of running individual SQL statements, use the dedicated migration files from the Poweradmin repository: MySQL: mysql -u [username] -p [database_name] < sql/poweradmin-mysql-update-to-4.0.0.sql Download: poweradmin-mysql-update-to-4.0.0.sql PostgreSQL: psql -U [username] -d [database_name] -f sql/poweradmin-pgsql-update-to-4.0.0.sql Download: poweradmin-pgsql-update-to-4.0.0.sql SQLite: sqlite3 [database_file] < sql/poweradmin-sqlite-update-to-4.0.0.sql Download: poweradmin-sqlite-update-to-4.0.0.sql","title":"Database Migration Files"},{"location":"upgrading/v4.0.0/#migration-prerequisites","text":"Note : Users upgrading from versions earlier than v3.9.0 should first upgrade to v3.9.0 and run those migrations before upgrading to v4.0.0.","title":"Migration Prerequisites"},{"location":"upgrading/v4.0.0/#verify-database-migration-completeness","text":"After running the migration, verify your database has all required tables for v4.0.0: New Tables for v4.0.0: - login_attempts - Login tracking for security - migrations - Database migration tracking - api_keys - API access management - user_mfa - Multi-factor authentication support - user_preferences - User preferences and settings - zone_template_sync - Zone template synchronization - password_reset_tokens - Password reset functionality - user_agreements - User agreement tracking Verification Query (MySQL): SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'your_database_name' AND TABLE_NAME IN ('migrations', 'login_attempts', 'api_keys', 'user_mfa', 'user_preferences', 'zone_template_sync', 'password_reset_tokens', 'user_agreements'); Expected Result: You should see all 8 new tables listed above. If any new tables are missing, the migration may have failed. Check the migration logs for errors.","title":"Verify Database Migration Completeness"},{"location":"upgrading/v4.0.0/#upgrading-from-older-versions","text":"If you're upgrading from a version earlier than v3.9.0, you should upgrade incrementally: From v2.x.x : First upgrade to v3.0.0 (see v3.0.0 upgrade guide ) From v3.0.x to v3.1.x : Upgrade to v3.2.0 (see v3.2.0 upgrade guide ) From v3.2.x to v3.8.x : Upgrade to v3.9.0 (see v3.9.0 upgrade guide ) From v3.9.x : Follow this guide to upgrade to v4.0.0 This incremental approach ensures all database migrations are applied correctly and configurations are properly migrated.","title":"Upgrading from Older Versions"},{"location":"upgrading/v4.0.0/#post-upgrade-tasks","text":"Check for any new required settings Test functionality thoroughly Update custom scripts that might reference the old configuration format","title":"Post-Upgrade Tasks"},{"location":"upgrading/v4.0.0/#new-feature-dns-record-type-customization","text":"Version 4.0.0 introduces the ability to customize which DNS record types are available in the interface. This feature helps simplify the user interface by showing only the record types that are relevant to your specific DNS needs. To configure this feature, add the following to your config/settings.php file: 'dns' => [ // Other DNS settings... // Record Type Settings 'domain_record_types' => ['A', 'AAAA', 'CNAME', 'MX', 'NS', 'SOA', 'TXT'], // For forward zones 'reverse_record_types' => ['PTR', 'NS', 'SOA'], // For reverse zones ] For full documentation on this feature, see Record Type Customization .","title":"New Feature: DNS Record Type Customization"},{"location":"upgrading/v4.0.0/#new-features-in-v400","text":"","title":"New Features in v4.0.0"},{"location":"upgrading/v4.0.0/#enhanced-security-features","text":"Multi-Factor Authentication (MFA) - Support for authenticator apps (TOTP) - Email-based verification - Recovery codes for account recovery - Configurable recovery code generation Advanced Account Lockout - Login attempt tracking with database support - Configurable lockout attempts and duration - IP address-based tracking and lockouts - Whitelist and blacklist support (supports IPs, CIDRs, wildcards) Password Reset System - Secure password reset via email - Configurable token lifetime and rate limiting - Protection against brute force attacks Google reCAPTCHA Integration - Support for reCAPTCHA v2 and v3 - Configurable score thresholds for v3 - Login form protection Enhanced Password Policies - Configurable minimum length requirements - Character type requirements (uppercase, lowercase, numbers, special) - Custom special character sets","title":"Enhanced Security Features"},{"location":"upgrading/v4.0.0/#api-management","text":"API Key System - Generate and manage API keys for external integrations - Key-based authentication for API endpoints - Request logging and monitoring - API documentation endpoints","title":"API Management"},{"location":"upgrading/v4.0.0/#user-experience-improvements","text":"Theming System - Light and dark mode support - Customizable theme base paths - Theme selection per user preference User Preferences - Personalized user settings storage - Individual user customization options Enhanced Interface Options - Display full names instead of usernames in zone lists - Improved reverse zone sorting (natural or hierarchical) - PowerDNS server status integration - Database consistency checks page - Email template previews","title":"User Experience Improvements"},{"location":"upgrading/v4.0.0/#lookup-and-integration-features","text":"WHOIS Lookup - Built-in WHOIS query functionality - Configurable WHOIS servers - Socket timeout controls - Admin-only access controls RDAP Lookup - Registration Data Access Protocol support - HTTP-based domain information queries - Configurable RDAP servers - Request timeout controls","title":"Lookup and Integration Features"},{"location":"upgrading/v4.0.0/#email-system-enhancements","text":"Multiple Transport Options - SMTP with authentication and encryption - Sendmail binary support - PHP mail() function - Configurable return paths","title":"Email System Enhancements"},{"location":"upgrading/v4.0.0/#zone-management-features","text":"Zone Template Synchronization - Automatic synchronization of zone templates - Template change tracking - Batch operations support User Agreements System - Version-controlled user agreements - Automatic re-acceptance on version changes - Compliance tracking","title":"Zone Management Features"},{"location":"upgrading/v4.0.0/#administrative-features","text":"Enhanced Logging - Improved logging levels and types - Database activity logging - API request logging - Syslog integration Improved PowerDNS Integration - Enhanced API connectivity - Server status monitoring - Better error handling","title":"Administrative Features"},{"location":"upgrading/v4.0.0/#configuration-examples","text":"Enable MFA: 'security' => [ 'mfa' => [ 'enabled' => true, 'app_enabled' => true, 'email_enabled' => true, 'recovery_codes' => 8, ], ], Configure Account Lockout: 'security' => [ 'account_lockout' => [ 'enable_lockout' => true, 'lockout_attempts' => 5, 'lockout_duration' => 15, 'whitelist_ip_addresses' => ['127.0.0.1', '192.168.1.0/24'], ], ], Enable API with reCAPTCHA: 'api' => [ 'enabled' => true, 'docs_enabled' => true, ], 'security' => [ 'recaptcha' => [ 'enabled' => true, 'site_key' => 'your_site_key', 'secret_key' => 'your_secret_key', 'version' => 'v3', ], ],","title":"Configuration Examples"},{"location":"upgrading/v4.0.0/#notes","text":"Legacy configuration format ( inc/config.inc.php ) is still supported but will be removed in a future version You can have both configuration files during the transition period The new configuration system offers more flexibility and better organization Review security settings after upgrade to take advantage of new account lockout features This is a significant update that lays groundwork for future improvements Consider testing in a staging environment before applying to production For detailed information about all new settings and options, refer to config/settings.defaults.php which contains comprehensive documentation in comments.","title":"Notes"},{"location":"user-guide/dns-templates/","text":"DNS Templates DNS templates in Poweradmin allow you to create standardized sets of DNS records that can be applied to multiple zones, streamlining zone management and ensuring consistency across domains. Template Management Templates are managed through the Poweradmin interface and stored in the database. Each template can contain multiple DNS records of various types (A, CNAME, MX, etc.) that will be applied when the template is used. Templates support placeholders that are automatically substituted: [ZONE] - replaced with the actual domain name [SERIAL] - replaced with current date + sequence (YYYYMMDD00) [NS1] , [NS2] , etc. - replaced with configured nameservers [HOSTMASTER] - replaced with configured hostmaster email Zone Template Application When Changing a Zone's Template When you change a zone's template on the edit page: Only template-generated records are overwritten - the system specifically deletes records that were originally created from templates Manual records are completely preserved - any records you added manually remain untouched Changes are immediate - template application happens instantly when you save the change SOA records are handled specially - existing serial numbers are preserved and incremented appropriately How Poweradmin Tracks Template Records Poweradmin maintains a database table ( records_zone_templ ) that tracks which DNS records were created from templates. This allows the system to: Identify which records can be safely replaced during template updates Preserve manually added records during template changes Maintain the relationship between zones and their source templates Template Synchronization Manual Updates Only Important : Zones do NOT automatically update when templates are modified. This is by design to give administrators explicit control over when changes are applied. Methods to Apply Template Changes Individual Zone Update : Go to Edit Zone page Change the template dropdown (even to the same template) Save changes - this triggers a template refresh Bulk Zone Update : Go to Edit Template page Click \"Update Zones\" button This updates ALL zones currently using that template No Automatic Sync Indicators Poweradmin does not currently provide interface indicators showing which zones are \"out of sync\" with their templates. Administrators must manually track when template changes need to be applied to existing zones. Permissions Zone Template Operations Different template operations require different permissions: Creating zone templates : Requires zone_templ_add permission Listing zone templates : Requires zone_master_add OR user_is_ueberuser permission Editing/deleting zone templates : Requires user_is_ueberuser OR ( zone_templ_edit AND template ownership) Adding/editing/deleting template records : Requires user_is_ueberuser OR ( zone_templ_edit AND template ownership) Applying Templates to Zones Creating zones with templates : Requires zone_master_add OR zone_slave_add permission Changing existing zone templates : Requires zone editing permissions ( zone_content_edit_own for owned zones or zone_content_edit_others for other zones) Unlinking zones from templates : Requires user_is_ueberuser OR zone editing permissions ( zone_content_edit_own / zone_content_edit_others OR zone_meta_edit_own / zone_meta_edit_others ) Permission Templates Poweradmin also supports permission templates (different from zone templates): Adding permission templates : Requires templ_perm_add permission Editing permission templates : Requires templ_perm_edit permission Deleting permission templates : Requires user_edit_templ_perm permission Configuration Template display in zone listings can be controlled via the interface.zonelist_template setting in your configuration file. See Also Permissions - For detailed permission requirements Basic Configuration - For template-related settings","title":"DNS Templates"},{"location":"user-guide/dns-templates/#dns-templates","text":"DNS templates in Poweradmin allow you to create standardized sets of DNS records that can be applied to multiple zones, streamlining zone management and ensuring consistency across domains.","title":"DNS Templates"},{"location":"user-guide/dns-templates/#template-management","text":"Templates are managed through the Poweradmin interface and stored in the database. Each template can contain multiple DNS records of various types (A, CNAME, MX, etc.) that will be applied when the template is used. Templates support placeholders that are automatically substituted: [ZONE] - replaced with the actual domain name [SERIAL] - replaced with current date + sequence (YYYYMMDD00) [NS1] , [NS2] , etc. - replaced with configured nameservers [HOSTMASTER] - replaced with configured hostmaster email","title":"Template Management"},{"location":"user-guide/dns-templates/#zone-template-application","text":"","title":"Zone Template Application"},{"location":"user-guide/dns-templates/#when-changing-a-zones-template","text":"When you change a zone's template on the edit page: Only template-generated records are overwritten - the system specifically deletes records that were originally created from templates Manual records are completely preserved - any records you added manually remain untouched Changes are immediate - template application happens instantly when you save the change SOA records are handled specially - existing serial numbers are preserved and incremented appropriately","title":"When Changing a Zone's Template"},{"location":"user-guide/dns-templates/#how-poweradmin-tracks-template-records","text":"Poweradmin maintains a database table ( records_zone_templ ) that tracks which DNS records were created from templates. This allows the system to: Identify which records can be safely replaced during template updates Preserve manually added records during template changes Maintain the relationship between zones and their source templates","title":"How Poweradmin Tracks Template Records"},{"location":"user-guide/dns-templates/#template-synchronization","text":"","title":"Template Synchronization"},{"location":"user-guide/dns-templates/#manual-updates-only","text":"Important : Zones do NOT automatically update when templates are modified. This is by design to give administrators explicit control over when changes are applied.","title":"Manual Updates Only"},{"location":"user-guide/dns-templates/#methods-to-apply-template-changes","text":"Individual Zone Update : Go to Edit Zone page Change the template dropdown (even to the same template) Save changes - this triggers a template refresh Bulk Zone Update : Go to Edit Template page Click \"Update Zones\" button This updates ALL zones currently using that template","title":"Methods to Apply Template Changes"},{"location":"user-guide/dns-templates/#no-automatic-sync-indicators","text":"Poweradmin does not currently provide interface indicators showing which zones are \"out of sync\" with their templates. Administrators must manually track when template changes need to be applied to existing zones.","title":"No Automatic Sync Indicators"},{"location":"user-guide/dns-templates/#permissions","text":"","title":"Permissions"},{"location":"user-guide/dns-templates/#zone-template-operations","text":"Different template operations require different permissions: Creating zone templates : Requires zone_templ_add permission Listing zone templates : Requires zone_master_add OR user_is_ueberuser permission Editing/deleting zone templates : Requires user_is_ueberuser OR ( zone_templ_edit AND template ownership) Adding/editing/deleting template records : Requires user_is_ueberuser OR ( zone_templ_edit AND template ownership)","title":"Zone Template Operations"},{"location":"user-guide/dns-templates/#applying-templates-to-zones","text":"Creating zones with templates : Requires zone_master_add OR zone_slave_add permission Changing existing zone templates : Requires zone editing permissions ( zone_content_edit_own for owned zones or zone_content_edit_others for other zones) Unlinking zones from templates : Requires user_is_ueberuser OR zone editing permissions ( zone_content_edit_own / zone_content_edit_others OR zone_meta_edit_own / zone_meta_edit_others )","title":"Applying Templates to Zones"},{"location":"user-guide/dns-templates/#permission-templates","text":"Poweradmin also supports permission templates (different from zone templates): Adding permission templates : Requires templ_perm_add permission Editing permission templates : Requires templ_perm_edit permission Deleting permission templates : Requires user_edit_templ_perm permission","title":"Permission Templates"},{"location":"user-guide/dns-templates/#configuration","text":"Template display in zone listings can be controlled via the interface.zonelist_template setting in your configuration file.","title":"Configuration"},{"location":"user-guide/dns-templates/#see-also","text":"Permissions - For detailed permission requirements Basic Configuration - For template-related settings","title":"See Also"},{"location":"user-guide/permissions/","text":"User Permissions This document provides detailed explanations of all user permissions available in Poweradmin. For information about user roles and general permission concepts, see Users and Roles . Zone Permissions zone_master_add Allows the user to add a master zone User can create new authoritative DNS zones Required for creating zones from templates zone_slave_add Allows the user to add a slave zone User can create zones that pull data from a master server Requires specifying the IP address of the master server zone_content_view_own Allows the user to view the content of zones they own This includes viewing all records within the zone Basic permission needed for zone management zone_content_edit_own Allows the user to edit the content of zones they own This includes adding, modifying, and deleting records Essential for managing DNS records in owned zones zone_meta_edit_own Allows the user to add additional owners to their zone (if user_view_others is set to true) User can remove owners (including themselves) User cannot orphan a zone (at least one user must remain) User can change zone type (i.e. from native to slave) User can set IP of master server for slave zone User can change used zone template (requires zone_master_add and zone_content_edit_own permissions) zone_content_view_others Allows the user to view the content of zones owned by other users This is a read-only permission for zones the user doesn't own Useful for administrators or team environments zone_content_edit_others Allows the user to edit the content of zones owned by other users User can modify records in zones they don't own Powerful permission that should be granted cautiously zone_meta_edit_others Allows the user to edit the metadata of zones owned by other users Can change owners, zone types, and master server IPs for others' zones High-level permission typically reserved for administrators zone_content_edit_own_as_client Allows the user to edit record content in zones they own, except SOA and NS records Limited permission for users who should only modify certain record types Provides restricted zone management capabilities Search Permissions search Allows the user to perform searches across the system User can search for zones, records, and other elements Basic functionality for finding resources in larger deployments User Permissions user_view_others Allows the user to view information about other users Can see usernames and access levels of others Required for assigning zone ownership to other users user_edit_own Allows the user to edit their own user information User can change their password and other personal details Basic self-service permission user_edit_others Allows the user to edit information for other users Can modify other users' details and access rights High-level administrative permission user_add_new Allows the user to add new users to the system Can create accounts for others to access Poweradmin Administrative permission for expanding system access user_passwd_edit_others Allows the user to change passwords for other users Can reset passwords when users are locked out Administrative security management permission user_edit_templ_perm Allows the user to change the permission template assigned to users Can modify user access by applying different templates Streamlines permission management for administrators user_is_ueberuser Grants superuser status with full access to all functions User has unlimited privileges throughout Poweradmin Bypasses normal permission checks Should be granted very selectively Template Permissions templ_perm_add Allows the user to add new permission templates Templates define sets of permissions that can be assigned to users Streamlines user permission management templ_perm_edit Allows the user to edit existing permission templates Can modify permission sets used for multiple users Useful for maintaining consistent permission groups Supermaster Permissions supermaster_view Allows the user to view supermaster servers Can see the list of authoritative name servers Read-only access to supermaster configurations supermaster_add Allows the user to add new supermaster servers Can configure authoritative name servers for PowerDNS Advanced configuration permission supermaster_edit Allows the user to edit existing supermaster servers Can modify authoritative name server configurations Advanced permission for managing DNS infrastructure","title":"Permissions"},{"location":"user-guide/permissions/#user-permissions","text":"This document provides detailed explanations of all user permissions available in Poweradmin. For information about user roles and general permission concepts, see Users and Roles .","title":"User Permissions"},{"location":"user-guide/permissions/#zone-permissions","text":"","title":"Zone Permissions"},{"location":"user-guide/permissions/#zone_master_add","text":"Allows the user to add a master zone User can create new authoritative DNS zones Required for creating zones from templates","title":"zone_master_add"},{"location":"user-guide/permissions/#zone_slave_add","text":"Allows the user to add a slave zone User can create zones that pull data from a master server Requires specifying the IP address of the master server","title":"zone_slave_add"},{"location":"user-guide/permissions/#zone_content_view_own","text":"Allows the user to view the content of zones they own This includes viewing all records within the zone Basic permission needed for zone management","title":"zone_content_view_own"},{"location":"user-guide/permissions/#zone_content_edit_own","text":"Allows the user to edit the content of zones they own This includes adding, modifying, and deleting records Essential for managing DNS records in owned zones","title":"zone_content_edit_own"},{"location":"user-guide/permissions/#zone_meta_edit_own","text":"Allows the user to add additional owners to their zone (if user_view_others is set to true) User can remove owners (including themselves) User cannot orphan a zone (at least one user must remain) User can change zone type (i.e. from native to slave) User can set IP of master server for slave zone User can change used zone template (requires zone_master_add and zone_content_edit_own permissions)","title":"zone_meta_edit_own"},{"location":"user-guide/permissions/#zone_content_view_others","text":"Allows the user to view the content of zones owned by other users This is a read-only permission for zones the user doesn't own Useful for administrators or team environments","title":"zone_content_view_others"},{"location":"user-guide/permissions/#zone_content_edit_others","text":"Allows the user to edit the content of zones owned by other users User can modify records in zones they don't own Powerful permission that should be granted cautiously","title":"zone_content_edit_others"},{"location":"user-guide/permissions/#zone_meta_edit_others","text":"Allows the user to edit the metadata of zones owned by other users Can change owners, zone types, and master server IPs for others' zones High-level permission typically reserved for administrators","title":"zone_meta_edit_others"},{"location":"user-guide/permissions/#zone_content_edit_own_as_client","text":"Allows the user to edit record content in zones they own, except SOA and NS records Limited permission for users who should only modify certain record types Provides restricted zone management capabilities","title":"zone_content_edit_own_as_client"},{"location":"user-guide/permissions/#search-permissions","text":"","title":"Search Permissions"},{"location":"user-guide/permissions/#search","text":"Allows the user to perform searches across the system User can search for zones, records, and other elements Basic functionality for finding resources in larger deployments","title":"search"},{"location":"user-guide/permissions/#user-permissions_1","text":"","title":"User Permissions"},{"location":"user-guide/permissions/#user_view_others","text":"Allows the user to view information about other users Can see usernames and access levels of others Required for assigning zone ownership to other users","title":"user_view_others"},{"location":"user-guide/permissions/#user_edit_own","text":"Allows the user to edit their own user information User can change their password and other personal details Basic self-service permission","title":"user_edit_own"},{"location":"user-guide/permissions/#user_edit_others","text":"Allows the user to edit information for other users Can modify other users' details and access rights High-level administrative permission","title":"user_edit_others"},{"location":"user-guide/permissions/#user_add_new","text":"Allows the user to add new users to the system Can create accounts for others to access Poweradmin Administrative permission for expanding system access","title":"user_add_new"},{"location":"user-guide/permissions/#user_passwd_edit_others","text":"Allows the user to change passwords for other users Can reset passwords when users are locked out Administrative security management permission","title":"user_passwd_edit_others"},{"location":"user-guide/permissions/#user_edit_templ_perm","text":"Allows the user to change the permission template assigned to users Can modify user access by applying different templates Streamlines permission management for administrators","title":"user_edit_templ_perm"},{"location":"user-guide/permissions/#user_is_ueberuser","text":"Grants superuser status with full access to all functions User has unlimited privileges throughout Poweradmin Bypasses normal permission checks Should be granted very selectively","title":"user_is_ueberuser"},{"location":"user-guide/permissions/#template-permissions","text":"","title":"Template Permissions"},{"location":"user-guide/permissions/#templ_perm_add","text":"Allows the user to add new permission templates Templates define sets of permissions that can be assigned to users Streamlines user permission management","title":"templ_perm_add"},{"location":"user-guide/permissions/#templ_perm_edit","text":"Allows the user to edit existing permission templates Can modify permission sets used for multiple users Useful for maintaining consistent permission groups","title":"templ_perm_edit"},{"location":"user-guide/permissions/#supermaster-permissions","text":"","title":"Supermaster Permissions"},{"location":"user-guide/permissions/#supermaster_view","text":"Allows the user to view supermaster servers Can see the list of authoritative name servers Read-only access to supermaster configurations","title":"supermaster_view"},{"location":"user-guide/permissions/#supermaster_add","text":"Allows the user to add new supermaster servers Can configure authoritative name servers for PowerDNS Advanced configuration permission","title":"supermaster_add"},{"location":"user-guide/permissions/#supermaster_edit","text":"Allows the user to edit existing supermaster servers Can modify authoritative name server configurations Advanced permission for managing DNS infrastructure","title":"supermaster_edit"},{"location":"user-guide/reverse-dns/","text":"Reverse DNS (PTR Records) Guide This guide explains how to create and manage Reverse DNS (PTR) records in Poweradmin for PowerDNS. What are PTR Records? PTR (Pointer) records provide reverse DNS resolution, mapping IP addresses to hostnames. They are used for: Email server verification Security controls and authentication Network troubleshooting Server identification Prerequisites Before creating PTR records, you need: The appropriate reverse zone must exist in PowerDNS For IPv4: Create a zone like 1.168.192.in-addr.arpa for the 192.168.1.0/24 network For IPv6: Create a zone like 0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa for 2001:db8::/64 Proper permissions to add records to these zones: You need at least one of these permissions: zone_content_edit_own - To edit zones you own zone_content_edit_others - To edit any zone For creating reverse zones, you need: zone_master_add or zone_slave_add permissions Method 1: Adding Individual PTR Records For single PTR records: Go to the reverse zone's record list (e.g., 1.168.192.in-addr.arpa ) Click \"Add Record\" at the top of the zone edit page Enter the information: Name : The last octet of the IP address (e.g., 42 for 192.168.1.42) Type : PTR Content : The fully qualified domain name (FQDN) this IP should resolve to (e.g., host42.example.com. ) TTL : Time-to-live value (e.g., 86400 for 1 day) Click \"Add Record\" Method 2: Using Batch PTR Records Feature For creating multiple PTR records at once: Access the Batch PTR Records feature: From the top navigation: Zones \u2192 Batch PTR Records From the dashboard: Click the \"Batch PTR Records\" card Complete the form: IP Version : Choose IPv4 or IPv6 Network Prefix : For IPv4: The first three octets (e.g., 192.168.1 ) For IPv6: The /64 prefix (e.g., 2001:db8:1:1 ) Host Prefix : Base name for the hosts (e.g., server ) Domain : Domain suffix for PTR records (e.g., example.com ) Number of IPv6 Records : (IPv6 only) How many records to create TTL : Time-to-live value Priority : Usually 0 for PTR records Click \"Create PTR Records\" Examples IPv4 Example Network Prefix: 192.168.1 Host Prefix: server Domain: example.com This will create 256 PTR records: - 0.1.168.192.in-addr.arpa \u2192 server-0.example.com. - 1.1.168.192.in-addr.arpa \u2192 server-1.example.com. - ...through... - 255.1.168.192.in-addr.arpa \u2192 server-255.example.com. IPv6 Example Network Prefix: 2001:db8:1:1 Host Prefix: vm Domain: example.com Number of records: 100 This will create 100 PTR records with hostnames like vm-0.example.com through vm-99.example.com Tips for Batch PTR Records Run Multiple Times Safely : You can run the batch tool multiple times - existing records will be skipped Progress Reporting : The tool reports how many records were created, skipped, or failed Reverse Zone Required : The appropriate reverse zone must exist before using this feature Automated Creation : All hostnames are generated automatically based on the pattern {prefix}-{number}.{domain} Permissions and Access Control The Batch PTR Records feature follows Poweradmin's permission system: Required Feature Flag : The add_reverse_record option must be enabled in the Poweradmin configuration Required User Permissions : Either the zone_content_edit_own or zone_content_edit_others permission is required to access this feature When accessed from a specific zone page, you also need ownership of that zone (if using zone_content_edit_own ) Permission Hierarchy : zone_content_edit_others gives access to all zones zone_content_edit_own limits access to zones you own No edit permissions means no access to batch PTR records Administrative Setup : Administrators can assign these permissions through permission templates Users who can only view zones will not see the Batch PTR Records option Troubleshooting No matching reverse zone found : Create the appropriate reverse zone first Permission denied : Ensure you have rights to add records to the reverse zone No records created : Check if records already exist (they will be skipped) Feature not visible : Check if you have the required permissions Best Practices Use meaningful host prefixes that identify the purpose of the servers Use consistent TTL values across your reverse zones Ensure your forward (A/AAAA) and reverse (PTR) records match Consider using shorter TTLs during migration periods","title":"Reverse DNS (PTR)"},{"location":"user-guide/reverse-dns/#reverse-dns-ptr-records-guide","text":"This guide explains how to create and manage Reverse DNS (PTR) records in Poweradmin for PowerDNS.","title":"Reverse DNS (PTR Records) Guide"},{"location":"user-guide/reverse-dns/#what-are-ptr-records","text":"PTR (Pointer) records provide reverse DNS resolution, mapping IP addresses to hostnames. They are used for: Email server verification Security controls and authentication Network troubleshooting Server identification","title":"What are PTR Records?"},{"location":"user-guide/reverse-dns/#prerequisites","text":"Before creating PTR records, you need: The appropriate reverse zone must exist in PowerDNS For IPv4: Create a zone like 1.168.192.in-addr.arpa for the 192.168.1.0/24 network For IPv6: Create a zone like 0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa for 2001:db8::/64 Proper permissions to add records to these zones: You need at least one of these permissions: zone_content_edit_own - To edit zones you own zone_content_edit_others - To edit any zone For creating reverse zones, you need: zone_master_add or zone_slave_add permissions","title":"Prerequisites"},{"location":"user-guide/reverse-dns/#method-1-adding-individual-ptr-records","text":"For single PTR records: Go to the reverse zone's record list (e.g., 1.168.192.in-addr.arpa ) Click \"Add Record\" at the top of the zone edit page Enter the information: Name : The last octet of the IP address (e.g., 42 for 192.168.1.42) Type : PTR Content : The fully qualified domain name (FQDN) this IP should resolve to (e.g., host42.example.com. ) TTL : Time-to-live value (e.g., 86400 for 1 day) Click \"Add Record\"","title":"Method 1: Adding Individual PTR Records"},{"location":"user-guide/reverse-dns/#method-2-using-batch-ptr-records-feature","text":"For creating multiple PTR records at once: Access the Batch PTR Records feature: From the top navigation: Zones \u2192 Batch PTR Records From the dashboard: Click the \"Batch PTR Records\" card Complete the form: IP Version : Choose IPv4 or IPv6 Network Prefix : For IPv4: The first three octets (e.g., 192.168.1 ) For IPv6: The /64 prefix (e.g., 2001:db8:1:1 ) Host Prefix : Base name for the hosts (e.g., server ) Domain : Domain suffix for PTR records (e.g., example.com ) Number of IPv6 Records : (IPv6 only) How many records to create TTL : Time-to-live value Priority : Usually 0 for PTR records Click \"Create PTR Records\"","title":"Method 2: Using Batch PTR Records Feature"},{"location":"user-guide/reverse-dns/#examples","text":"","title":"Examples"},{"location":"user-guide/reverse-dns/#ipv4-example","text":"Network Prefix: 192.168.1 Host Prefix: server Domain: example.com This will create 256 PTR records: - 0.1.168.192.in-addr.arpa \u2192 server-0.example.com. - 1.1.168.192.in-addr.arpa \u2192 server-1.example.com. - ...through... - 255.1.168.192.in-addr.arpa \u2192 server-255.example.com.","title":"IPv4 Example"},{"location":"user-guide/reverse-dns/#ipv6-example","text":"Network Prefix: 2001:db8:1:1 Host Prefix: vm Domain: example.com Number of records: 100 This will create 100 PTR records with hostnames like vm-0.example.com through vm-99.example.com","title":"IPv6 Example"},{"location":"user-guide/reverse-dns/#tips-for-batch-ptr-records","text":"Run Multiple Times Safely : You can run the batch tool multiple times - existing records will be skipped Progress Reporting : The tool reports how many records were created, skipped, or failed Reverse Zone Required : The appropriate reverse zone must exist before using this feature Automated Creation : All hostnames are generated automatically based on the pattern {prefix}-{number}.{domain}","title":"Tips for Batch PTR Records"},{"location":"user-guide/reverse-dns/#permissions-and-access-control","text":"The Batch PTR Records feature follows Poweradmin's permission system: Required Feature Flag : The add_reverse_record option must be enabled in the Poweradmin configuration Required User Permissions : Either the zone_content_edit_own or zone_content_edit_others permission is required to access this feature When accessed from a specific zone page, you also need ownership of that zone (if using zone_content_edit_own ) Permission Hierarchy : zone_content_edit_others gives access to all zones zone_content_edit_own limits access to zones you own No edit permissions means no access to batch PTR records Administrative Setup : Administrators can assign these permissions through permission templates Users who can only view zones will not see the Batch PTR Records option","title":"Permissions and Access Control"},{"location":"user-guide/reverse-dns/#troubleshooting","text":"No matching reverse zone found : Create the appropriate reverse zone first Permission denied : Ensure you have rights to add records to the reverse zone No records created : Check if records already exist (they will be skipped) Feature not visible : Check if you have the required permissions","title":"Troubleshooting"},{"location":"user-guide/reverse-dns/#best-practices","text":"Use meaningful host prefixes that identify the purpose of the servers Use consistent TTL values across your reverse zones Ensure your forward (A/AAAA) and reverse (PTR) records match Consider using shorter TTLs during migration periods","title":"Best Practices"},{"location":"user-guide/users-roles/","text":"Users and Roles This document provides an overview of user roles and the permission management system in Poweradmin. Basics of User Management Poweradmin implements a permission-based user management system with two primary user levels: Uberusers - Users that can do anything within the interface (administrators) Limited users - Users with restricted permissions based on assigned templates Permission Templates Permission templates were introduced in version 2.0.0 and are built from a set of individual permissions. Each permission allows users to perform specific actions, such as viewing zone contents, editing zones, or creating supermasters. By adding or removing permissions to a template and assigning that template to users, you can control user access rights. Understanding Uberuser Status The user_is_ueberuser permission overrules any other permission the user may or may not have been assigned. It grants full access to all features that would otherwise require specific permissions. This is typically reserved for administrators. Zone Ownership Ownership is a designation that marks users as \"owners\" for specific zones. However, ownership alone doesn't grant any privileges for these zones. The actual abilities are determined by the permissions in the user's assigned template. For example, if a user owns zones but lacks the zone_content_view_own permission, they won't be able to see those zones. Edit Access and Zone Integrity Poweradmin assumes that users with edit permissions for a zone can be trusted with full access to that zone. This is because even partial edit access would allow a user to potentially break the zone's functionality. Therefore, if a user can edit a zone, they're also granted delete permissions. Security Pitfalls Be aware that granting any of these permissions can indirectly give users extensive rights: user_edit_templ_perm templ_perm_edit user_add_new Users with these permissions can potentially create or modify templates to grant themselves user_is_ueberuser rights. Additionally, anyone with root shell access to the server running Poweradmin or the PowerDNS database server effectively has uberuser rights. Additional Information When configuring user permissions, keep the principle of least privilege in mind - only grant the permissions necessary for a user to perform their required functions.","title":"Users and Roles"},{"location":"user-guide/users-roles/#users-and-roles","text":"This document provides an overview of user roles and the permission management system in Poweradmin.","title":"Users and Roles"},{"location":"user-guide/users-roles/#basics-of-user-management","text":"Poweradmin implements a permission-based user management system with two primary user levels: Uberusers - Users that can do anything within the interface (administrators) Limited users - Users with restricted permissions based on assigned templates","title":"Basics of User Management"},{"location":"user-guide/users-roles/#permission-templates","text":"Permission templates were introduced in version 2.0.0 and are built from a set of individual permissions. Each permission allows users to perform specific actions, such as viewing zone contents, editing zones, or creating supermasters. By adding or removing permissions to a template and assigning that template to users, you can control user access rights.","title":"Permission Templates"},{"location":"user-guide/users-roles/#understanding-uberuser-status","text":"The user_is_ueberuser permission overrules any other permission the user may or may not have been assigned. It grants full access to all features that would otherwise require specific permissions. This is typically reserved for administrators.","title":"Understanding Uberuser Status"},{"location":"user-guide/users-roles/#zone-ownership","text":"Ownership is a designation that marks users as \"owners\" for specific zones. However, ownership alone doesn't grant any privileges for these zones. The actual abilities are determined by the permissions in the user's assigned template. For example, if a user owns zones but lacks the zone_content_view_own permission, they won't be able to see those zones.","title":"Zone Ownership"},{"location":"user-guide/users-roles/#edit-access-and-zone-integrity","text":"Poweradmin assumes that users with edit permissions for a zone can be trusted with full access to that zone. This is because even partial edit access would allow a user to potentially break the zone's functionality. Therefore, if a user can edit a zone, they're also granted delete permissions.","title":"Edit Access and Zone Integrity"},{"location":"user-guide/users-roles/#security-pitfalls","text":"Be aware that granting any of these permissions can indirectly give users extensive rights: user_edit_templ_perm templ_perm_edit user_add_new Users with these permissions can potentially create or modify templates to grant themselves user_is_ueberuser rights. Additionally, anyone with root shell access to the server running Poweradmin or the PowerDNS database server effectively has uberuser rights.","title":"Security Pitfalls"},{"location":"user-guide/users-roles/#additional-information","text":"When configuring user permissions, keep the principle of least privilege in mind - only grant the permissions necessary for a user to perform their required functions.","title":"Additional Information"},{"location":"user-guide/ddns/client-setup/","text":"Client Setup Update Methods The Dynamic DNS update system supports several ways to update records: HTTP Basic Authentication URL parameters Automatic IP detection Supported Parameters username - Your Poweradmin username (if not using HTTP Basic Auth) password - Your Poweradmin password (if not using HTTP Basic Auth) hostname - The FQDN to update myip or ip - IPv4 address(es), comma-separated myip6 or ip6 - IPv6 address(es), comma-separated dualstack_update - Set to 1 to update both IPv4 and IPv6 verbose - Enable verbose response messages Special Values You can use whatismyip for the IP parameters to automatically detect your address: curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=whatismyip\" Multiple IP Management The system supports managing multiple IP addresses per host: # Update multiple IPv4 addresses curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2\" # Update multiple IPv6 addresses curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip6=2001:db8::1,2001:db8::2\" # Update both IPv4 and IPv6 with cleanup curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2&myip6=2001:db8::1,2001:db8::2&dualstack_update=1\" When using multiple IPs: Omitted record types are preserved Use dualstack_update=1 to clean up both A and AAAA records Records not included in the update are automatically removed Changes are atomic and maintain zone consistency Using the Shell Script Download the dynamic DNS client script Make it executable and run: chmod 755 dynamic_dns_client.sh ./dynamic_dns_client.sh Basic Authentication You can also create a client that uses HTTP basic authentication with username and password. Client Script Installation Shell Script chmod 755 dynamic_dns_client.sh ./dynamic_dns_client.sh Python Script Install required dependencies: pip install requests Run the script: python dynamic_dns_client.py Perl Script Install required modules: cpan install LWP::UserAgent Run the script: perl dynamic_dns_client.pl","title":"Client Setup"},{"location":"user-guide/ddns/client-setup/#client-setup","text":"","title":"Client Setup"},{"location":"user-guide/ddns/client-setup/#update-methods","text":"The Dynamic DNS update system supports several ways to update records: HTTP Basic Authentication URL parameters Automatic IP detection","title":"Update Methods"},{"location":"user-guide/ddns/client-setup/#supported-parameters","text":"username - Your Poweradmin username (if not using HTTP Basic Auth) password - Your Poweradmin password (if not using HTTP Basic Auth) hostname - The FQDN to update myip or ip - IPv4 address(es), comma-separated myip6 or ip6 - IPv6 address(es), comma-separated dualstack_update - Set to 1 to update both IPv4 and IPv6 verbose - Enable verbose response messages","title":"Supported Parameters"},{"location":"user-guide/ddns/client-setup/#special-values","text":"You can use whatismyip for the IP parameters to automatically detect your address: curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=whatismyip\"","title":"Special Values"},{"location":"user-guide/ddns/client-setup/#multiple-ip-management","text":"The system supports managing multiple IP addresses per host: # Update multiple IPv4 addresses curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2\" # Update multiple IPv6 addresses curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip6=2001:db8::1,2001:db8::2\" # Update both IPv4 and IPv6 with cleanup curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2&myip6=2001:db8::1,2001:db8::2&dualstack_update=1\" When using multiple IPs: Omitted record types are preserved Use dualstack_update=1 to clean up both A and AAAA records Records not included in the update are automatically removed Changes are atomic and maintain zone consistency","title":"Multiple IP Management"},{"location":"user-guide/ddns/client-setup/#using-the-shell-script","text":"Download the dynamic DNS client script Make it executable and run: chmod 755 dynamic_dns_client.sh ./dynamic_dns_client.sh","title":"Using the Shell Script"},{"location":"user-guide/ddns/client-setup/#basic-authentication","text":"You can also create a client that uses HTTP basic authentication with username and password.","title":"Basic Authentication"},{"location":"user-guide/ddns/client-setup/#client-script-installation","text":"","title":"Client Script Installation"},{"location":"user-guide/ddns/client-setup/#shell-script","text":"chmod 755 dynamic_dns_client.sh ./dynamic_dns_client.sh","title":"Shell Script"},{"location":"user-guide/ddns/client-setup/#python-script","text":"Install required dependencies: pip install requests Run the script: python dynamic_dns_client.py","title":"Python Script"},{"location":"user-guide/ddns/client-setup/#perl-script","text":"Install required modules: cpan install LWP::UserAgent Run the script: perl dynamic_dns_client.pl","title":"Perl Script"},{"location":"user-guide/ddns/configuration/","text":"Dynamic DNS Configuration This guide will walk you through the process of setting up Dynamic DNS (DDNS) in Poweradmin. Setting Up User Permissions You'll need to create a user with specific permissions for DDNS updates: Create a permission template: Navigate to Users > Add permission template Provide a meaningful name (e.g., \"dynamic\") and description Select required permissions: zone_master_add zone_content_view_own zone_content_edit_own or zone_content_edit_own_as_client or zone_content_edit_others Create a new user: Navigate to Users > Add user Fill in user details Apply the previously created template Configuring DNS Zone After creating a user with appropriate permissions: Log in as the new user Select \"Add master zone\" Enter your domain name Navigate to the created zone Add a record for dynamic updates Server-Side Configuration The Dynamic DNS functionality in Poweradmin is provided by the dynamic_update.php script, which handles DNS record updates when IP addresses change. Configuration Options The main configuration is controlled through Poweradmin's settings: return [ 'dynamicdns' => [ 'enabled' => true, // Enable or disable DDNS functionality 'ttl' => 60, // Default TTL for dynamic records (in seconds) 'allow_auto_detect' => true, // Allow automatic IP detection 'allow_ipv4' => true, // Allow IPv4 updates 'allow_ipv6' => true, // Allow IPv6 updates 'require_authentication' => true, // Require user authentication ], ]; Security Considerations Use HTTPS : Always use HTTPS for DDNS updates to prevent credentials and updates from being intercepted. Create dedicated users : Create specific users for DDNS updates with minimal permissions. IP restrictions : Consider implementing IP restrictions for DDNS user accounts if your update sources have static IP addresses. Regular auditing : Periodically review DDNS activity in logs to detect unusual patterns. Testing Your Configuration After setup, you can test your configuration using: curl -u username:password \"https://yourserver.com/dynamic_update.php?hostname=host.yourdomain.com&myip=auto\" A successful response will look like: good 192.168.1.100 Troubleshooting If you encounter issues with your DDNS setup: Check permissions : Ensure the user has proper permissions for zone editing Verify zone ownership : The user must own or have access to the zone being updated Check authentication : Verify credentials are correctly configured Review logs : Check Poweradmin logs for detailed error messages Test manually : Try manual updates with cURL to isolate client vs. server issues For client setup instructions, see Client Setup .","title":"Configuration"},{"location":"user-guide/ddns/configuration/#dynamic-dns-configuration","text":"This guide will walk you through the process of setting up Dynamic DNS (DDNS) in Poweradmin.","title":"Dynamic DNS Configuration"},{"location":"user-guide/ddns/configuration/#setting-up-user-permissions","text":"You'll need to create a user with specific permissions for DDNS updates: Create a permission template: Navigate to Users > Add permission template Provide a meaningful name (e.g., \"dynamic\") and description Select required permissions: zone_master_add zone_content_view_own zone_content_edit_own or zone_content_edit_own_as_client or zone_content_edit_others Create a new user: Navigate to Users > Add user Fill in user details Apply the previously created template","title":"Setting Up User Permissions"},{"location":"user-guide/ddns/configuration/#configuring-dns-zone","text":"After creating a user with appropriate permissions: Log in as the new user Select \"Add master zone\" Enter your domain name Navigate to the created zone Add a record for dynamic updates","title":"Configuring DNS Zone"},{"location":"user-guide/ddns/configuration/#server-side-configuration","text":"The Dynamic DNS functionality in Poweradmin is provided by the dynamic_update.php script, which handles DNS record updates when IP addresses change.","title":"Server-Side Configuration"},{"location":"user-guide/ddns/configuration/#configuration-options","text":"The main configuration is controlled through Poweradmin's settings: return [ 'dynamicdns' => [ 'enabled' => true, // Enable or disable DDNS functionality 'ttl' => 60, // Default TTL for dynamic records (in seconds) 'allow_auto_detect' => true, // Allow automatic IP detection 'allow_ipv4' => true, // Allow IPv4 updates 'allow_ipv6' => true, // Allow IPv6 updates 'require_authentication' => true, // Require user authentication ], ];","title":"Configuration Options"},{"location":"user-guide/ddns/configuration/#security-considerations","text":"Use HTTPS : Always use HTTPS for DDNS updates to prevent credentials and updates from being intercepted. Create dedicated users : Create specific users for DDNS updates with minimal permissions. IP restrictions : Consider implementing IP restrictions for DDNS user accounts if your update sources have static IP addresses. Regular auditing : Periodically review DDNS activity in logs to detect unusual patterns.","title":"Security Considerations"},{"location":"user-guide/ddns/configuration/#testing-your-configuration","text":"After setup, you can test your configuration using: curl -u username:password \"https://yourserver.com/dynamic_update.php?hostname=host.yourdomain.com&myip=auto\" A successful response will look like: good 192.168.1.100","title":"Testing Your Configuration"},{"location":"user-guide/ddns/configuration/#troubleshooting","text":"If you encounter issues with your DDNS setup: Check permissions : Ensure the user has proper permissions for zone editing Verify zone ownership : The user must own or have access to the zone being updated Check authentication : Verify credentials are correctly configured Review logs : Check Poweradmin logs for detailed error messages Test manually : Try manual updates with cURL to isolate client vs. server issues For client setup instructions, see Client Setup .","title":"Troubleshooting"},{"location":"user-guide/ddns/overview/","text":"Dynamic DNS Overview Dynamic DNS (DDNS) allows you to automatically update DNS records when your IP address changes. This is essential for: Hosting services on connections with dynamic IP addresses Maintaining DNS records for home servers or networks Providing consistent domain name access to systems with changing IP addresses Enabling remote access to home networks or IoT devices Poweradmin's Dynamic DNS implementation offers a flexible API that can be integrated with various automation tools and scripts to keep DNS records up to date. It supports both IPv4 and IPv6 addresses through various update methods. Requirements Before setting up Dynamic DNS, ensure you have: PowerDNS server with Poweradmin interface User account with appropriate permissions One of the following clients: Bash shell environment Python 3.x with requests module Perl with LWP::UserAgent module cURL or any HTTP client tool Features IPv4 and IPv6 support (dual-stack) Multiple IP management : Support for comma-separated IP lists Simultaneous management of multiple A/AAAA records Selective record type updating Intelligent record synchronization : Automatic cleanup of outdated records Database and DNS zone consistency maintenance Optional full sync with dual-stack support Automatic SOA serial updates Flexible authentication (Basic HTTP Authentication and query parameters) TTL management (default 60 seconds) Debugging support with verbose response mode Backward compatibility with legacy clients Implementation Components Server-Side Components dynamic_update.php - Main script for processing DNS updates, supporting: Single or multiple IPv4/IPv6 addresses Automatic IP detection using 'whatismyip' Comma-separated IP lists Dual-stack updates addons/clientip.php - Script that provides the client's public IP address Client-Side Tools Official client scripts: addons/dynamic_dns_client.sh - Bash client script addons/dynamic_dns_client.py - Python client script addons/dynamic_dns_client.pl - Perl client script You can also use cURL or any HTTP client to update DNS records. See the Using cURL guide for examples. Security Features Basic HTTP Authentication Permission-based access control User activity validation IP address validation Domain ownership verification Getting Started To set up and use Dynamic DNS with Poweradmin: Configure Dynamic DNS - Set up user permissions and DNS zones Set up clients - Configure update clients on your devices Using cURL - For manual updates or custom implementations","title":"Overview"},{"location":"user-guide/ddns/overview/#dynamic-dns-overview","text":"Dynamic DNS (DDNS) allows you to automatically update DNS records when your IP address changes. This is essential for: Hosting services on connections with dynamic IP addresses Maintaining DNS records for home servers or networks Providing consistent domain name access to systems with changing IP addresses Enabling remote access to home networks or IoT devices Poweradmin's Dynamic DNS implementation offers a flexible API that can be integrated with various automation tools and scripts to keep DNS records up to date. It supports both IPv4 and IPv6 addresses through various update methods.","title":"Dynamic DNS Overview"},{"location":"user-guide/ddns/overview/#requirements","text":"Before setting up Dynamic DNS, ensure you have: PowerDNS server with Poweradmin interface User account with appropriate permissions One of the following clients: Bash shell environment Python 3.x with requests module Perl with LWP::UserAgent module cURL or any HTTP client tool","title":"Requirements"},{"location":"user-guide/ddns/overview/#features","text":"IPv4 and IPv6 support (dual-stack) Multiple IP management : Support for comma-separated IP lists Simultaneous management of multiple A/AAAA records Selective record type updating Intelligent record synchronization : Automatic cleanup of outdated records Database and DNS zone consistency maintenance Optional full sync with dual-stack support Automatic SOA serial updates Flexible authentication (Basic HTTP Authentication and query parameters) TTL management (default 60 seconds) Debugging support with verbose response mode Backward compatibility with legacy clients","title":"Features"},{"location":"user-guide/ddns/overview/#implementation-components","text":"","title":"Implementation Components"},{"location":"user-guide/ddns/overview/#server-side-components","text":"dynamic_update.php - Main script for processing DNS updates, supporting: Single or multiple IPv4/IPv6 addresses Automatic IP detection using 'whatismyip' Comma-separated IP lists Dual-stack updates addons/clientip.php - Script that provides the client's public IP address","title":"Server-Side Components"},{"location":"user-guide/ddns/overview/#client-side-tools","text":"Official client scripts: addons/dynamic_dns_client.sh - Bash client script addons/dynamic_dns_client.py - Python client script addons/dynamic_dns_client.pl - Perl client script You can also use cURL or any HTTP client to update DNS records. See the Using cURL guide for examples.","title":"Client-Side Tools"},{"location":"user-guide/ddns/overview/#security-features","text":"Basic HTTP Authentication Permission-based access control User activity validation IP address validation Domain ownership verification","title":"Security Features"},{"location":"user-guide/ddns/overview/#getting-started","text":"To set up and use Dynamic DNS with Poweradmin: Configure Dynamic DNS - Set up user permissions and DNS zones Set up clients - Configure update clients on your devices Using cURL - For manual updates or custom implementations","title":"Getting Started"},{"location":"user-guide/ddns/using-curl/","text":"Using cURL for Dynamic DNS Updates cURL is a versatile command-line tool that can be used to update DNS records in Poweradmin. Here are various examples of using cURL with the Dynamic DNS update system. Basic Update Examples Update IPv4 Address curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1\" Automatic IP Detection curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=whatismyip\" Update IPv6 Address curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip6=2001:db8::1\" Advanced Usage Combined Multiple IPv4 and IPv6 Update # Update multiple A records and single AAAA record in one request curl -u user:pass \"https://yourhost/dynamic_update.php?hostname=host.example.com&myip=1.2.3.4,5.6.7.8&myip6=2001:db8::1&dualstack_update=1\" Dual-Stack Update curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1&myip6=2001:db8::1&dualstack_update=1\" Multiple IP Addresses curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2\" Using URL Parameters Instead of Basic Auth curl \"https://dns.example.com/dynamic_update.php?username=user&password=pass&hostname=host.example.com&myip=192.0.2.1\" Scripting Examples Basic Update Script #!/bin/bash USERNAME=\"your_username\" PASSWORD=\"your_password\" HOSTNAME=\"your.hostname.com\" SERVER=\"https://dns.example.com/dynamic_update.php\" curl -s -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\" Periodic Update Script #!/bin/bash USERNAME=\"your_username\" PASSWORD=\"your_password\" HOSTNAME=\"your.hostname.com\" SERVER=\"https://dns.example.com/dynamic_update.php\" INTERVAL=300 # Update every 5 minutes while true; do curl -s -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\" sleep $INTERVAL done Error Handling The update script returns HTTP status codes and messages that can be captured: response=$(curl -s -w \"%{http_code}\" -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\") if [ $response -eq 200 ]; then echo \"Update successful\" else echo \"Update failed with code: $response\" fi Security Considerations Always use HTTPS to protect credentials Consider using Basic Authentication instead of URL parameters Store credentials securely, not in plain text Use specific IP ranges if possible Monitor for unusual update patterns","title":"Using cURL"},{"location":"user-guide/ddns/using-curl/#using-curl-for-dynamic-dns-updates","text":"cURL is a versatile command-line tool that can be used to update DNS records in Poweradmin. Here are various examples of using cURL with the Dynamic DNS update system.","title":"Using cURL for Dynamic DNS Updates"},{"location":"user-guide/ddns/using-curl/#basic-update-examples","text":"","title":"Basic Update Examples"},{"location":"user-guide/ddns/using-curl/#update-ipv4-address","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1\"","title":"Update IPv4 Address"},{"location":"user-guide/ddns/using-curl/#automatic-ip-detection","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=whatismyip\"","title":"Automatic IP Detection"},{"location":"user-guide/ddns/using-curl/#update-ipv6-address","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip6=2001:db8::1\"","title":"Update IPv6 Address"},{"location":"user-guide/ddns/using-curl/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"user-guide/ddns/using-curl/#combined-multiple-ipv4-and-ipv6-update","text":"# Update multiple A records and single AAAA record in one request curl -u user:pass \"https://yourhost/dynamic_update.php?hostname=host.example.com&myip=1.2.3.4,5.6.7.8&myip6=2001:db8::1&dualstack_update=1\"","title":"Combined Multiple IPv4 and IPv6 Update"},{"location":"user-guide/ddns/using-curl/#dual-stack-update","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1&myip6=2001:db8::1&dualstack_update=1\"","title":"Dual-Stack Update"},{"location":"user-guide/ddns/using-curl/#multiple-ip-addresses","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2\"","title":"Multiple IP Addresses"},{"location":"user-guide/ddns/using-curl/#using-url-parameters-instead-of-basic-auth","text":"curl \"https://dns.example.com/dynamic_update.php?username=user&password=pass&hostname=host.example.com&myip=192.0.2.1\"","title":"Using URL Parameters Instead of Basic Auth"},{"location":"user-guide/ddns/using-curl/#scripting-examples","text":"","title":"Scripting Examples"},{"location":"user-guide/ddns/using-curl/#basic-update-script","text":"#!/bin/bash USERNAME=\"your_username\" PASSWORD=\"your_password\" HOSTNAME=\"your.hostname.com\" SERVER=\"https://dns.example.com/dynamic_update.php\" curl -s -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\"","title":"Basic Update Script"},{"location":"user-guide/ddns/using-curl/#periodic-update-script","text":"#!/bin/bash USERNAME=\"your_username\" PASSWORD=\"your_password\" HOSTNAME=\"your.hostname.com\" SERVER=\"https://dns.example.com/dynamic_update.php\" INTERVAL=300 # Update every 5 minutes while true; do curl -s -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\" sleep $INTERVAL done","title":"Periodic Update Script"},{"location":"user-guide/ddns/using-curl/#error-handling","text":"The update script returns HTTP status codes and messages that can be captured: response=$(curl -s -w \"%{http_code}\" -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\") if [ $response -eq 200 ]; then echo \"Update successful\" else echo \"Update failed with code: $response\" fi","title":"Error Handling"},{"location":"user-guide/ddns/using-curl/#security-considerations","text":"Always use HTTPS to protect credentials Consider using Basic Authentication instead of URL parameters Store credentials securely, not in plain text Use specific IP ranges if possible Monitor for unusual update patterns","title":"Security Considerations"}]}