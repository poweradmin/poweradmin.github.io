{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Poweradmin Documentation Welcome to the official documentation for Poweradmin, a web-based administration tool for PowerDNS. Overview Poweradmin is a friendly web interface for managing PowerDNS. It allows you to manage DNS zones and records with ease. Features User Management : Manage users and roles with different permissions DNS Management : Create, update, and delete DNS zones and records Templates : Use templates for bulk operations Dynamic DNS : Configure and manage dynamic DNS settings Security : Implement best practices for securing your DNS infrastructure Logging and Monitoring : Configure logging and monitor your DNS setup API : Access and manage your DNS data programmatically using the Poweradmin API Quick Start Guide Installation : See the Installation Overview for installation options Configuration : Check the Basic Configuration guide to set up your instance User Management : Learn how to manage Users and Roles Using the System : Follow our guides for everyday DNS management tasks Documentation Sections Getting Started : System requirements and feature overview Installation : Detailed installation guides for different environments Configuration : All configuration options and settings User Guide : Practical usage instructions Advanced Topics : Detailed technical information Upgrading : Version-specific upgrade guides Troubleshooting : Solutions for common issues Contributing : How to contribute to the project Community and Support Join our community for support and discussions: GitHub Repository Issue Tracker Discussions License and Disclaimer Poweradmin is licensed under the GPL-3.0 License . This project is not associated with PowerDNS.com , Open-Xchange , or any other external parties. It is independently funded and maintained. Thank you for using Poweradmin!","title":"Home"},{"location":"#poweradmin-documentation","text":"Welcome to the official documentation for Poweradmin, a web-based administration tool for PowerDNS.","title":"Poweradmin Documentation"},{"location":"#overview","text":"Poweradmin is a friendly web interface for managing PowerDNS. It allows you to manage DNS zones and records with ease.","title":"Overview"},{"location":"#features","text":"User Management : Manage users and roles with different permissions DNS Management : Create, update, and delete DNS zones and records Templates : Use templates for bulk operations Dynamic DNS : Configure and manage dynamic DNS settings Security : Implement best practices for securing your DNS infrastructure Logging and Monitoring : Configure logging and monitor your DNS setup API : Access and manage your DNS data programmatically using the Poweradmin API","title":"Features"},{"location":"#quick-start-guide","text":"Installation : See the Installation Overview for installation options Configuration : Check the Basic Configuration guide to set up your instance User Management : Learn how to manage Users and Roles Using the System : Follow our guides for everyday DNS management tasks","title":"Quick Start Guide"},{"location":"#documentation-sections","text":"Getting Started : System requirements and feature overview Installation : Detailed installation guides for different environments Configuration : All configuration options and settings User Guide : Practical usage instructions Advanced Topics : Detailed technical information Upgrading : Version-specific upgrade guides Troubleshooting : Solutions for common issues Contributing : How to contribute to the project","title":"Documentation Sections"},{"location":"#community-and-support","text":"Join our community for support and discussions: GitHub Repository Issue Tracker Discussions","title":"Community and Support"},{"location":"#license-and-disclaimer","text":"Poweradmin is licensed under the GPL-3.0 License . This project is not associated with PowerDNS.com , Open-Xchange , or any other external parties. It is independently funded and maintained. Thank you for using Poweradmin!","title":"License and Disclaimer"},{"location":"advanced/logging-config/","text":"Advanced Logging Configuration This guide provides detailed information about PowerAdmin's advanced logging capabilities and configuration options. For basic logging setup, see the Basic Logging Configuration . Log Types in Detail PowerAdmin supports several logging methods that can be combined for comprehensive monitoring: 1. Native Logging Uses PHP's error_log() function to write logs to the configured PHP error log destination. 'logging' => [ 'type' => 'native', 'level' => 'info', // other settings... ], 2. Null Logging Disables all application logging (except database logging if enabled separately). 'logging' => [ 'type' => 'null', // other settings... ], 3. Database Logging Logs user actions and zone changes to the PowerAdmin database. This is independent of the main logger type. 'logging' => [ // Can be combined with any type 'database_enabled' => true, // other settings... ], 4. Syslog Logging Logs authentication and security events to the system's syslog. 'logging' => [ 'syslog_enabled' => true, 'syslog_identity' => 'poweradmin', // Program identifier in syslog 'syslog_facility' => LOG_USER, // Standard PHP syslog facility constant // other settings... ], Environment-Specific Configurations Production Environment Configuration For a standard production environment: 'logging' => [ 'type' => 'native', 'level' => 'warning', // Only log warning and above 'database_enabled' => true, // Track user actions and zone changes 'syslog_enabled' => true, // Log security events to syslog 'syslog_identity' => 'poweradmin', 'syslog_facility' => LOG_LOCAL0, ], Development Environment Configuration For a development environment: 'logging' => [ 'type' => 'native', 'level' => 'debug', // Log everything including debug messages 'database_enabled' => true, // Track changes for debugging 'syslog_enabled' => false, // Usually not needed in development ], Minimal Logging Configuration For minimal performance impact: 'logging' => [ 'type' => 'null', // Disable application logging 'database_enabled' => false, // Disable database logging 'syslog_enabled' => true, // Keep security logging 'syslog_identity' => 'poweradmin', 'syslog_facility' => LOG_USER, ], Best Practices Production environments : Use warning or error levels to avoid excessive logging Debug temporary issues : Temporarily enable debug level, then return to normal settings Database logging : Useful for audit trails but may impact performance on high-traffic systems Syslog logging : Recommended for security events to integrate with system monitoring Advanced Configuration Custom Log Paths If using native logging, you can control the log file location by configuring PHP's error_log setting in your php.ini file. Log Rotation For production systems, ensure log rotation is configured at the system level: - For syslog: Configure logrotate for your syslog files - For PHP error logs: Configure logrotate for your PHP error log files - For database logs: Implement periodic pruning of old log entries Database Log Tables When database_enabled is true, logs are stored in: - log_users table: Authentication and user management events - log_zones table: DNS zone and record changes","title":"Log Configuration"},{"location":"advanced/logging-config/#advanced-logging-configuration","text":"This guide provides detailed information about PowerAdmin's advanced logging capabilities and configuration options. For basic logging setup, see the Basic Logging Configuration .","title":"Advanced Logging Configuration"},{"location":"advanced/logging-config/#log-types-in-detail","text":"PowerAdmin supports several logging methods that can be combined for comprehensive monitoring:","title":"Log Types in Detail"},{"location":"advanced/logging-config/#1-native-logging","text":"Uses PHP's error_log() function to write logs to the configured PHP error log destination. 'logging' => [ 'type' => 'native', 'level' => 'info', // other settings... ],","title":"1. Native Logging"},{"location":"advanced/logging-config/#2-null-logging","text":"Disables all application logging (except database logging if enabled separately). 'logging' => [ 'type' => 'null', // other settings... ],","title":"2. Null Logging"},{"location":"advanced/logging-config/#3-database-logging","text":"Logs user actions and zone changes to the PowerAdmin database. This is independent of the main logger type. 'logging' => [ // Can be combined with any type 'database_enabled' => true, // other settings... ],","title":"3. Database Logging"},{"location":"advanced/logging-config/#4-syslog-logging","text":"Logs authentication and security events to the system's syslog. 'logging' => [ 'syslog_enabled' => true, 'syslog_identity' => 'poweradmin', // Program identifier in syslog 'syslog_facility' => LOG_USER, // Standard PHP syslog facility constant // other settings... ],","title":"4. Syslog Logging"},{"location":"advanced/logging-config/#environment-specific-configurations","text":"","title":"Environment-Specific Configurations"},{"location":"advanced/logging-config/#production-environment-configuration","text":"For a standard production environment: 'logging' => [ 'type' => 'native', 'level' => 'warning', // Only log warning and above 'database_enabled' => true, // Track user actions and zone changes 'syslog_enabled' => true, // Log security events to syslog 'syslog_identity' => 'poweradmin', 'syslog_facility' => LOG_LOCAL0, ],","title":"Production Environment Configuration"},{"location":"advanced/logging-config/#development-environment-configuration","text":"For a development environment: 'logging' => [ 'type' => 'native', 'level' => 'debug', // Log everything including debug messages 'database_enabled' => true, // Track changes for debugging 'syslog_enabled' => false, // Usually not needed in development ],","title":"Development Environment Configuration"},{"location":"advanced/logging-config/#minimal-logging-configuration","text":"For minimal performance impact: 'logging' => [ 'type' => 'null', // Disable application logging 'database_enabled' => false, // Disable database logging 'syslog_enabled' => true, // Keep security logging 'syslog_identity' => 'poweradmin', 'syslog_facility' => LOG_USER, ],","title":"Minimal Logging Configuration"},{"location":"advanced/logging-config/#best-practices","text":"Production environments : Use warning or error levels to avoid excessive logging Debug temporary issues : Temporarily enable debug level, then return to normal settings Database logging : Useful for audit trails but may impact performance on high-traffic systems Syslog logging : Recommended for security events to integrate with system monitoring","title":"Best Practices"},{"location":"advanced/logging-config/#advanced-configuration","text":"","title":"Advanced Configuration"},{"location":"advanced/logging-config/#custom-log-paths","text":"If using native logging, you can control the log file location by configuring PHP's error_log setting in your php.ini file.","title":"Custom Log Paths"},{"location":"advanced/logging-config/#log-rotation","text":"For production systems, ensure log rotation is configured at the system level: - For syslog: Configure logrotate for your syslog files - For PHP error logs: Configure logrotate for your PHP error log files - For database logs: Implement periodic pruning of old log entries","title":"Log Rotation"},{"location":"advanced/logging-config/#database-log-tables","text":"When database_enabled is true, logs are stored in: - log_users table: Authentication and user management events - log_zones table: DNS zone and record changes","title":"Database Log Tables"},{"location":"configuration/basic/","text":"Basic Configuration Poweradmin supports two configuration formats: legacy (individual PHP variables) and modern (array-based configuration). Configuration Files With any new installation, the file config/settings.defaults.php (or in legacy versions, inc/config-defaults.inc.php ) is distributed. You should not edit this file as your changes will likely be overwritten during upgrades. Instead: - Modern format: Create config/settings.php - Legacy format: Create inc/config.inc.php Your custom settings will override the defaults. This way, new configuration options can be added with sensible defaults without breaking your existing configuration. Legacy Configuration Format This is the traditional format, still supported for backwards compatibility: <?php $db_host = 'localhost'; $db_name = 'powerdns-db'; $db_user = 'poweradmin-db-user'; $db_pass = 'poweradmin-db-user-password'; $db_type = 'mysql'; $session_key = 'generate-some-random-text-here'; $dns_hostmaster = 'hostmaster.example.net'; $dns_ns1 = 'ns1.example.net'; $dns_ns2 = 'ns2.example.net'; Modern Configuration Format The recommended modern format uses a PHP array structure: <?php return [ 'database' => [ 'host' => 'localhost', 'name' => 'powerdns-db', 'user' => 'poweradmin-db-user', 'password' => 'poweradmin-db-user-password', 'type' => 'mysql', ], 'security' => [ 'session_key' => 'change_this_key', ], 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', ], ]; Configuration Sections The modern configuration format is organized into logical sections: database : Database connection settings security : Security-related settings including password policies and session management dns : DNS-specific configurations including nameserver details interface : UI and display preferences logging : Logging configuration pdns_api : PowerDNS API integration settings Configuration Variables The following configuration variables are available in the legacy format, with their modern array format equivalents: Database Settings Legacy variable Modern equivalent Default value Description Added in version $db_host database.host no default The host to connect to for access to the database. $db_port database.port no default The port to use for database connection. $db_user database.user no default The username to use to access the database. $db_pass database.password no default The password to use to access the database. $db_name database.name no default The name of the database of PowerDNS. $db_type database.type no default The type of the database of PowerDNS. Poweradmin currently has support for 'mysql', 'mysqli', 'pgsql' and 'sqlite'. mysqli - 2.1.5, sqlite - 2.1.6 $db_charset database.charset no default The charset set which is used for communication with database (for example - 'utf8' for MySQL) 2.1.8 $db_file database.file no default Used only for SQLite, provide full path to database file 2.1.6 $db_debug database.debug false Show all executed SQL queries (if true) 2.1.6 $pdns_db_name database.pdns_name powerdns Used for a separate database for PowerDNS (experimental feature) 3.8.0 API Settings Legacy variable Modern equivalent Default value Description Added in version $pdns_api_url pdns_api.url no default The endpoint for establishing a connection to the PowerDNS API. 3.7.0 $pdns_api_key pdns_api.key no default The authentication key required for establishing a connection with the PowerDNS API. 3.7.0 Security Settings Legacy variable Modern equivalent Default value Description Added in version $session_key security.session_key p0w3r4dm1n The key used for session data encryption 2.1.6 $password_encryption security.password_encryption \"bcrypt\" The type of encryption used for keeping user passwords in database. Other possible values - md5, md5salt (compatible with WHMCS), argon2i, argon2id 2.1.6 $password_encryption_cost security.password_encryption_cost 12 The algorithmic cost (needed for bcrypt) 2.1.8 $login_token_validation security.login_token_validation true Enable or disable login token validation 3.9.0 $global_token_validation security.global_token_validation true Enable or disable global token validation 3.9.0 Interface Settings Legacy variable Modern equivalent Default value Description Added in version $iface_lang interface.lang en_EN The language for the interface. $iface_enabled_languages interface.enabled_languages multiple* Languages enabled in the interface. 3.8.0 $iface_style interface.style ignite The CSS template to use as skin of web interface. See \"style/\" directory. If you want a dark theme, use 'spark'. $iface_templates interface.templates templates The HTML templates to use for web interface. See \"templates/\" directory. 2.2.3 $iface_rowamount interface.rowamount 10 The maximum number of rows that should be shown (usefull if you have a large number of zones or records). $iface_expire interface.expire 1800 Session time-out in seconds. After this timeout, you are automagically logged out. $iface_zonelist_serial interface.zonelist_serial false Enable (true) or disable (false) display of zone's serial in the zone listing. $iface_zonelist_template interface.zonelist_template false Enable (true) or disable (false) display of zone's template in the zone listing. $iface_title interface.title Poweradmin The title which is showed in header 2.1.5 $iface_add_reverse_record interface.add_reverse_record true Displays a checkbox for adding a reverse record 2.1.7 $iface_add_domain_record interface.add_domain_record true Displays a checkbox for adding an A/AAAA record from the reverse zone view $iface_zone_type_default interface.zone_type_default MASTER Default zone type when creating new zones 2.1.9 $iface_zone_comments interface.zone_comments true Show or hide zone comments 2.2.3 $iface_record_comments interface.record_comments false Show or hide record comments 3.9.0 $iface_index interface.index cards Interface display mode (cards or list) 3.2.0 $iface_search_group_records interface.search_group_records false Group records by name and content in search results 3.8.0 $iface_edit_show_id interface.edit_show_id true Show or hide record ID in edit form 3.9.0 $iface_edit_add_record_top interface.edit_add_record_top false Add new record fields on top of the list 3.9.0 $iface_edit_save_changes_top interface.edit_save_changes_top false Save changes button on top of the list 3.9.0 $iface_migrations_show interface.migrations_show false Show or hide migrations in the menu (experimental) * Default enabled languages: cs_CZ, de_DE, en_EN, fr_FR, it_IT, ja_JP, lt_LT, nb_NO, nl_NL, pl_PL, ru_RU, tr_TR, zh_CN DNS Settings Legacy variable Modern equivalent Default value Description Added in version $dns_hostmaster dns.hostmaster no default The default emailaddress to use for the RP in the SOA record. For example: 'hostmaster.example.net'. $dns_ns1 dns.ns1 no default The default primary nameserver. $dns_ns2 dns.ns2 no default The default secondary nameserver. $dns_ns3 dns.ns3 no default The third secondary nameserver. $dns_ns4 dns.ns4 no default The fourth secondary nameserver. $dns_ttl dns.ttl 86400 The default TTL for records (in seconds of course). $dns_soa dns.soa 28800 7200 604800 86400 SOA settings for refresh, retry, expire and minimum 2.2.3 $dns_strict_tld_check dns.strict_tld_check false If enabled (true), allow official TLD's only. $dns_top_level_tld_check dns.top_level_tld_check false Don't allow to create top level TLDs 2.1.7 $dns_third_level_check dns.third_level_check false Don't allow to create third level domains 2.1.7 $dns_txt_auto_quote dns.txt_auto_quote false Automatically quote TXT records 3.9.2 Timezone Settings Legacy variable Modern equivalent Default value Description Added in version $timezone timezone UTC Set timezone (for php 5.1.0+). See http://www.php.net/manual/en/timezones.php for list of supported timezones. Logging Settings Legacy variable Modern equivalent Default value Description Added in version $logger_type logging.type null Logger type (null, native) 3.9.0 $logger_level logging.level info Logging level (debug, info, notice, warning, error, critical, alert, emergency) 3.9.0 $syslog_use logging.syslog.use false Enable (true) or disable (false) logging of authentication attempts and other operations to syslog 2.1.6 $syslog_ident logging.syslog.ident poweradmin Specifies program name which is added to syslog message 2.1.6 $syslog_facility logging.syslog.facility LOG_USER Specifies what type of program is logging the message 2.1.6 $dblog_use logging.dblog.use false Enable (true) or disable (false) logging to database 3.2.0 DNSSEC Settings Legacy variable Modern equivalent Default value Description Added in version $pdnssec_use dnssec.use false Enable (true) or disable (false) DNSSEC support 2.1.7 $pdnssec_debug dnssec.debug false Enable debug for DNSSEC operations 2.1.9 $pdnssec_command dnssec.command /usr/bin/pdnsutil Full path to pdnsutil utility (will be deprecated in the future) 2.1.7 LDAP Settings Legacy variable Modern equivalent Default value Description Added in version $ldap_use ldap.use false Authenticate against directory service (LDAP/Active Directory) 2.1.7 $ldap_debug ldap.debug false Enable debug for LDAP connection 2.1.7 $ldap_uri ldap.uri ldap://domaincontroller.example.com LDAP URI 2.1.7 $ldap_basedn ldap.basedn ou=users,dc=example,dc=com The top level of the LDAP directory tree 2.1.7 $ldap_search_filter ldap.search_filter no default Filter for LDAP search 2.1.7 $ldap_binddn ldap.binddn cn=admin,dc=example,dc=com LDAP user 2.1.7 $ldap_bindpw ldap.bindpw some_password password for LDAP user 2.1.7 $ldap_user_attribute ldap.user_attribute uid username attribute used in LDAP search filter 2.1.7 $ldap_proto ldap.proto 3 LDAP protocol version 2.1.7 LDAP search filter examples: $ldap_search_filter = '(memberOf=cn=powerdns,ou=groups,dc=poweradmin,dc=org)'; $ldap_search_filter = '(objectClass=account)'; $ldap_search_filter = '(objectClass=person)(memberOf=cn=admins,ou=groups,dc=poweradmin,dc=org)'; $ldap_search_filter = '(cn=*admin*)'; Other Settings Legacy variable Modern equivalent Default value Description Added in version $display_stats display_stats false Displays the memory consumption and execution time of an application $experimental_edit_conflict_resolution edit_conflict_resolution last_writer_wins Controls how concurrent updates are handled (last_writer_wins, only_latest_version, 3_way_merge) $record_comments_sync record_comments_sync false Enable bidirectional comment synchronization between A and PTR records 3.9.0 For detailed information about specific settings, see: Database Configuration DNS Settings Security Policies PowerDNS API LDAP Integration Logging Setup Important Notes When using the modern format, all settings should be included in the array structure The legacy format is maintained for backward compatibility but new installations should use the modern format Never commit sensitive information like passwords to version control Always change default values, especially the session_key , in production environments Make sure to set appropriate file permissions on your configuration file","title":"Basic Configuration"},{"location":"configuration/basic/#basic-configuration","text":"Poweradmin supports two configuration formats: legacy (individual PHP variables) and modern (array-based configuration).","title":"Basic Configuration"},{"location":"configuration/basic/#configuration-files","text":"With any new installation, the file config/settings.defaults.php (or in legacy versions, inc/config-defaults.inc.php ) is distributed. You should not edit this file as your changes will likely be overwritten during upgrades. Instead: - Modern format: Create config/settings.php - Legacy format: Create inc/config.inc.php Your custom settings will override the defaults. This way, new configuration options can be added with sensible defaults without breaking your existing configuration.","title":"Configuration Files"},{"location":"configuration/basic/#legacy-configuration-format","text":"This is the traditional format, still supported for backwards compatibility: <?php $db_host = 'localhost'; $db_name = 'powerdns-db'; $db_user = 'poweradmin-db-user'; $db_pass = 'poweradmin-db-user-password'; $db_type = 'mysql'; $session_key = 'generate-some-random-text-here'; $dns_hostmaster = 'hostmaster.example.net'; $dns_ns1 = 'ns1.example.net'; $dns_ns2 = 'ns2.example.net';","title":"Legacy Configuration Format"},{"location":"configuration/basic/#modern-configuration-format","text":"The recommended modern format uses a PHP array structure: <?php return [ 'database' => [ 'host' => 'localhost', 'name' => 'powerdns-db', 'user' => 'poweradmin-db-user', 'password' => 'poweradmin-db-user-password', 'type' => 'mysql', ], 'security' => [ 'session_key' => 'change_this_key', ], 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', ], ];","title":"Modern Configuration Format"},{"location":"configuration/basic/#configuration-sections","text":"The modern configuration format is organized into logical sections: database : Database connection settings security : Security-related settings including password policies and session management dns : DNS-specific configurations including nameserver details interface : UI and display preferences logging : Logging configuration pdns_api : PowerDNS API integration settings","title":"Configuration Sections"},{"location":"configuration/basic/#configuration-variables","text":"The following configuration variables are available in the legacy format, with their modern array format equivalents:","title":"Configuration Variables"},{"location":"configuration/basic/#database-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $db_host database.host no default The host to connect to for access to the database. $db_port database.port no default The port to use for database connection. $db_user database.user no default The username to use to access the database. $db_pass database.password no default The password to use to access the database. $db_name database.name no default The name of the database of PowerDNS. $db_type database.type no default The type of the database of PowerDNS. Poweradmin currently has support for 'mysql', 'mysqli', 'pgsql' and 'sqlite'. mysqli - 2.1.5, sqlite - 2.1.6 $db_charset database.charset no default The charset set which is used for communication with database (for example - 'utf8' for MySQL) 2.1.8 $db_file database.file no default Used only for SQLite, provide full path to database file 2.1.6 $db_debug database.debug false Show all executed SQL queries (if true) 2.1.6 $pdns_db_name database.pdns_name powerdns Used for a separate database for PowerDNS (experimental feature) 3.8.0","title":"Database Settings"},{"location":"configuration/basic/#api-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $pdns_api_url pdns_api.url no default The endpoint for establishing a connection to the PowerDNS API. 3.7.0 $pdns_api_key pdns_api.key no default The authentication key required for establishing a connection with the PowerDNS API. 3.7.0","title":"API Settings"},{"location":"configuration/basic/#security-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $session_key security.session_key p0w3r4dm1n The key used for session data encryption 2.1.6 $password_encryption security.password_encryption \"bcrypt\" The type of encryption used for keeping user passwords in database. Other possible values - md5, md5salt (compatible with WHMCS), argon2i, argon2id 2.1.6 $password_encryption_cost security.password_encryption_cost 12 The algorithmic cost (needed for bcrypt) 2.1.8 $login_token_validation security.login_token_validation true Enable or disable login token validation 3.9.0 $global_token_validation security.global_token_validation true Enable or disable global token validation 3.9.0","title":"Security Settings"},{"location":"configuration/basic/#interface-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $iface_lang interface.lang en_EN The language for the interface. $iface_enabled_languages interface.enabled_languages multiple* Languages enabled in the interface. 3.8.0 $iface_style interface.style ignite The CSS template to use as skin of web interface. See \"style/\" directory. If you want a dark theme, use 'spark'. $iface_templates interface.templates templates The HTML templates to use for web interface. See \"templates/\" directory. 2.2.3 $iface_rowamount interface.rowamount 10 The maximum number of rows that should be shown (usefull if you have a large number of zones or records). $iface_expire interface.expire 1800 Session time-out in seconds. After this timeout, you are automagically logged out. $iface_zonelist_serial interface.zonelist_serial false Enable (true) or disable (false) display of zone's serial in the zone listing. $iface_zonelist_template interface.zonelist_template false Enable (true) or disable (false) display of zone's template in the zone listing. $iface_title interface.title Poweradmin The title which is showed in header 2.1.5 $iface_add_reverse_record interface.add_reverse_record true Displays a checkbox for adding a reverse record 2.1.7 $iface_add_domain_record interface.add_domain_record true Displays a checkbox for adding an A/AAAA record from the reverse zone view $iface_zone_type_default interface.zone_type_default MASTER Default zone type when creating new zones 2.1.9 $iface_zone_comments interface.zone_comments true Show or hide zone comments 2.2.3 $iface_record_comments interface.record_comments false Show or hide record comments 3.9.0 $iface_index interface.index cards Interface display mode (cards or list) 3.2.0 $iface_search_group_records interface.search_group_records false Group records by name and content in search results 3.8.0 $iface_edit_show_id interface.edit_show_id true Show or hide record ID in edit form 3.9.0 $iface_edit_add_record_top interface.edit_add_record_top false Add new record fields on top of the list 3.9.0 $iface_edit_save_changes_top interface.edit_save_changes_top false Save changes button on top of the list 3.9.0 $iface_migrations_show interface.migrations_show false Show or hide migrations in the menu (experimental) * Default enabled languages: cs_CZ, de_DE, en_EN, fr_FR, it_IT, ja_JP, lt_LT, nb_NO, nl_NL, pl_PL, ru_RU, tr_TR, zh_CN","title":"Interface Settings"},{"location":"configuration/basic/#dns-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $dns_hostmaster dns.hostmaster no default The default emailaddress to use for the RP in the SOA record. For example: 'hostmaster.example.net'. $dns_ns1 dns.ns1 no default The default primary nameserver. $dns_ns2 dns.ns2 no default The default secondary nameserver. $dns_ns3 dns.ns3 no default The third secondary nameserver. $dns_ns4 dns.ns4 no default The fourth secondary nameserver. $dns_ttl dns.ttl 86400 The default TTL for records (in seconds of course). $dns_soa dns.soa 28800 7200 604800 86400 SOA settings for refresh, retry, expire and minimum 2.2.3 $dns_strict_tld_check dns.strict_tld_check false If enabled (true), allow official TLD's only. $dns_top_level_tld_check dns.top_level_tld_check false Don't allow to create top level TLDs 2.1.7 $dns_third_level_check dns.third_level_check false Don't allow to create third level domains 2.1.7 $dns_txt_auto_quote dns.txt_auto_quote false Automatically quote TXT records 3.9.2","title":"DNS Settings"},{"location":"configuration/basic/#timezone-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $timezone timezone UTC Set timezone (for php 5.1.0+). See http://www.php.net/manual/en/timezones.php for list of supported timezones.","title":"Timezone Settings"},{"location":"configuration/basic/#logging-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $logger_type logging.type null Logger type (null, native) 3.9.0 $logger_level logging.level info Logging level (debug, info, notice, warning, error, critical, alert, emergency) 3.9.0 $syslog_use logging.syslog.use false Enable (true) or disable (false) logging of authentication attempts and other operations to syslog 2.1.6 $syslog_ident logging.syslog.ident poweradmin Specifies program name which is added to syslog message 2.1.6 $syslog_facility logging.syslog.facility LOG_USER Specifies what type of program is logging the message 2.1.6 $dblog_use logging.dblog.use false Enable (true) or disable (false) logging to database 3.2.0","title":"Logging Settings"},{"location":"configuration/basic/#dnssec-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $pdnssec_use dnssec.use false Enable (true) or disable (false) DNSSEC support 2.1.7 $pdnssec_debug dnssec.debug false Enable debug for DNSSEC operations 2.1.9 $pdnssec_command dnssec.command /usr/bin/pdnsutil Full path to pdnsutil utility (will be deprecated in the future) 2.1.7","title":"DNSSEC Settings"},{"location":"configuration/basic/#ldap-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $ldap_use ldap.use false Authenticate against directory service (LDAP/Active Directory) 2.1.7 $ldap_debug ldap.debug false Enable debug for LDAP connection 2.1.7 $ldap_uri ldap.uri ldap://domaincontroller.example.com LDAP URI 2.1.7 $ldap_basedn ldap.basedn ou=users,dc=example,dc=com The top level of the LDAP directory tree 2.1.7 $ldap_search_filter ldap.search_filter no default Filter for LDAP search 2.1.7 $ldap_binddn ldap.binddn cn=admin,dc=example,dc=com LDAP user 2.1.7 $ldap_bindpw ldap.bindpw some_password password for LDAP user 2.1.7 $ldap_user_attribute ldap.user_attribute uid username attribute used in LDAP search filter 2.1.7 $ldap_proto ldap.proto 3 LDAP protocol version 2.1.7 LDAP search filter examples: $ldap_search_filter = '(memberOf=cn=powerdns,ou=groups,dc=poweradmin,dc=org)'; $ldap_search_filter = '(objectClass=account)'; $ldap_search_filter = '(objectClass=person)(memberOf=cn=admins,ou=groups,dc=poweradmin,dc=org)'; $ldap_search_filter = '(cn=*admin*)';","title":"LDAP Settings"},{"location":"configuration/basic/#other-settings","text":"Legacy variable Modern equivalent Default value Description Added in version $display_stats display_stats false Displays the memory consumption and execution time of an application $experimental_edit_conflict_resolution edit_conflict_resolution last_writer_wins Controls how concurrent updates are handled (last_writer_wins, only_latest_version, 3_way_merge) $record_comments_sync record_comments_sync false Enable bidirectional comment synchronization between A and PTR records 3.9.0 For detailed information about specific settings, see: Database Configuration DNS Settings Security Policies PowerDNS API LDAP Integration Logging Setup","title":"Other Settings"},{"location":"configuration/basic/#important-notes","text":"When using the modern format, all settings should be included in the array structure The legacy format is maintained for backward compatibility but new installations should use the modern format Never commit sensitive information like passwords to version control Always change default values, especially the session_key , in production environments Make sure to set appropriate file permissions on your configuration file","title":"Important Notes"},{"location":"configuration/database/","text":"Database Configuration Poweradmin's database settings are configured in the config/settings.php file under the database section. This guide covers the general configuration options. For database-specific setup instructions, refer to the links at the bottom of this page. Configuration Options type : Database type. Options: 'mysql', 'pgsql', 'sqlite'. Default: 'mysql' host : Database server hostname. Default: 'localhost' port : Database server port. Default: '3306' for MySQL, '5432' for PostgreSQL name : Database name. Default: 'powerdns' user : Database username password : Database password charset : Database character set. Options: 'latin1', 'utf8', 'utf8mb4'. Default: 'latin1' file : SQLite database file path (only for SQLite) debug : Enable SQL query debugging. Default: false Example Configuration return [ 'database' => [ 'host' => 'localhost', 'port' => '3306', 'name' => 'powerdns', 'user' => 'poweradmin', 'password' => 'your_secure_password', 'type' => 'mysql', 'charset' => 'latin1', 'file' => '', 'debug' => false, ], ]; Database Types Poweradmin supports multiple database backends: MySQL/MariaDB (recommended): Offers good performance and wide compatibility PostgreSQL : Provides advanced features and strict SQL standard compliance SQLite : Lightweight option for small deployments or testing Database-Specific Setup Guides For detailed setup instructions for each database type, including schema creation, permissions, and optimization tips, see: MySQL/MariaDB Setup PostgreSQL Setup SQLite Setup These guides provide comprehensive information about: - Creating users and databases - Setting up permissions - Installing schema files - Performance optimization - Troubleshooting common issues","title":"Database Configuration"},{"location":"configuration/database/#database-configuration","text":"Poweradmin's database settings are configured in the config/settings.php file under the database section. This guide covers the general configuration options. For database-specific setup instructions, refer to the links at the bottom of this page.","title":"Database Configuration"},{"location":"configuration/database/#configuration-options","text":"type : Database type. Options: 'mysql', 'pgsql', 'sqlite'. Default: 'mysql' host : Database server hostname. Default: 'localhost' port : Database server port. Default: '3306' for MySQL, '5432' for PostgreSQL name : Database name. Default: 'powerdns' user : Database username password : Database password charset : Database character set. Options: 'latin1', 'utf8', 'utf8mb4'. Default: 'latin1' file : SQLite database file path (only for SQLite) debug : Enable SQL query debugging. Default: false","title":"Configuration Options"},{"location":"configuration/database/#example-configuration","text":"return [ 'database' => [ 'host' => 'localhost', 'port' => '3306', 'name' => 'powerdns', 'user' => 'poweradmin', 'password' => 'your_secure_password', 'type' => 'mysql', 'charset' => 'latin1', 'file' => '', 'debug' => false, ], ];","title":"Example Configuration"},{"location":"configuration/database/#database-types","text":"Poweradmin supports multiple database backends: MySQL/MariaDB (recommended): Offers good performance and wide compatibility PostgreSQL : Provides advanced features and strict SQL standard compliance SQLite : Lightweight option for small deployments or testing","title":"Database Types"},{"location":"configuration/database/#database-specific-setup-guides","text":"For detailed setup instructions for each database type, including schema creation, permissions, and optimization tips, see: MySQL/MariaDB Setup PostgreSQL Setup SQLite Setup These guides provide comprehensive information about: - Creating users and databases - Setting up permissions - Installing schema files - Performance optimization - Troubleshooting common issues","title":"Database-Specific Setup Guides"},{"location":"configuration/dns-settings/","text":"DNS Settings DNS settings in Poweradmin can be configured through the config/settings.php file under the dns section or through individual variables in the legacy configuration format. Configuration Options Legacy variable Modern equivalent Default value Description Added in version $dns_hostmaster dns.hostmaster no default The default email address to use for the SOA record (e.g., 'hostmaster.example.net'). $dns_ns1 dns.ns1 no default The default primary nameserver. $dns_ns2 dns.ns2 no default The default secondary nameserver. $dns_ns3 dns.ns3 no default The third nameserver. $dns_ns4 dns.ns4 no default The fourth nameserver. $dns_ttl dns.ttl 86400 The default TTL for records (in seconds). $dns_soa (see below) 28800 7200 604800 86400 SOA settings for refresh, retry, expire and minimum 2.2.3 - dns.soa_refresh 28800 SOA refresh time 2.2.3 - dns.soa_retry 7200 SOA retry time 2.2.3 - dns.soa_expire 604800 SOA expire time 2.2.3 - dns.soa_minimum 86400 SOA minimum TTL 2.2.3 $dns_strict_tld_check dns.strict_tld_check false If enabled (true), allow official TLDs only. $dns_top_level_tld_check dns.top_level_tld_check false Don't allow creation of top-level TLDs when true. 2.1.7 $dns_third_level_check dns.third_level_check false Don't allow creation of third-level domains when true. 2.1.7 $dns_txt_auto_quote dns.txt_auto_quote false Automatically quote TXT records when true. 3.9.2 $iface_zone_type_default dns.zone_type_default MASTER Default zone type when creating new zones. 2.1.9 SOA Record Settings In the modern configuration format, the SOA settings are configured as individual parameters: refresh : The time interval before the zone should be refreshed. Default: 28800 (8 hours) retry : The time interval that should elapse before a failed refresh should be retried. Default: 7200 (2 hours) expire : The upper limit on the time interval that can elapse before the zone is no longer authoritative. Default: 604800 (1 week) minimum : The negative result TTL. Default: 86400 (24 hours) In the legacy format, these are combined in the $dns_soa variable as a space-separated string. Modern Configuration Example return [ 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', 'ns3' => 'ns3.example.com', 'ns4' => 'ns4.example.com', 'ttl' => 86400, // SOA settings 'soa_refresh' => 28800, 'soa_retry' => 7200, 'soa_expire' => 604800, 'soa_minimum' => 86400, 'zone_type_default' => 'MASTER', 'strict_tld_check' => false, 'top_level_tld_check' => false, 'third_level_check' => false, 'txt_auto_quote' => false, ], ]; Legacy Configuration Example <?php // DNS settings $dns_hostmaster = 'hostmaster.example.com'; $dns_ns1 = 'ns1.example.com'; $dns_ns2 = 'ns2.example.com'; $dns_ns3 = 'ns3.example.com'; $dns_ns4 = 'ns4.example.com'; $dns_ttl = 86400; $dns_soa = '28800 7200 604800 86400'; $dns_strict_tld_check = false; $dns_top_level_tld_check = false; $dns_third_level_check = false; $dns_txt_auto_quote = false; $iface_zone_type_default = 'MASTER';","title":"DNS Settings"},{"location":"configuration/dns-settings/#dns-settings","text":"DNS settings in Poweradmin can be configured through the config/settings.php file under the dns section or through individual variables in the legacy configuration format.","title":"DNS Settings"},{"location":"configuration/dns-settings/#configuration-options","text":"Legacy variable Modern equivalent Default value Description Added in version $dns_hostmaster dns.hostmaster no default The default email address to use for the SOA record (e.g., 'hostmaster.example.net'). $dns_ns1 dns.ns1 no default The default primary nameserver. $dns_ns2 dns.ns2 no default The default secondary nameserver. $dns_ns3 dns.ns3 no default The third nameserver. $dns_ns4 dns.ns4 no default The fourth nameserver. $dns_ttl dns.ttl 86400 The default TTL for records (in seconds). $dns_soa (see below) 28800 7200 604800 86400 SOA settings for refresh, retry, expire and minimum 2.2.3 - dns.soa_refresh 28800 SOA refresh time 2.2.3 - dns.soa_retry 7200 SOA retry time 2.2.3 - dns.soa_expire 604800 SOA expire time 2.2.3 - dns.soa_minimum 86400 SOA minimum TTL 2.2.3 $dns_strict_tld_check dns.strict_tld_check false If enabled (true), allow official TLDs only. $dns_top_level_tld_check dns.top_level_tld_check false Don't allow creation of top-level TLDs when true. 2.1.7 $dns_third_level_check dns.third_level_check false Don't allow creation of third-level domains when true. 2.1.7 $dns_txt_auto_quote dns.txt_auto_quote false Automatically quote TXT records when true. 3.9.2 $iface_zone_type_default dns.zone_type_default MASTER Default zone type when creating new zones. 2.1.9","title":"Configuration Options"},{"location":"configuration/dns-settings/#soa-record-settings","text":"In the modern configuration format, the SOA settings are configured as individual parameters: refresh : The time interval before the zone should be refreshed. Default: 28800 (8 hours) retry : The time interval that should elapse before a failed refresh should be retried. Default: 7200 (2 hours) expire : The upper limit on the time interval that can elapse before the zone is no longer authoritative. Default: 604800 (1 week) minimum : The negative result TTL. Default: 86400 (24 hours) In the legacy format, these are combined in the $dns_soa variable as a space-separated string.","title":"SOA Record Settings"},{"location":"configuration/dns-settings/#modern-configuration-example","text":"return [ 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', 'ns3' => 'ns3.example.com', 'ns4' => 'ns4.example.com', 'ttl' => 86400, // SOA settings 'soa_refresh' => 28800, 'soa_retry' => 7200, 'soa_expire' => 604800, 'soa_minimum' => 86400, 'zone_type_default' => 'MASTER', 'strict_tld_check' => false, 'top_level_tld_check' => false, 'third_level_check' => false, 'txt_auto_quote' => false, ], ];","title":"Modern Configuration Example"},{"location":"configuration/dns-settings/#legacy-configuration-example","text":"<?php // DNS settings $dns_hostmaster = 'hostmaster.example.com'; $dns_ns1 = 'ns1.example.com'; $dns_ns2 = 'ns2.example.com'; $dns_ns3 = 'ns3.example.com'; $dns_ns4 = 'ns4.example.com'; $dns_ttl = 86400; $dns_soa = '28800 7200 604800 86400'; $dns_strict_tld_check = false; $dns_top_level_tld_check = false; $dns_third_level_check = false; $dns_txt_auto_quote = false; $iface_zone_type_default = 'MASTER';","title":"Legacy Configuration Example"},{"location":"configuration/dnssec/","text":"DNSSEC Configuration Overview PowerAdmin provides comprehensive support for DNSSEC (Domain Name System Security Extensions) through a well-structured implementation that follows domain-driven design principles. The system offers two implementation methods: PowerDNS API Integration (Recommended): Uses the PowerDNS REST API for DNSSEC operations pdnsutil Command-line Tool (Legacy): Uses the pdnsutil command-line utility The DNSSEC implementation enables you to: - Secure and unsecure zones - Manage cryptographic keys (create, activate, deactivate, delete) - View DS (Delegation Signer) and DNSKEY records - Manage DNSSEC key rollovers Basic Concepts Zone Signing Keys (ZSK) : Used to sign the actual DNS records Key Signing Keys (KSK) : Used to sign the ZSK and establish trust DS Records : Delegation Signer records that help establish the trust chain Key Rotation : Regular update of keys for enhanced security Prerequisites PowerDNS version 4.0.0 or higher PowerDNS with DNSSEC support Proper database configuration API access configured (see PowerDNS API Configuration ) Configuration Options DNSSEC settings can be configured in the config/settings.php file under the dnssec section or through individual variables in the legacy configuration format. Legacy variable Modern equivalent Default value Description Added in version $pdnssec_use dnssec.enabled false Enable (true) or disable (false) DNSSEC support 2.1.7 $pdnssec_debug dnssec.debug false Enable debug for DNSSEC operations 2.1.9 $pdnssec_command dnssec.command /usr/bin/pdnsutil Full path to pdnsutil utility (will be deprecated in the future) 2.1.7 Implementation Methods Option 1: PowerDNS API Method (Recommended) To enable DNSSEC using the PowerDNS API: Configure your PowerDNS server with API access Update your PowerAdmin configuration file with the following settings: return [ 'dnssec' => [ 'enabled' => true, 'debug' => false, ], 'pdns_api' => [ 'url' => 'http://localhost:8081', 'key' => 'your-api-key', ], ]; The API method provides several advantages: - No need to configure special permissions for the web server user - More secure as it doesn't require shell access - Better error handling and feedback - Full support for all DNSSEC operations Option 2: pdnsutil Method (Legacy) If you can't use the API method, you can still use the legacy pdnsutil approach: return [ 'dnssec' => [ 'enabled' => true, 'debug' => false, 'command' => '/usr/bin/pdnsutil', ], 'pdns_api' => [ 'url' => '', 'key' => '', ], ]; Configure permissions for the web server user to run pdnsutil: For example, on Ubuntu with Apache: # Add the web server user to the root group adduser www-data root # Make pdns.conf readable by the web server user chmod 640 /etc/powerdns/pdns.conf Important Note : The pdnsutil method requires the web server user to have access to the PowerDNS configuration file, which poses security risks. The API method is strongly recommended. PowerDNS Configuration Make sure to enable DNSSEC in your PowerDNS configuration: dnssec=yes api=yes api-key=your_api_key Verification Check DNSSEC status using: dig +dnssec example.com SOA Troubleshooting Common issues: API connection problems : Ensure the API URL is correct and the API key has the necessary permissions pdnsutil permission errors : Check that the web server user can access pdns.conf and has permission to execute pdnsutil DNSSEC operations failing : Check the PowerDNS logs for detailed error messages Check that both PowerDNS API and DNSSEC are enabled Verify the pdnsutil command path is correct Enable debug mode temporarily to get more detailed logs Migration If you're currently using the pdnsutil method, it's recommended to migrate to the API method: Configure the PowerDNS API (see PowerDNS documentation) Update your PowerAdmin configuration with API settings No data migration is needed - the same DNSSEC keys will be accessible through both methods More Information For more details on DNSSEC and PowerDNS: - PowerDNS DNSSEC Documentation - PowerDNS API Documentation","title":"DNSSEC"},{"location":"configuration/dnssec/#dnssec-configuration","text":"","title":"DNSSEC Configuration"},{"location":"configuration/dnssec/#overview","text":"PowerAdmin provides comprehensive support for DNSSEC (Domain Name System Security Extensions) through a well-structured implementation that follows domain-driven design principles. The system offers two implementation methods: PowerDNS API Integration (Recommended): Uses the PowerDNS REST API for DNSSEC operations pdnsutil Command-line Tool (Legacy): Uses the pdnsutil command-line utility The DNSSEC implementation enables you to: - Secure and unsecure zones - Manage cryptographic keys (create, activate, deactivate, delete) - View DS (Delegation Signer) and DNSKEY records - Manage DNSSEC key rollovers","title":"Overview"},{"location":"configuration/dnssec/#basic-concepts","text":"Zone Signing Keys (ZSK) : Used to sign the actual DNS records Key Signing Keys (KSK) : Used to sign the ZSK and establish trust DS Records : Delegation Signer records that help establish the trust chain Key Rotation : Regular update of keys for enhanced security","title":"Basic Concepts"},{"location":"configuration/dnssec/#prerequisites","text":"PowerDNS version 4.0.0 or higher PowerDNS with DNSSEC support Proper database configuration API access configured (see PowerDNS API Configuration )","title":"Prerequisites"},{"location":"configuration/dnssec/#configuration-options","text":"DNSSEC settings can be configured in the config/settings.php file under the dnssec section or through individual variables in the legacy configuration format. Legacy variable Modern equivalent Default value Description Added in version $pdnssec_use dnssec.enabled false Enable (true) or disable (false) DNSSEC support 2.1.7 $pdnssec_debug dnssec.debug false Enable debug for DNSSEC operations 2.1.9 $pdnssec_command dnssec.command /usr/bin/pdnsutil Full path to pdnsutil utility (will be deprecated in the future) 2.1.7","title":"Configuration Options"},{"location":"configuration/dnssec/#implementation-methods","text":"","title":"Implementation Methods"},{"location":"configuration/dnssec/#option-1-powerdns-api-method-recommended","text":"To enable DNSSEC using the PowerDNS API: Configure your PowerDNS server with API access Update your PowerAdmin configuration file with the following settings: return [ 'dnssec' => [ 'enabled' => true, 'debug' => false, ], 'pdns_api' => [ 'url' => 'http://localhost:8081', 'key' => 'your-api-key', ], ]; The API method provides several advantages: - No need to configure special permissions for the web server user - More secure as it doesn't require shell access - Better error handling and feedback - Full support for all DNSSEC operations","title":"Option 1: PowerDNS API Method (Recommended)"},{"location":"configuration/dnssec/#option-2-pdnsutil-method-legacy","text":"If you can't use the API method, you can still use the legacy pdnsutil approach: return [ 'dnssec' => [ 'enabled' => true, 'debug' => false, 'command' => '/usr/bin/pdnsutil', ], 'pdns_api' => [ 'url' => '', 'key' => '', ], ]; Configure permissions for the web server user to run pdnsutil: For example, on Ubuntu with Apache: # Add the web server user to the root group adduser www-data root # Make pdns.conf readable by the web server user chmod 640 /etc/powerdns/pdns.conf Important Note : The pdnsutil method requires the web server user to have access to the PowerDNS configuration file, which poses security risks. The API method is strongly recommended.","title":"Option 2: pdnsutil Method (Legacy)"},{"location":"configuration/dnssec/#powerdns-configuration","text":"Make sure to enable DNSSEC in your PowerDNS configuration: dnssec=yes api=yes api-key=your_api_key","title":"PowerDNS Configuration"},{"location":"configuration/dnssec/#verification","text":"Check DNSSEC status using: dig +dnssec example.com SOA","title":"Verification"},{"location":"configuration/dnssec/#troubleshooting","text":"Common issues: API connection problems : Ensure the API URL is correct and the API key has the necessary permissions pdnsutil permission errors : Check that the web server user can access pdns.conf and has permission to execute pdnsutil DNSSEC operations failing : Check the PowerDNS logs for detailed error messages Check that both PowerDNS API and DNSSEC are enabled Verify the pdnsutil command path is correct Enable debug mode temporarily to get more detailed logs","title":"Troubleshooting"},{"location":"configuration/dnssec/#migration","text":"If you're currently using the pdnsutil method, it's recommended to migrate to the API method: Configure the PowerDNS API (see PowerDNS documentation) Update your PowerAdmin configuration with API settings No data migration is needed - the same DNSSEC keys will be accessible through both methods","title":"Migration"},{"location":"configuration/dnssec/#more-information","text":"For more details on DNSSEC and PowerDNS: - PowerDNS DNSSEC Documentation - PowerDNS API Documentation","title":"More Information"},{"location":"configuration/ldap/","text":"LDAP Integration Poweradmin supports LDAP (Lightweight Directory Access Protocol) authentication, allowing you to integrate with your existing directory service such as Active Directory or OpenLDAP. Configuration Options LDAP settings can be configured in the config/settings.php file under the ldap section or through individual variables in the legacy configuration format. Legacy variable Modern equivalent Default value Description Added in version $ldap_use ldap.enabled false Enable LDAP authentication 2.1.7 $ldap_debug ldap.debug false Enable debug for LDAP connection 2.1.7 $ldap_uri ldap.uri ldap://domaincontroller.example.com LDAP server URI 2.1.7 $ldap_basedn ldap.base_dn ou=users,dc=example,dc=com The top level of the LDAP directory tree 2.1.7 $ldap_search_filter ldap.search_filter no default Filter for LDAP search 2.1.7 $ldap_binddn ldap.bind_dn cn=admin,dc=example,dc=com LDAP user for binding 2.1.7 $ldap_bindpw ldap.bind_password some_password Password for LDAP binding user 2.1.7 $ldap_user_attribute ldap.user_attribute uid Username attribute used in LDAP search filter 2.1.7 $ldap_proto ldap.protocol_version 3 LDAP protocol version 2.1.7 Modern Configuration Example return [ 'ldap' => [ 'enabled' => true, 'debug' => false, 'uri' => 'ldap://domaincontroller.example.com', 'base_dn' => 'ou=users,dc=example,dc=com', 'bind_dn' => 'cn=admin,dc=example,dc=com', 'bind_password' => 'some_password', 'user_attribute' => 'uid', 'protocol_version' => 3, 'search_filter' => '(objectClass=account)', ], ]; LDAP Search Filter Examples The search filter is used to limit which LDAP accounts can authenticate to Poweradmin: // Only users that are members of the 'powerdns' group $ldap_search_filter = '(memberOf=cn=powerdns,ou=groups,dc=poweradmin,dc=org)'; // All accounts $ldap_search_filter = '(objectClass=account)'; // Users that are both persons and members of the 'admins' group $ldap_search_filter = '(objectClass=person)(memberOf=cn=admins,ou=groups,dc=poweradmin,dc=org)'; // Users with 'admin' in their common name $ldap_search_filter = '(cn=*admin*)'; Basic Setup Enable LDAP authentication by setting 'enabled' => true in the configuration array. Configure your LDAP server URI and base DN. Set appropriate search filters based on your directory structure. Set binding credentials if required. Specify the user attribute that matches your directory structure. Advanced Configuration SSL/TLS Connection For secure LDAP (LDAPS), use the following configuration: 'uri' => 'ldaps://domaincontroller.example.com', User Attribute Mapping Configure how Poweradmin maps LDAP attributes to user properties: For OpenLDAP: 'user_attribute' => 'uid' For Active Directory: 'user_attribute' => 'sAMAccountName' Example Directory Configurations Active Directory return [ 'ldap' => [ 'enabled' => true, 'uri' => 'ldap://ad.company.com', 'base_dn' => 'DC=company,DC=com', 'bind_dn' => 'CN=ServiceAccount,OU=Users,DC=company,DC=com', 'bind_password' => 'password', 'user_attribute' => 'sAMAccountName', 'search_filter' => '(&(objectClass=user)(sAMAccountName=%s))', ], ]; OpenLDAP return [ 'ldap' => [ 'enabled' => true, 'uri' => 'ldap://ldap.company.com', 'base_dn' => 'ou=users,dc=company,dc=com', 'bind_dn' => 'cn=admin,dc=company,dc=com', 'bind_password' => 'password', 'user_attribute' => 'uid', 'search_filter' => '(&(objectClass=posixAccount)(uid=%s))', ], ]; Troubleshooting Common LDAP issues and solutions: Connection Failed : Verify server URI and firewall settings Binding Failed : Check bind DN and password User Not Found : Verify search filter and user attribute SSL Certificate Issues : Ensure proper CA certificates are installed Security Considerations Always use LDAPS (LDAP over SSL/TLS) in production environments Implement least privilege access for binding Regularly rotate LDAP binding credentials Consider implementing connection timeout settings Monitor failed authentication attempts Adding Users to PowerAdmin Add a user to Poweradmin: The same user should exist in the LDAP schema:","title":"LDAP Integration"},{"location":"configuration/ldap/#ldap-integration","text":"Poweradmin supports LDAP (Lightweight Directory Access Protocol) authentication, allowing you to integrate with your existing directory service such as Active Directory or OpenLDAP.","title":"LDAP Integration"},{"location":"configuration/ldap/#configuration-options","text":"LDAP settings can be configured in the config/settings.php file under the ldap section or through individual variables in the legacy configuration format. Legacy variable Modern equivalent Default value Description Added in version $ldap_use ldap.enabled false Enable LDAP authentication 2.1.7 $ldap_debug ldap.debug false Enable debug for LDAP connection 2.1.7 $ldap_uri ldap.uri ldap://domaincontroller.example.com LDAP server URI 2.1.7 $ldap_basedn ldap.base_dn ou=users,dc=example,dc=com The top level of the LDAP directory tree 2.1.7 $ldap_search_filter ldap.search_filter no default Filter for LDAP search 2.1.7 $ldap_binddn ldap.bind_dn cn=admin,dc=example,dc=com LDAP user for binding 2.1.7 $ldap_bindpw ldap.bind_password some_password Password for LDAP binding user 2.1.7 $ldap_user_attribute ldap.user_attribute uid Username attribute used in LDAP search filter 2.1.7 $ldap_proto ldap.protocol_version 3 LDAP protocol version 2.1.7","title":"Configuration Options"},{"location":"configuration/ldap/#modern-configuration-example","text":"return [ 'ldap' => [ 'enabled' => true, 'debug' => false, 'uri' => 'ldap://domaincontroller.example.com', 'base_dn' => 'ou=users,dc=example,dc=com', 'bind_dn' => 'cn=admin,dc=example,dc=com', 'bind_password' => 'some_password', 'user_attribute' => 'uid', 'protocol_version' => 3, 'search_filter' => '(objectClass=account)', ], ];","title":"Modern Configuration Example"},{"location":"configuration/ldap/#ldap-search-filter-examples","text":"The search filter is used to limit which LDAP accounts can authenticate to Poweradmin: // Only users that are members of the 'powerdns' group $ldap_search_filter = '(memberOf=cn=powerdns,ou=groups,dc=poweradmin,dc=org)'; // All accounts $ldap_search_filter = '(objectClass=account)'; // Users that are both persons and members of the 'admins' group $ldap_search_filter = '(objectClass=person)(memberOf=cn=admins,ou=groups,dc=poweradmin,dc=org)'; // Users with 'admin' in their common name $ldap_search_filter = '(cn=*admin*)';","title":"LDAP Search Filter Examples"},{"location":"configuration/ldap/#basic-setup","text":"Enable LDAP authentication by setting 'enabled' => true in the configuration array. Configure your LDAP server URI and base DN. Set appropriate search filters based on your directory structure. Set binding credentials if required. Specify the user attribute that matches your directory structure.","title":"Basic Setup"},{"location":"configuration/ldap/#advanced-configuration","text":"","title":"Advanced Configuration"},{"location":"configuration/ldap/#ssltls-connection","text":"For secure LDAP (LDAPS), use the following configuration: 'uri' => 'ldaps://domaincontroller.example.com',","title":"SSL/TLS Connection"},{"location":"configuration/ldap/#user-attribute-mapping","text":"Configure how Poweradmin maps LDAP attributes to user properties: For OpenLDAP: 'user_attribute' => 'uid' For Active Directory: 'user_attribute' => 'sAMAccountName'","title":"User Attribute Mapping"},{"location":"configuration/ldap/#example-directory-configurations","text":"","title":"Example Directory Configurations"},{"location":"configuration/ldap/#active-directory","text":"return [ 'ldap' => [ 'enabled' => true, 'uri' => 'ldap://ad.company.com', 'base_dn' => 'DC=company,DC=com', 'bind_dn' => 'CN=ServiceAccount,OU=Users,DC=company,DC=com', 'bind_password' => 'password', 'user_attribute' => 'sAMAccountName', 'search_filter' => '(&(objectClass=user)(sAMAccountName=%s))', ], ];","title":"Active Directory"},{"location":"configuration/ldap/#openldap","text":"return [ 'ldap' => [ 'enabled' => true, 'uri' => 'ldap://ldap.company.com', 'base_dn' => 'ou=users,dc=company,dc=com', 'bind_dn' => 'cn=admin,dc=company,dc=com', 'bind_password' => 'password', 'user_attribute' => 'uid', 'search_filter' => '(&(objectClass=posixAccount)(uid=%s))', ], ];","title":"OpenLDAP"},{"location":"configuration/ldap/#troubleshooting","text":"Common LDAP issues and solutions: Connection Failed : Verify server URI and firewall settings Binding Failed : Check bind DN and password User Not Found : Verify search filter and user attribute SSL Certificate Issues : Ensure proper CA certificates are installed","title":"Troubleshooting"},{"location":"configuration/ldap/#security-considerations","text":"Always use LDAPS (LDAP over SSL/TLS) in production environments Implement least privilege access for binding Regularly rotate LDAP binding credentials Consider implementing connection timeout settings Monitor failed authentication attempts","title":"Security Considerations"},{"location":"configuration/ldap/#adding-users-to-poweradmin","text":"Add a user to Poweradmin: The same user should exist in the LDAP schema:","title":"Adding Users to PowerAdmin"},{"location":"configuration/logging/","text":"Basic Logging Configuration Poweradmin's logging system provides comprehensive monitoring of system activity. This guide covers the basic configuration options. For advanced settings and best practices, see the Advanced Logging Configuration guide. Configuration Options Legacy variable Modern equivalent Default value Description Added in version $logger_type logging.type null Logger type (null, native) 3.9.0 $logger_level logging.level info Logging level (debug, info, notice, warning, error, critical, alert, emergency) 3.9.0 $syslog_use logging.syslog_enabled false Enable (true) or disable (false) logging of authentication attempts and other operations to syslog 2.1.6 $syslog_ident logging.syslog_identity poweradmin Specifies program name which is added to syslog message 2.1.6 $syslog_facility logging.syslog_facility LOG_USER Specifies what type of program is logging the message 2.1.6 $dblog_use logging.database_enabled false Enable (true) or disable (false) logging to database 3.2.0 Log Levels Available logging levels, in order of increasing severity: DEBUG: Detailed debug information INFO: Interesting events NOTICE: Normal but significant events WARNING: Exceptional occurrences that are not errors ERROR: Runtime errors that do not require immediate action CRITICAL: Critical conditions ALERT: Action must be taken immediately EMERGENCY: System is unusable When you set a specific log level, you will receive logs of that level and all higher severity levels. For example, setting level to warning will log warnings, errors, critical issues, alerts, and emergencies, but not info or debug messages. Modern Configuration Example return [ 'logging' => [ 'type' => 'native', 'level' => 'warning', 'database_enabled' => true, 'syslog_enabled' => true, 'syslog_identity' => 'poweradmin', 'syslog_facility' => LOG_USER, ], ]; Legacy Configuration Example <?php // Logging settings $logger_type = 'native'; $logger_level = 'warning'; $syslog_use = true; $syslog_ident = 'poweradmin'; $syslog_facility = LOG_USER; $dblog_use = true; For more advanced logging configuration, environment-specific examples, and best practices, see: - Advanced Logging Configuration","title":"Logging Setup"},{"location":"configuration/logging/#basic-logging-configuration","text":"Poweradmin's logging system provides comprehensive monitoring of system activity. This guide covers the basic configuration options. For advanced settings and best practices, see the Advanced Logging Configuration guide.","title":"Basic Logging Configuration"},{"location":"configuration/logging/#configuration-options","text":"Legacy variable Modern equivalent Default value Description Added in version $logger_type logging.type null Logger type (null, native) 3.9.0 $logger_level logging.level info Logging level (debug, info, notice, warning, error, critical, alert, emergency) 3.9.0 $syslog_use logging.syslog_enabled false Enable (true) or disable (false) logging of authentication attempts and other operations to syslog 2.1.6 $syslog_ident logging.syslog_identity poweradmin Specifies program name which is added to syslog message 2.1.6 $syslog_facility logging.syslog_facility LOG_USER Specifies what type of program is logging the message 2.1.6 $dblog_use logging.database_enabled false Enable (true) or disable (false) logging to database 3.2.0","title":"Configuration Options"},{"location":"configuration/logging/#log-levels","text":"Available logging levels, in order of increasing severity: DEBUG: Detailed debug information INFO: Interesting events NOTICE: Normal but significant events WARNING: Exceptional occurrences that are not errors ERROR: Runtime errors that do not require immediate action CRITICAL: Critical conditions ALERT: Action must be taken immediately EMERGENCY: System is unusable When you set a specific log level, you will receive logs of that level and all higher severity levels. For example, setting level to warning will log warnings, errors, critical issues, alerts, and emergencies, but not info or debug messages.","title":"Log Levels"},{"location":"configuration/logging/#modern-configuration-example","text":"return [ 'logging' => [ 'type' => 'native', 'level' => 'warning', 'database_enabled' => true, 'syslog_enabled' => true, 'syslog_identity' => 'poweradmin', 'syslog_facility' => LOG_USER, ], ];","title":"Modern Configuration Example"},{"location":"configuration/logging/#legacy-configuration-example","text":"<?php // Logging settings $logger_type = 'native'; $logger_level = 'warning'; $syslog_use = true; $syslog_ident = 'poweradmin'; $syslog_facility = LOG_USER; $dblog_use = true; For more advanced logging configuration, environment-specific examples, and best practices, see: - Advanced Logging Configuration","title":"Legacy Configuration Example"},{"location":"configuration/mail/","text":"Mail Configuration This document describes how to configure email settings in Poweradmin. Overview Poweradmin supports sending emails for various purposes: - User registration confirmations - Password reset requests - DNS zone changes notifications - System alerts Configuration Options The mail settings are configured in the config/settings.php file under the mail section: enabled : Enable email functionality. Default: false from : Default \"from\" email address. Default: poweradmin@example.com from_name : Default \"from\" name. Default: empty transport : Transport method. Options: 'smtp', 'sendmail', 'php'. Default: smtp SMTP Settings host : SMTP server hostname. Default: smtp.example.com port : SMTP server port. Default: 587 username : SMTP authentication username. Default: empty password : SMTP authentication password. Default: empty encryption : Encryption method. Options: 'tls', 'ssl', empty. Default: tls auth : Whether SMTP requires authentication. Default: false Sendmail Settings sendmail_path : Path to sendmail binary. Default: /usr/sbin/sendmail -bs Email Templates password_email_subject : Subject for password reset emails. Default: Your new account information email_signature : Signature added to emails. Default: DNS Admin email_title : Title used in email templates. Default: Your DNS Account Information Example Configuration return [ 'mail' => [ 'enabled' => true, 'from' => 'dns@company.com', 'from_name' => 'DNS Administrator', 'transport' => 'smtp', 'host' => 'smtp.company.com', 'port' => 587, 'username' => 'smtp_user', 'password' => 'smtp_password', 'encryption' => 'tls', 'auth' => true, ], ]; Testing Mail Configuration After configuring the mail settings, you can test your configuration by: Going to Administration \u2192 System Settings Clicking \"Test Mail Configuration\" Entering a test email address Clicking \"Send Test Email\" Troubleshooting Common email issues and solutions: Emails not sending : Verify SMTP credentials and server settings SSL/TLS errors : Check encryption settings and port numbers Authentication failures : Verify username and password Delayed delivery : Review mail server queue and spam settings Security Considerations Use TLS encryption when possible Use dedicated email accounts for the application Regularly rotate SMTP credentials Be cautious with email content to avoid potential phishing concerns","title":"Mail Configuration"},{"location":"configuration/mail/#mail-configuration","text":"This document describes how to configure email settings in Poweradmin.","title":"Mail Configuration"},{"location":"configuration/mail/#overview","text":"Poweradmin supports sending emails for various purposes: - User registration confirmations - Password reset requests - DNS zone changes notifications - System alerts","title":"Overview"},{"location":"configuration/mail/#configuration-options","text":"The mail settings are configured in the config/settings.php file under the mail section: enabled : Enable email functionality. Default: false from : Default \"from\" email address. Default: poweradmin@example.com from_name : Default \"from\" name. Default: empty transport : Transport method. Options: 'smtp', 'sendmail', 'php'. Default: smtp","title":"Configuration Options"},{"location":"configuration/mail/#smtp-settings","text":"host : SMTP server hostname. Default: smtp.example.com port : SMTP server port. Default: 587 username : SMTP authentication username. Default: empty password : SMTP authentication password. Default: empty encryption : Encryption method. Options: 'tls', 'ssl', empty. Default: tls auth : Whether SMTP requires authentication. Default: false","title":"SMTP Settings"},{"location":"configuration/mail/#sendmail-settings","text":"sendmail_path : Path to sendmail binary. Default: /usr/sbin/sendmail -bs","title":"Sendmail Settings"},{"location":"configuration/mail/#email-templates","text":"password_email_subject : Subject for password reset emails. Default: Your new account information email_signature : Signature added to emails. Default: DNS Admin email_title : Title used in email templates. Default: Your DNS Account Information","title":"Email Templates"},{"location":"configuration/mail/#example-configuration","text":"return [ 'mail' => [ 'enabled' => true, 'from' => 'dns@company.com', 'from_name' => 'DNS Administrator', 'transport' => 'smtp', 'host' => 'smtp.company.com', 'port' => 587, 'username' => 'smtp_user', 'password' => 'smtp_password', 'encryption' => 'tls', 'auth' => true, ], ];","title":"Example Configuration"},{"location":"configuration/mail/#testing-mail-configuration","text":"After configuring the mail settings, you can test your configuration by: Going to Administration \u2192 System Settings Clicking \"Test Mail Configuration\" Entering a test email address Clicking \"Send Test Email\"","title":"Testing Mail Configuration"},{"location":"configuration/mail/#troubleshooting","text":"Common email issues and solutions: Emails not sending : Verify SMTP credentials and server settings SSL/TLS errors : Check encryption settings and port numbers Authentication failures : Verify username and password Delayed delivery : Review mail server queue and spam settings","title":"Troubleshooting"},{"location":"configuration/mail/#security-considerations","text":"Use TLS encryption when possible Use dedicated email accounts for the application Regularly rotate SMTP credentials Be cautious with email content to avoid potential phishing concerns","title":"Security Considerations"},{"location":"configuration/password-policies/","text":"Password Policies Poweradmin allows you to enforce password policies to enhance the security of user accounts. All security configurations, including password policies, are now configured in a single config/settings.php file under the security section. This consolidates all security-related settings into one location for easier management. Password Rules enable_password_rules : Enable or disable password rules enforcement. Default: false . min_length : Minimum length of the password. Default: 6 . require_uppercase : Require at least one uppercase letter. Default: true . require_lowercase : Require at least one lowercase letter. Default: true . require_numbers : Require at least one numeric digit. Default: true . require_special : Require at least one special character. Default: false . special_characters : List of allowed special characters. Default: !@#$%^&*()+-=[]{}|;:,.<>? . Password Security Settings The following additional security settings are available in the security section: password_encryption : Choose the password hashing algorithm. Options: 'md5', 'md5salt', 'bcrypt', 'argon2i', ' argon2id'. Default: bcrypt . password_cost : Cost factor for bcrypt algorithm. Default: 12 . Password Expiration Note: The following settings are not implemented yet. enable_expiration : Enable or disable password expiration. Default: false . max_age_days : Maximum age of the password in days before it expires. Default: 90 . Password Reuse Prevention Note: The following settings are not implemented yet. enable_reuse_prevention : Enable or disable prevention of password reuse. Default: false . prevent_reuse : Number of previous passwords to check against for reuse. Default: 5 . Example Configuration To enable password rules with custom settings, add the following configuration to your config/settings.php : <?php return [ 'security' => [ 'password_encryption' => 'bcrypt', 'password_cost' => 12, 'password_policy' => [ 'enable_password_rules' => true, 'min_length' => 8, 'require_special' => true, ], ], ]; When enable_password_rules is set to true , passwords will be validated according to the configured rules. In this example, passwords must be at least 8 characters long and include special characters, along with the default requirements for uppercase letters, lowercase letters, and numbers.","title":"Password Policies"},{"location":"configuration/password-policies/#password-policies","text":"Poweradmin allows you to enforce password policies to enhance the security of user accounts. All security configurations, including password policies, are now configured in a single config/settings.php file under the security section. This consolidates all security-related settings into one location for easier management.","title":"Password Policies"},{"location":"configuration/password-policies/#password-rules","text":"enable_password_rules : Enable or disable password rules enforcement. Default: false . min_length : Minimum length of the password. Default: 6 . require_uppercase : Require at least one uppercase letter. Default: true . require_lowercase : Require at least one lowercase letter. Default: true . require_numbers : Require at least one numeric digit. Default: true . require_special : Require at least one special character. Default: false . special_characters : List of allowed special characters. Default: !@#$%^&*()+-=[]{}|;:,.<>? .","title":"Password Rules"},{"location":"configuration/password-policies/#password-security-settings","text":"The following additional security settings are available in the security section: password_encryption : Choose the password hashing algorithm. Options: 'md5', 'md5salt', 'bcrypt', 'argon2i', ' argon2id'. Default: bcrypt . password_cost : Cost factor for bcrypt algorithm. Default: 12 .","title":"Password Security Settings"},{"location":"configuration/password-policies/#password-expiration","text":"Note: The following settings are not implemented yet. enable_expiration : Enable or disable password expiration. Default: false . max_age_days : Maximum age of the password in days before it expires. Default: 90 .","title":"Password Expiration"},{"location":"configuration/password-policies/#password-reuse-prevention","text":"Note: The following settings are not implemented yet. enable_reuse_prevention : Enable or disable prevention of password reuse. Default: false . prevent_reuse : Number of previous passwords to check against for reuse. Default: 5 .","title":"Password Reuse Prevention"},{"location":"configuration/password-policies/#example-configuration","text":"To enable password rules with custom settings, add the following configuration to your config/settings.php : <?php return [ 'security' => [ 'password_encryption' => 'bcrypt', 'password_cost' => 12, 'password_policy' => [ 'enable_password_rules' => true, 'min_length' => 8, 'require_special' => true, ], ], ]; When enable_password_rules is set to true , passwords will be validated according to the configured rules. In this example, passwords must be at least 8 characters long and include special characters, along with the default requirements for uppercase letters, lowercase letters, and numbers.","title":"Example Configuration"},{"location":"configuration/powerdns-api/","text":"PowerDNS API Configuration Overview Poweradmin can interact with PowerDNS through its API for advanced operations like DNSSEC management and automatic zone changes. This document explains how to configure the PowerDNS API integration. Prerequisites PowerDNS server with API enabled API key generated on PowerDNS server Network connectivity between Poweradmin and PowerDNS API endpoint Configuration Options PowerDNS API settings can be configured in the config/settings.php file under the pdns_api section or through individual variables in the legacy configuration format. Legacy variable Modern equivalent Default value Description Added in version $pdns_api_url pdns_api.url no default The endpoint for establishing a connection to the PowerDNS API 3.7.0 $pdns_api_key pdns_api.key no default The authentication key required for establishing a connection with the PowerDNS API 3.7.0 Modern Configuration Example return [ 'pdns_api' => [ 'url' => 'http://localhost:8081/api/v1', 'key' => 'YOUR_API_KEY', ], ]; Legacy Configuration Example <?php // PowerDNS API settings $pdns_api_url = 'http://localhost:8081/api/v1'; $pdns_api_key = 'YOUR_API_KEY'; PowerDNS Server Setup To enable the API in your PowerDNS configuration, add the following to your PowerDNS configuration file: # Enable API and webserver api=yes api-key=YOUR_API_KEY webserver=yes webserver-port=8081 webserver-address=127.0.0.1 # Restrict to localhost for security For production environments, it's recommended to secure the API with HTTPS: webserver-port=8081 webserver-address=0.0.0.0 webserver-allow-from=192.168.0.0/24,127.0.0.1 webserver-password=YOUR_PASSWORD webserver-loglevel=none Testing Connection You can verify the API connection by running: curl -H \"X-API-Key: YOUR_API_KEY\" http://localhost:8081/api/v1/servers/localhost If the connection is successful, you should receive a JSON response with server information. Functionality Enabled by API With the PowerDNS API properly configured, Poweradmin gains the following capabilities: DNSSEC management (key creation, rotation, DS record handling) Real-time zone transfers Metadata management Direct server statistics access Security Considerations Always use HTTPS for production environments Restrict API access to trusted IP addresses Use a strong API key and rotate it regularly Consider using a reverse proxy for additional security Keep PowerDNS and Poweradmin updated to the latest versions","title":"PowerDNS API"},{"location":"configuration/powerdns-api/#powerdns-api-configuration","text":"","title":"PowerDNS API Configuration"},{"location":"configuration/powerdns-api/#overview","text":"Poweradmin can interact with PowerDNS through its API for advanced operations like DNSSEC management and automatic zone changes. This document explains how to configure the PowerDNS API integration.","title":"Overview"},{"location":"configuration/powerdns-api/#prerequisites","text":"PowerDNS server with API enabled API key generated on PowerDNS server Network connectivity between Poweradmin and PowerDNS API endpoint","title":"Prerequisites"},{"location":"configuration/powerdns-api/#configuration-options","text":"PowerDNS API settings can be configured in the config/settings.php file under the pdns_api section or through individual variables in the legacy configuration format. Legacy variable Modern equivalent Default value Description Added in version $pdns_api_url pdns_api.url no default The endpoint for establishing a connection to the PowerDNS API 3.7.0 $pdns_api_key pdns_api.key no default The authentication key required for establishing a connection with the PowerDNS API 3.7.0","title":"Configuration Options"},{"location":"configuration/powerdns-api/#modern-configuration-example","text":"return [ 'pdns_api' => [ 'url' => 'http://localhost:8081/api/v1', 'key' => 'YOUR_API_KEY', ], ];","title":"Modern Configuration Example"},{"location":"configuration/powerdns-api/#legacy-configuration-example","text":"<?php // PowerDNS API settings $pdns_api_url = 'http://localhost:8081/api/v1'; $pdns_api_key = 'YOUR_API_KEY';","title":"Legacy Configuration Example"},{"location":"configuration/powerdns-api/#powerdns-server-setup","text":"To enable the API in your PowerDNS configuration, add the following to your PowerDNS configuration file: # Enable API and webserver api=yes api-key=YOUR_API_KEY webserver=yes webserver-port=8081 webserver-address=127.0.0.1 # Restrict to localhost for security For production environments, it's recommended to secure the API with HTTPS: webserver-port=8081 webserver-address=0.0.0.0 webserver-allow-from=192.168.0.0/24,127.0.0.1 webserver-password=YOUR_PASSWORD webserver-loglevel=none","title":"PowerDNS Server Setup"},{"location":"configuration/powerdns-api/#testing-connection","text":"You can verify the API connection by running: curl -H \"X-API-Key: YOUR_API_KEY\" http://localhost:8081/api/v1/servers/localhost If the connection is successful, you should receive a JSON response with server information.","title":"Testing Connection"},{"location":"configuration/powerdns-api/#functionality-enabled-by-api","text":"With the PowerDNS API properly configured, Poweradmin gains the following capabilities: DNSSEC management (key creation, rotation, DS record handling) Real-time zone transfers Metadata management Direct server statistics access","title":"Functionality Enabled by API"},{"location":"configuration/powerdns-api/#security-considerations","text":"Always use HTTPS for production environments Restrict API access to trusted IP addresses Use a strong API key and rotate it regularly Consider using a reverse proxy for additional security Keep PowerDNS and Poweradmin updated to the latest versions","title":"Security Considerations"},{"location":"configuration/security-policies/","text":"Security Policies Poweradmin offers various security features to protect your DNS management system. All security configurations are configured in the config/settings.php file under the security section. General Security Settings session_key : A unique key used for session security. Default: change_this_key (you should always change this) password_encryption : Password hashing algorithm. Options: 'md5', 'md5salt', 'bcrypt', 'argon2i', 'argon2id'. Default: bcrypt password_cost : Cost factor for bcrypt algorithm. Default: 12 login_token_validation : Enable token validation for login form. Default: true global_token_validation : Enable token validation for all forms. Default: true Account Lockout These settings help prevent brute force attacks by temporarily locking accounts after multiple failed login attempts: enable_lockout : Enable account lockout after failed login attempts. Default: false lockout_attempts : Number of failed attempts before account is locked. Default: 5 lockout_duration : Duration of the lockout in minutes. Default: 15 track_ip_address : Lock accounts based on IP address. Default: true clear_attempts_on_success : Clear failed attempts after successful login. Default: true IP Address Management Control which IP addresses can access the system: whitelist_ip_addresses : IP addresses that are always allowed to access the system. Takes priority over blacklist. Supports IPs, CIDRs, and wildcards. Default: [] blacklist_ip_addresses : IP addresses that are blocked from accessing the system. Supports IPs, CIDRs, and wildcards. Default: [] Example Configuration return [ 'security' => [ 'session_key' => 'random_secure_string_here', 'password_encryption' => 'bcrypt', 'password_cost' => 12, 'login_token_validation' => true, 'global_token_validation' => true, 'account_lockout' => [ 'enable_lockout' => true, 'lockout_attempts' => 3, 'lockout_duration' => 30, 'track_ip_address' => true, 'clear_attempts_on_success' => true, 'whitelist_ip_addresses' => ['192.168.1.0/24', '10.0.0.*'], 'blacklist_ip_addresses' => ['1.2.3.4', '5.6.7.0/24'], ], ], ]; Security Best Practices Always change the default session key to a unique, random string Use a strong password hashing algorithm (bcrypt or argon2id) Enable account lockout in production environments Implement IP whitelisting for admin access in sensitive environments Enable both login and global token validation to prevent CSRF attacks Use HTTPS for all production deployments Regularly update Poweradmin to get the latest security fixes For more information about password policies, see the Password Policies documentation .","title":"Security Policies"},{"location":"configuration/security-policies/#security-policies","text":"Poweradmin offers various security features to protect your DNS management system. All security configurations are configured in the config/settings.php file under the security section.","title":"Security Policies"},{"location":"configuration/security-policies/#general-security-settings","text":"session_key : A unique key used for session security. Default: change_this_key (you should always change this) password_encryption : Password hashing algorithm. Options: 'md5', 'md5salt', 'bcrypt', 'argon2i', 'argon2id'. Default: bcrypt password_cost : Cost factor for bcrypt algorithm. Default: 12 login_token_validation : Enable token validation for login form. Default: true global_token_validation : Enable token validation for all forms. Default: true","title":"General Security Settings"},{"location":"configuration/security-policies/#account-lockout","text":"These settings help prevent brute force attacks by temporarily locking accounts after multiple failed login attempts: enable_lockout : Enable account lockout after failed login attempts. Default: false lockout_attempts : Number of failed attempts before account is locked. Default: 5 lockout_duration : Duration of the lockout in minutes. Default: 15 track_ip_address : Lock accounts based on IP address. Default: true clear_attempts_on_success : Clear failed attempts after successful login. Default: true","title":"Account Lockout"},{"location":"configuration/security-policies/#ip-address-management","text":"Control which IP addresses can access the system: whitelist_ip_addresses : IP addresses that are always allowed to access the system. Takes priority over blacklist. Supports IPs, CIDRs, and wildcards. Default: [] blacklist_ip_addresses : IP addresses that are blocked from accessing the system. Supports IPs, CIDRs, and wildcards. Default: []","title":"IP Address Management"},{"location":"configuration/security-policies/#example-configuration","text":"return [ 'security' => [ 'session_key' => 'random_secure_string_here', 'password_encryption' => 'bcrypt', 'password_cost' => 12, 'login_token_validation' => true, 'global_token_validation' => true, 'account_lockout' => [ 'enable_lockout' => true, 'lockout_attempts' => 3, 'lockout_duration' => 30, 'track_ip_address' => true, 'clear_attempts_on_success' => true, 'whitelist_ip_addresses' => ['192.168.1.0/24', '10.0.0.*'], 'blacklist_ip_addresses' => ['1.2.3.4', '5.6.7.0/24'], ], ], ];","title":"Example Configuration"},{"location":"configuration/security-policies/#security-best-practices","text":"Always change the default session key to a unique, random string Use a strong password hashing algorithm (bcrypt or argon2id) Enable account lockout in production environments Implement IP whitelisting for admin access in sensitive environments Enable both login and global token validation to prevent CSRF attacks Use HTTPS for all production deployments Regularly update Poweradmin to get the latest security fixes For more information about password policies, see the Password Policies documentation .","title":"Security Best Practices"},{"location":"configuration/ui/custom-css/","text":"UI Styling Poweradmin uses built-in themes for its user interface styling. Currently, the application does not support custom CSS files for styling customization. Available Themes Poweradmin comes with the following themes, which can be selected in the configuration file: ignite (default): A clean, light theme with modern design elements spark : A dark theme optimized for reduced eye strain in low-light environments Theme Configuration To change the theme, update the theme setting in the config/settings.php file under the interface section: return [ 'interface' => [ 'theme' => 'ignite', // Options: 'ignite', 'spark' ], ]; Screenshots Ignite Theme (Light) Spark Theme (Dark) Theme Features Each theme provides consistent styling for: Navigation menus Form elements Buttons and controls Tables and data views Modals and dialogs Notifications and alerts For more information about themes, see the Themes documentation . Future Development Custom CSS support may be implemented in future versions of Poweradmin. If you need UI customization beyond the available themes, consider: Contributing to the Poweradmin project Requesting the feature in the project's issue tracker","title":"Custom CSS"},{"location":"configuration/ui/custom-css/#ui-styling","text":"Poweradmin uses built-in themes for its user interface styling. Currently, the application does not support custom CSS files for styling customization.","title":"UI Styling"},{"location":"configuration/ui/custom-css/#available-themes","text":"Poweradmin comes with the following themes, which can be selected in the configuration file: ignite (default): A clean, light theme with modern design elements spark : A dark theme optimized for reduced eye strain in low-light environments","title":"Available Themes"},{"location":"configuration/ui/custom-css/#theme-configuration","text":"To change the theme, update the theme setting in the config/settings.php file under the interface section: return [ 'interface' => [ 'theme' => 'ignite', // Options: 'ignite', 'spark' ], ];","title":"Theme Configuration"},{"location":"configuration/ui/custom-css/#screenshots","text":"","title":"Screenshots"},{"location":"configuration/ui/custom-css/#ignite-theme-light","text":"","title":"Ignite Theme (Light)"},{"location":"configuration/ui/custom-css/#spark-theme-dark","text":"","title":"Spark Theme (Dark)"},{"location":"configuration/ui/custom-css/#theme-features","text":"Each theme provides consistent styling for: Navigation menus Form elements Buttons and controls Tables and data views Modals and dialogs Notifications and alerts For more information about themes, see the Themes documentation .","title":"Theme Features"},{"location":"configuration/ui/custom-css/#future-development","text":"Custom CSS support may be implemented in future versions of Poweradmin. If you need UI customization beyond the available themes, consider: Contributing to the Poweradmin project Requesting the feature in the project's issue tracker","title":"Future Development"},{"location":"configuration/ui/layout/","text":"Layout Customization Poweradmin allows you to customize various layout aspects to better fit your workflow. These settings are configured in the config/settings.php file under the interface section. Customizing Header and Footer In addition to the layout settings below, Poweradmin also supports custom header and footer templates. See Custom Header and Footer section at the end of this document for details. UI Element Positioning Form Element Positioning Control the positioning of key UI elements: position_record_form_top : Place the \"Add record\" form at the top of the page. Default: false position_save_button_top : Place the \"Save changes\" button at the top of the page. Default: true return [ 'interface' => [ 'position_record_form_top' => true, 'position_save_button_top' => true, ], ]; Content Display Options Configure which information is displayed in the user interface: show_record_id : Show record ID column in edit mode. Default: true show_zone_comments : Show zone comments. Default: true show_record_comments : Show record comments. Default: false display_serial_in_zone_list : Show serial number in zone list. Default: false display_template_in_zone_list : Show template information in zone list. Default: false return [ 'interface' => [ 'show_record_id' => true, 'show_zone_comments' => true, 'show_record_comments' => true, 'display_serial_in_zone_list' => true, ], ]; Display Mode Configure how the main index page displays information: index_display : Choose between card view or list view. Options: cards , list . Default: cards return [ 'interface' => [ 'index_display' => 'list', ], ]; Pagination Control how many items appear per page: rows_per_page : Number of items displayed per page. Default: 10 return [ 'interface' => [ 'rows_per_page' => 20, ], ]; Zone Editing Features Enable or disable special editing features: add_reverse_record : Add the checkbox option to create PTR records from A/AAAA record view. Default: true add_domain_record : Add the checkbox option to create A/AAAA records from PTR record view. Default: true return [ 'interface' => [ 'add_reverse_record' => true, 'add_domain_record' => true, ], ]; Example Full Configuration return [ 'interface' => [ 'position_record_form_top' => false, 'position_save_button_top' => true, 'show_record_id' => true, 'show_zone_comments' => true, 'show_record_comments' => true, 'display_serial_in_zone_list' => true, 'display_template_in_zone_list' => true, 'index_display' => 'list', 'rows_per_page' => 15, 'add_reverse_record' => true, 'add_domain_record' => true, ], ]; Custom Header and Footer Poweradmin allows you to personalize the header (logo and title) and footer sections by creating custom template files. This is useful for branding your installation or adding custom navigation elements. Configuration First, you need to enable custom header/footer in the settings file. Create or edit the file config/settings.php with the following configuration: <?php return [ // Other existing settings... /** * Interface Settings */ 'interface' => [ // Other interface settings... // Custom header and footer settings 'custom_header' => true, // Enable custom header 'custom_footer' => true, // Enable custom footer // Other interface settings... ], // Other existing settings... ]; Creating Custom Templates Create a directory named custom inside your templates folder: mkdir -p templates/custom Create the following files: Custom Header (templates/custom/header.html) <!-- Your custom header content goes here --> <img src=\"assets/your-logo.png\" height=\"32\"> <span class=\"fs-4\">Your Custom Title</span> Custom Footer (templates/custom/footer.html) <!-- Your custom footer content goes here --> <p>\u00a9 2025 Your Organization - Powered by <strong>Poweradmin</strong></p> Here are examples of custom templates in action: Custom Header File Structure Custom Footer Example Template Variables The following template variables are available in your custom templates: Header Template Variables {{ iface_title }} - Title from configuration settings {{ iface_style }} - Current theme style (ignite or spark) {{ file_version }} - File version timestamp for cache busting Footer Template Variables {{ version }} - Poweradmin version {{ iface_style }} - Current theme style {{ file_version }} - File version timestamp for cache busting Examples Corporate Branding Header <img src=\"assets/corporate-logo.png\" height=\"40\"> <span class=\"fs-4 ms-2\">Corporate DNS Management Portal</span> Extended Footer with Links <div class=\"d-flex flex-column\"> <p class=\"mb-1\">\u00a9 2025 Your Organization - DNS Management</p> <p class=\"mb-0 small\"> <a href=\"https://support.example.com\" class=\"text-decoration-none\">Support</a> | <a href=\"https://docs.example.com\" class=\"text-decoration-none\">Documentation</a> | <a href=\"mailto:dns-admin@example.com\" class=\"text-decoration-none\">Contact</a> </p> </div> Notes The custom templates use Twig templating engine Bootstrap 5 classes are available for styling Changes may be overwritten during updates - keep backups of your custom files You can include custom JavaScript in your header/footer templates if needed","title":"Layout"},{"location":"configuration/ui/layout/#layout-customization","text":"Poweradmin allows you to customize various layout aspects to better fit your workflow. These settings are configured in the config/settings.php file under the interface section.","title":"Layout Customization"},{"location":"configuration/ui/layout/#customizing-header-and-footer","text":"In addition to the layout settings below, Poweradmin also supports custom header and footer templates. See Custom Header and Footer section at the end of this document for details.","title":"Customizing Header and Footer"},{"location":"configuration/ui/layout/#ui-element-positioning","text":"","title":"UI Element Positioning"},{"location":"configuration/ui/layout/#form-element-positioning","text":"Control the positioning of key UI elements: position_record_form_top : Place the \"Add record\" form at the top of the page. Default: false position_save_button_top : Place the \"Save changes\" button at the top of the page. Default: true return [ 'interface' => [ 'position_record_form_top' => true, 'position_save_button_top' => true, ], ];","title":"Form Element Positioning"},{"location":"configuration/ui/layout/#content-display-options","text":"Configure which information is displayed in the user interface: show_record_id : Show record ID column in edit mode. Default: true show_zone_comments : Show zone comments. Default: true show_record_comments : Show record comments. Default: false display_serial_in_zone_list : Show serial number in zone list. Default: false display_template_in_zone_list : Show template information in zone list. Default: false return [ 'interface' => [ 'show_record_id' => true, 'show_zone_comments' => true, 'show_record_comments' => true, 'display_serial_in_zone_list' => true, ], ];","title":"Content Display Options"},{"location":"configuration/ui/layout/#display-mode","text":"Configure how the main index page displays information: index_display : Choose between card view or list view. Options: cards , list . Default: cards return [ 'interface' => [ 'index_display' => 'list', ], ];","title":"Display Mode"},{"location":"configuration/ui/layout/#pagination","text":"Control how many items appear per page: rows_per_page : Number of items displayed per page. Default: 10 return [ 'interface' => [ 'rows_per_page' => 20, ], ];","title":"Pagination"},{"location":"configuration/ui/layout/#zone-editing-features","text":"Enable or disable special editing features: add_reverse_record : Add the checkbox option to create PTR records from A/AAAA record view. Default: true add_domain_record : Add the checkbox option to create A/AAAA records from PTR record view. Default: true return [ 'interface' => [ 'add_reverse_record' => true, 'add_domain_record' => true, ], ];","title":"Zone Editing Features"},{"location":"configuration/ui/layout/#example-full-configuration","text":"return [ 'interface' => [ 'position_record_form_top' => false, 'position_save_button_top' => true, 'show_record_id' => true, 'show_zone_comments' => true, 'show_record_comments' => true, 'display_serial_in_zone_list' => true, 'display_template_in_zone_list' => true, 'index_display' => 'list', 'rows_per_page' => 15, 'add_reverse_record' => true, 'add_domain_record' => true, ], ];","title":"Example Full Configuration"},{"location":"configuration/ui/layout/#custom-header-and-footer","text":"Poweradmin allows you to personalize the header (logo and title) and footer sections by creating custom template files. This is useful for branding your installation or adding custom navigation elements.","title":"Custom Header and Footer"},{"location":"configuration/ui/layout/#configuration","text":"First, you need to enable custom header/footer in the settings file. Create or edit the file config/settings.php with the following configuration: <?php return [ // Other existing settings... /** * Interface Settings */ 'interface' => [ // Other interface settings... // Custom header and footer settings 'custom_header' => true, // Enable custom header 'custom_footer' => true, // Enable custom footer // Other interface settings... ], // Other existing settings... ];","title":"Configuration"},{"location":"configuration/ui/layout/#creating-custom-templates","text":"Create a directory named custom inside your templates folder: mkdir -p templates/custom Create the following files:","title":"Creating Custom Templates"},{"location":"configuration/ui/layout/#custom-header-templatescustomheaderhtml","text":"<!-- Your custom header content goes here --> <img src=\"assets/your-logo.png\" height=\"32\"> <span class=\"fs-4\">Your Custom Title</span>","title":"Custom Header (templates/custom/header.html)"},{"location":"configuration/ui/layout/#custom-footer-templatescustomfooterhtml","text":"<!-- Your custom footer content goes here --> <p>\u00a9 2025 Your Organization - Powered by <strong>Poweradmin</strong></p> Here are examples of custom templates in action:","title":"Custom Footer (templates/custom/footer.html)"},{"location":"configuration/ui/layout/#custom-header-file-structure","text":"","title":"Custom Header File Structure"},{"location":"configuration/ui/layout/#custom-footer-example","text":"","title":"Custom Footer Example"},{"location":"configuration/ui/layout/#template-variables","text":"The following template variables are available in your custom templates:","title":"Template Variables"},{"location":"configuration/ui/layout/#header-template-variables","text":"{{ iface_title }} - Title from configuration settings {{ iface_style }} - Current theme style (ignite or spark) {{ file_version }} - File version timestamp for cache busting","title":"Header Template Variables"},{"location":"configuration/ui/layout/#footer-template-variables","text":"{{ version }} - Poweradmin version {{ iface_style }} - Current theme style {{ file_version }} - File version timestamp for cache busting","title":"Footer Template Variables"},{"location":"configuration/ui/layout/#examples","text":"","title":"Examples"},{"location":"configuration/ui/layout/#corporate-branding-header","text":"<img src=\"assets/corporate-logo.png\" height=\"40\"> <span class=\"fs-4 ms-2\">Corporate DNS Management Portal</span>","title":"Corporate Branding Header"},{"location":"configuration/ui/layout/#extended-footer-with-links","text":"<div class=\"d-flex flex-column\"> <p class=\"mb-1\">\u00a9 2025 Your Organization - DNS Management</p> <p class=\"mb-0 small\"> <a href=\"https://support.example.com\" class=\"text-decoration-none\">Support</a> | <a href=\"https://docs.example.com\" class=\"text-decoration-none\">Documentation</a> | <a href=\"mailto:dns-admin@example.com\" class=\"text-decoration-none\">Contact</a> </p> </div>","title":"Extended Footer with Links"},{"location":"configuration/ui/layout/#notes","text":"The custom templates use Twig templating engine Bootstrap 5 classes are available for styling Changes may be overwritten during updates - keep backups of your custom files You can include custom JavaScript in your header/footer templates if needed","title":"Notes"},{"location":"configuration/ui/overview/","text":"UI Customization Overview Poweradmin provides several ways to customize the user interface to match your organization's needs. All UI configurations are set in the config/settings.php file under the interface section. Configuration Options The following settings control the user interface appearance and behavior: language : Default language for the interface. Default: en_EN enabled_languages : Comma-separated list of available languages. Default: cs_CZ,de_DE,en_EN,fr_FR,it_IT,ja_JP,lt_LT,nb_NO,nl_NL,pl_PL,ru_RU,tr_TR,zh_CN theme : UI theme. Options: ignite (light), spark (dark). Default: ignite title : Title displayed in the browser. Default: Poweradmin session_timeout : Session timeout in seconds. Default: 1800 (30 minutes) rows_per_page : Number of items to display per page. Default: 10 index_display : Display mode for the index page. Options: cards , list . Default: cards UI Element Settings show_record_id : Show record ID column in edit mode. Default: true position_record_form_top : Position the \"Add record\" form at the top of the page. Default: false position_save_button_top : Position the \"Save changes\" button at the top of the page. Default: true show_zone_comments : Show or hide zone comments. Default: true show_record_comments : Show or hide record comments. Default: false display_serial_in_zone_list : Display serial number in zone list. Default: false display_template_in_zone_list : Display template information in zone list. Default: false search_group_records : Group records by name and content in search results. Default: false Zone Editing Features add_reverse_record : Enable checkbox to add PTR record from regular zone view. Default: true add_domain_record : Enable checkbox to add A/AAAA record from reverse zone view. Default: true show_migrations : Show migrations menu item. Default: false (experimental) Example Configuration return [ 'interface' => [ 'language' => 'en_EN', 'theme' => 'spark', 'title' => 'DNS Management Console', 'rows_per_page' => 20, 'index_display' => 'list', 'show_record_comments' => true, 'position_save_button_top' => true, ], ]; See the specific documentation pages for more detailed information on each customization option: Themes Layout (includes custom header and footer setup) Custom CSS","title":"Overview"},{"location":"configuration/ui/overview/#ui-customization-overview","text":"Poweradmin provides several ways to customize the user interface to match your organization's needs. All UI configurations are set in the config/settings.php file under the interface section.","title":"UI Customization Overview"},{"location":"configuration/ui/overview/#configuration-options","text":"The following settings control the user interface appearance and behavior: language : Default language for the interface. Default: en_EN enabled_languages : Comma-separated list of available languages. Default: cs_CZ,de_DE,en_EN,fr_FR,it_IT,ja_JP,lt_LT,nb_NO,nl_NL,pl_PL,ru_RU,tr_TR,zh_CN theme : UI theme. Options: ignite (light), spark (dark). Default: ignite title : Title displayed in the browser. Default: Poweradmin session_timeout : Session timeout in seconds. Default: 1800 (30 minutes) rows_per_page : Number of items to display per page. Default: 10 index_display : Display mode for the index page. Options: cards , list . Default: cards","title":"Configuration Options"},{"location":"configuration/ui/overview/#ui-element-settings","text":"show_record_id : Show record ID column in edit mode. Default: true position_record_form_top : Position the \"Add record\" form at the top of the page. Default: false position_save_button_top : Position the \"Save changes\" button at the top of the page. Default: true show_zone_comments : Show or hide zone comments. Default: true show_record_comments : Show or hide record comments. Default: false display_serial_in_zone_list : Display serial number in zone list. Default: false display_template_in_zone_list : Display template information in zone list. Default: false search_group_records : Group records by name and content in search results. Default: false","title":"UI Element Settings"},{"location":"configuration/ui/overview/#zone-editing-features","text":"add_reverse_record : Enable checkbox to add PTR record from regular zone view. Default: true add_domain_record : Enable checkbox to add A/AAAA record from reverse zone view. Default: true show_migrations : Show migrations menu item. Default: false (experimental)","title":"Zone Editing Features"},{"location":"configuration/ui/overview/#example-configuration","text":"return [ 'interface' => [ 'language' => 'en_EN', 'theme' => 'spark', 'title' => 'DNS Management Console', 'rows_per_page' => 20, 'index_display' => 'list', 'show_record_comments' => true, 'position_save_button_top' => true, ], ]; See the specific documentation pages for more detailed information on each customization option: Themes Layout (includes custom header and footer setup) Custom CSS","title":"Example Configuration"},{"location":"configuration/ui/themes/","text":"Themes Poweradmin includes built-in themes that can be selected through the configuration file to change the application's visual appearance. Available Themes Poweradmin comes with the following themes: ignite (default): A clean, light theme with modern design elements spark : A dark theme optimized for reduced eye strain in low-light environments Theme Configuration Configure your preferred theme in the config/settings.php file under the interface section: return [ 'interface' => [ 'theme' => 'ignite', // Options: 'ignite', 'spark' ], ]; Theme Screenshots Ignite Theme (Light) The default light theme with a clean, professional interface. Spark Theme (Dark) A dark theme that reduces eye strain in low-light environments. Theme Features Each theme includes consistent styling for: Navigation menus Form elements Buttons and controls Tables and data views Modals and dialogs Notifications and alerts Theme Customization While Poweradmin doesn't currently support custom theme creation, you can use Custom CSS to modify the appearance of the built-in themes. For example, to change the primary color in the ignite theme: /* Custom color overrides for ignite theme */ .btn-primary { background-color: #3c8dbc; border-color: #367fa9; } For more advanced customization, see the Custom CSS documentation.","title":"Themes"},{"location":"configuration/ui/themes/#themes","text":"Poweradmin includes built-in themes that can be selected through the configuration file to change the application's visual appearance.","title":"Themes"},{"location":"configuration/ui/themes/#available-themes","text":"Poweradmin comes with the following themes: ignite (default): A clean, light theme with modern design elements spark : A dark theme optimized for reduced eye strain in low-light environments","title":"Available Themes"},{"location":"configuration/ui/themes/#theme-configuration","text":"Configure your preferred theme in the config/settings.php file under the interface section: return [ 'interface' => [ 'theme' => 'ignite', // Options: 'ignite', 'spark' ], ];","title":"Theme Configuration"},{"location":"configuration/ui/themes/#theme-screenshots","text":"","title":"Theme Screenshots"},{"location":"configuration/ui/themes/#ignite-theme-light","text":"The default light theme with a clean, professional interface.","title":"Ignite Theme (Light)"},{"location":"configuration/ui/themes/#spark-theme-dark","text":"A dark theme that reduces eye strain in low-light environments.","title":"Spark Theme (Dark)"},{"location":"configuration/ui/themes/#theme-features","text":"Each theme includes consistent styling for: Navigation menus Form elements Buttons and controls Tables and data views Modals and dialogs Notifications and alerts","title":"Theme Features"},{"location":"configuration/ui/themes/#theme-customization","text":"While Poweradmin doesn't currently support custom theme creation, you can use Custom CSS to modify the appearance of the built-in themes. For example, to change the primary color in the ignite theme: /* Custom color overrides for ignite theme */ .btn-primary { background-color: #3c8dbc; border-color: #367fa9; } For more advanced customization, see the Custom CSS documentation.","title":"Theme Customization"},{"location":"contributing/coding-standards/","text":"PowerAdmin Coding Standards PowerAdmin follows a set of coding standards based on PSR-12 with some project-specific modifications. This document outlines these standards and how to enforce them. Standards Overview Base Standard : PSR-12 Modifications : Excludes PSR12.Classes.OpeningBraceSpace rule Line length set to 250 characters (instead of PSR-12 default) Autoloading : PSR-4 (as specified in composer.json) Code Quality Tools PowerAdmin uses several tools to maintain code quality: PHP_CodeSniffer (PHPCS/PHPCBF) Checks for coding standard violations Can automatically fix many issues with PHPCBF PHP-CS-Fixer Additional code style fixing Complements PHPCS for more comprehensive style enforcement PHPStan Static analysis tool Detects potential errors and type inconsistencies Psalm Type checker Configured with level 2 error reporting PHPMD (PHP Mess Detector) Detects code smells and potential problems Helps maintain cleaner, more maintainable code Using the Tools Running Code Style Checks # Check code style for lib directory composer check:lib # Check code style for all PHP files composer check:all Auto-Fixing Code Style Issues # Fix code style in lib directory composer format:lib # Fix code style in all PHP files composer format:all Running PHP-CS-Fixer # Check style with PHP-CS-Fixer composer style:check # Fix style with PHP-CS-Fixer composer style:fix Static Analysis # Run PHPStan static analysis composer analyse:all # Run Psalm type checking composer check:psalm PHP Mess Detection # Run PHPMD composer check:phpmd:lib Setting Up Your Development Environment For a consistent development experience, configure your IDE to use these coding standards: PhpStorm Install the PHP_CodeSniffer plugin Configure it to use the project's phpcs.xml file Enable \"Reformat Code\" to use PSR-12 with project modifications VSCode Install the PHP Intelephense or PHP CodeSniffer extensions Configure them to use the project's phpcs.xml file Pre-Commit Hooks Consider setting up Git pre-commit hooks to automatically check/fix code style before commits: Install husky and lint-staged Configure lint-staged to run PHP_CodeSniffer or PHP-CS-Fixer on staged PHP files Additional Resources PSR-12 Documentation PHP_CodeSniffer Documentation PHP-CS-Fixer Documentation PHPStan Documentation Psalm Documentation","title":"Coding Standards"},{"location":"contributing/coding-standards/#poweradmin-coding-standards","text":"PowerAdmin follows a set of coding standards based on PSR-12 with some project-specific modifications. This document outlines these standards and how to enforce them.","title":"PowerAdmin Coding Standards"},{"location":"contributing/coding-standards/#standards-overview","text":"Base Standard : PSR-12 Modifications : Excludes PSR12.Classes.OpeningBraceSpace rule Line length set to 250 characters (instead of PSR-12 default) Autoloading : PSR-4 (as specified in composer.json)","title":"Standards Overview"},{"location":"contributing/coding-standards/#code-quality-tools","text":"PowerAdmin uses several tools to maintain code quality:","title":"Code Quality Tools"},{"location":"contributing/coding-standards/#php_codesniffer-phpcsphpcbf","text":"Checks for coding standard violations Can automatically fix many issues with PHPCBF","title":"PHP_CodeSniffer (PHPCS/PHPCBF)"},{"location":"contributing/coding-standards/#php-cs-fixer","text":"Additional code style fixing Complements PHPCS for more comprehensive style enforcement","title":"PHP-CS-Fixer"},{"location":"contributing/coding-standards/#phpstan","text":"Static analysis tool Detects potential errors and type inconsistencies","title":"PHPStan"},{"location":"contributing/coding-standards/#psalm","text":"Type checker Configured with level 2 error reporting","title":"Psalm"},{"location":"contributing/coding-standards/#phpmd-php-mess-detector","text":"Detects code smells and potential problems Helps maintain cleaner, more maintainable code","title":"PHPMD (PHP Mess Detector)"},{"location":"contributing/coding-standards/#using-the-tools","text":"","title":"Using the Tools"},{"location":"contributing/coding-standards/#running-code-style-checks","text":"# Check code style for lib directory composer check:lib # Check code style for all PHP files composer check:all","title":"Running Code Style Checks"},{"location":"contributing/coding-standards/#auto-fixing-code-style-issues","text":"# Fix code style in lib directory composer format:lib # Fix code style in all PHP files composer format:all","title":"Auto-Fixing Code Style Issues"},{"location":"contributing/coding-standards/#running-php-cs-fixer","text":"# Check style with PHP-CS-Fixer composer style:check # Fix style with PHP-CS-Fixer composer style:fix","title":"Running PHP-CS-Fixer"},{"location":"contributing/coding-standards/#static-analysis","text":"# Run PHPStan static analysis composer analyse:all # Run Psalm type checking composer check:psalm","title":"Static Analysis"},{"location":"contributing/coding-standards/#php-mess-detection","text":"# Run PHPMD composer check:phpmd:lib","title":"PHP Mess Detection"},{"location":"contributing/coding-standards/#setting-up-your-development-environment","text":"For a consistent development experience, configure your IDE to use these coding standards:","title":"Setting Up Your Development Environment"},{"location":"contributing/coding-standards/#phpstorm","text":"Install the PHP_CodeSniffer plugin Configure it to use the project's phpcs.xml file Enable \"Reformat Code\" to use PSR-12 with project modifications","title":"PhpStorm"},{"location":"contributing/coding-standards/#vscode","text":"Install the PHP Intelephense or PHP CodeSniffer extensions Configure them to use the project's phpcs.xml file","title":"VSCode"},{"location":"contributing/coding-standards/#pre-commit-hooks","text":"Consider setting up Git pre-commit hooks to automatically check/fix code style before commits: Install husky and lint-staged Configure lint-staged to run PHP_CodeSniffer or PHP-CS-Fixer on staged PHP files","title":"Pre-Commit Hooks"},{"location":"contributing/coding-standards/#additional-resources","text":"PSR-12 Documentation PHP_CodeSniffer Documentation PHP-CS-Fixer Documentation PHPStan Documentation Psalm Documentation","title":"Additional Resources"},{"location":"contributing/development/","text":"PowerAdmin Development Guide Development Environment Setup Prerequisites PHP 8.1 or higher MySQL, PostgreSQL, or SQLite Composer Node.js and NPM (for frontend assets) PowerDNS server (for testing) Installation for Development Clone the repository git clone https://github.com/poweradmin/poweradmin.git cd poweradmin Install dependencies composer install npm install Configure the application Copy config/settings.defaults.php to a new file in the same directory Modify the settings according to your environment Project Structure Core Components lib/ : Core library code Application/ : Controllers, services, and application logic Domain/ : Domain models and business logic Infrastructure/ : Database, API clients, and external services Frontend assets/ : JavaScript and CSS files style/ : CSS files (ignite.css, spark.css) templates/ : HTML templates Testing tests/ : Test files unit/ : Unit tests integration/ : Integration tests plans/ : Test plans cypress/ : End-to-end tests Documentation Some documentation can be generated from the source code using phpDocumentor. To generate the documentation, run the following command: phive install phpDocumentor composer run docs The documentation will be generated in the docs directory. Testing PowerAdmin has comprehensive testing support including unit tests, integration tests, and end-to-end tests. For detailed information on testing methodologies, frameworks, and running tests, please see the Testing Guide . Continuous Integration The project uses GitHub Actions for CI/CD Ensure all tests pass before submitting pull requests Coding Standards PowerAdmin follows PSR-12 with project-specific modifications. For detailed information on coding standards, tools for code quality, and how to enforce them, see the Coding Standards Guide . Database Migrations Database migrations are managed with Phinx See db/migrations/ for existing migrations Create new migrations with: ./vendor/bin/phinx create MyNewMigration Contributing Fork the repository Create a feature branch Make your changes Run tests and ensure coding standards Submit a pull request Contribution Guidelines Code Quality : Ensure your code follows the project's style and standards Testing : Test your changes thoroughly before submitting Documentation : Include appropriate documentation for new features Attribution Policy All meaningful contributions are credited in release notes. Please note: Sometimes similar ideas come from multiple contributors; implementation quality determines which is merged Contributions may be partially accepted or rewritten to maintain project consistency Even if your exact code isn't used, your ideas will still be credited if they influence the final implementation If you notice your contribution hasn't been acknowledged in the release notes, please reach out - we want to ensure everyone receives proper recognition. Internationalization Translation files are in the locale/ directory New strings should be wrapped in _() for translation Security Considerations Always validate user input Use prepared statements for database queries Follow secure coding practices Use CSRF tokens for forms","title":"Development Setup"},{"location":"contributing/development/#poweradmin-development-guide","text":"","title":"PowerAdmin Development Guide"},{"location":"contributing/development/#development-environment-setup","text":"","title":"Development Environment Setup"},{"location":"contributing/development/#prerequisites","text":"PHP 8.1 or higher MySQL, PostgreSQL, or SQLite Composer Node.js and NPM (for frontend assets) PowerDNS server (for testing)","title":"Prerequisites"},{"location":"contributing/development/#installation-for-development","text":"Clone the repository git clone https://github.com/poweradmin/poweradmin.git cd poweradmin Install dependencies composer install npm install Configure the application Copy config/settings.defaults.php to a new file in the same directory Modify the settings according to your environment","title":"Installation for Development"},{"location":"contributing/development/#project-structure","text":"","title":"Project Structure"},{"location":"contributing/development/#core-components","text":"lib/ : Core library code Application/ : Controllers, services, and application logic Domain/ : Domain models and business logic Infrastructure/ : Database, API clients, and external services","title":"Core Components"},{"location":"contributing/development/#frontend","text":"assets/ : JavaScript and CSS files style/ : CSS files (ignite.css, spark.css) templates/ : HTML templates","title":"Frontend"},{"location":"contributing/development/#testing","text":"tests/ : Test files unit/ : Unit tests integration/ : Integration tests plans/ : Test plans cypress/ : End-to-end tests","title":"Testing"},{"location":"contributing/development/#documentation","text":"Some documentation can be generated from the source code using phpDocumentor. To generate the documentation, run the following command: phive install phpDocumentor composer run docs The documentation will be generated in the docs directory.","title":"Documentation"},{"location":"contributing/development/#testing_1","text":"PowerAdmin has comprehensive testing support including unit tests, integration tests, and end-to-end tests. For detailed information on testing methodologies, frameworks, and running tests, please see the Testing Guide .","title":"Testing"},{"location":"contributing/development/#continuous-integration","text":"The project uses GitHub Actions for CI/CD Ensure all tests pass before submitting pull requests","title":"Continuous Integration"},{"location":"contributing/development/#coding-standards","text":"PowerAdmin follows PSR-12 with project-specific modifications. For detailed information on coding standards, tools for code quality, and how to enforce them, see the Coding Standards Guide .","title":"Coding Standards"},{"location":"contributing/development/#database-migrations","text":"Database migrations are managed with Phinx See db/migrations/ for existing migrations Create new migrations with: ./vendor/bin/phinx create MyNewMigration","title":"Database Migrations"},{"location":"contributing/development/#contributing","text":"Fork the repository Create a feature branch Make your changes Run tests and ensure coding standards Submit a pull request","title":"Contributing"},{"location":"contributing/development/#contribution-guidelines","text":"Code Quality : Ensure your code follows the project's style and standards Testing : Test your changes thoroughly before submitting Documentation : Include appropriate documentation for new features","title":"Contribution Guidelines"},{"location":"contributing/development/#attribution-policy","text":"All meaningful contributions are credited in release notes. Please note: Sometimes similar ideas come from multiple contributors; implementation quality determines which is merged Contributions may be partially accepted or rewritten to maintain project consistency Even if your exact code isn't used, your ideas will still be credited if they influence the final implementation If you notice your contribution hasn't been acknowledged in the release notes, please reach out - we want to ensure everyone receives proper recognition.","title":"Attribution Policy"},{"location":"contributing/development/#internationalization","text":"Translation files are in the locale/ directory New strings should be wrapped in _() for translation","title":"Internationalization"},{"location":"contributing/development/#security-considerations","text":"Always validate user input Use prepared statements for database queries Follow secure coding practices Use CSRF tokens for forms","title":"Security Considerations"},{"location":"contributing/testing/","text":"PowerAdmin Testing Guide Overview This document outlines the testing strategy and implementation details for the PowerAdmin project. Test Frameworks & Tools PHPUnit : Primary testing framework for PHP code Cypress : End-to-end testing framework for UI testing In addition to these testing frameworks, PowerAdmin uses various code quality tools that are described in detail in the Coding Standards Guide , including PHPStan, PHP_CodeSniffer, Psalm, PHPMD, and PHP-CS-Fixer. Test Directory Structure /tests \u251c\u2500\u2500 integration - Integration tests \u251c\u2500\u2500 plans - Test plans documentation \u2514\u2500\u2500 unit - Unit tests /cypress \u251c\u2500\u2500 e2e - End-to-end test specs by feature \u251c\u2500\u2500 fixtures - Test data files \u2514\u2500\u2500 support - Cypress support and custom commands Types of Tests Unit Tests Located in /tests/unit , these tests verify individual components in isolation, focusing on: - Configuration management - DNS record handling and formatting - Router functionality - IP address validation and handling - User authentication and password encryption - Various utility and helper functions Integration Tests Located in /tests/integration , testing interactions between components, particularly database operations. End-to-End Tests Located in /cypress/e2e , organized by feature: Main Feature Tests Authentication - Login and form validation User Management - Creating, editing, and deleting users Zone Management - Adding master/slave zones and records Record Management - Adding, editing, and deleting different record types Zone Templates - Template creation and application Search - Zone and record searching Corner Case Tests Input Validation - Testing edge cases in form validation Error Handling - Session management, security, and UI edge cases The Cypress tests are located in the cypress/e2e directory organized by feature. A complete test plan for UI testing is available in tests/plans/cypress-ui-test-plan.md . Manual Test Plans Documentation in /tests/plans outlining test procedures for: - UI testing ( tests/plans/cypress-ui-test-plan.md ) - Installer testing ( tests/plans/installer-test-plan.md ) - Covers both regular installation flows and corner cases for properly testing the PowerAdmin installation process Running Tests PHP Tests # Run unit tests composer tests # Run integration tests composer tests:integration Cypress Tests # Open Cypress Test Runner npm run cypress:open # or yarn cypress:open # Run Cypress tests headlessly npm run cypress:run # or yarn cypress:run Code Quality Checks For running code quality checks, please refer to the Coding Standards Guide for detailed command usage. CI/CD Integration The test suite is integrated with CI/CD pipelines to ensure code quality and prevent regressions. Test Coverage Current test coverage focuses on: - Core DNS management functionality - User authentication and management - Configuration validation - UI workflows through Cypress tests Contributing Tests When adding new features or fixing bugs: 1. Add appropriate unit tests for new classes and methods 2. Update or add Cypress tests for UI changes 3. Run the full test suite before submitting PRs 4. Ensure all code quality checks pass","title":"Testing"},{"location":"contributing/testing/#poweradmin-testing-guide","text":"","title":"PowerAdmin Testing Guide"},{"location":"contributing/testing/#overview","text":"This document outlines the testing strategy and implementation details for the PowerAdmin project.","title":"Overview"},{"location":"contributing/testing/#test-frameworks-tools","text":"PHPUnit : Primary testing framework for PHP code Cypress : End-to-end testing framework for UI testing In addition to these testing frameworks, PowerAdmin uses various code quality tools that are described in detail in the Coding Standards Guide , including PHPStan, PHP_CodeSniffer, Psalm, PHPMD, and PHP-CS-Fixer.","title":"Test Frameworks &amp; Tools"},{"location":"contributing/testing/#test-directory-structure","text":"/tests \u251c\u2500\u2500 integration - Integration tests \u251c\u2500\u2500 plans - Test plans documentation \u2514\u2500\u2500 unit - Unit tests /cypress \u251c\u2500\u2500 e2e - End-to-end test specs by feature \u251c\u2500\u2500 fixtures - Test data files \u2514\u2500\u2500 support - Cypress support and custom commands","title":"Test Directory Structure"},{"location":"contributing/testing/#types-of-tests","text":"","title":"Types of Tests"},{"location":"contributing/testing/#unit-tests","text":"Located in /tests/unit , these tests verify individual components in isolation, focusing on: - Configuration management - DNS record handling and formatting - Router functionality - IP address validation and handling - User authentication and password encryption - Various utility and helper functions","title":"Unit Tests"},{"location":"contributing/testing/#integration-tests","text":"Located in /tests/integration , testing interactions between components, particularly database operations.","title":"Integration Tests"},{"location":"contributing/testing/#end-to-end-tests","text":"Located in /cypress/e2e , organized by feature:","title":"End-to-End Tests"},{"location":"contributing/testing/#main-feature-tests","text":"Authentication - Login and form validation User Management - Creating, editing, and deleting users Zone Management - Adding master/slave zones and records Record Management - Adding, editing, and deleting different record types Zone Templates - Template creation and application Search - Zone and record searching","title":"Main Feature Tests"},{"location":"contributing/testing/#corner-case-tests","text":"Input Validation - Testing edge cases in form validation Error Handling - Session management, security, and UI edge cases The Cypress tests are located in the cypress/e2e directory organized by feature. A complete test plan for UI testing is available in tests/plans/cypress-ui-test-plan.md .","title":"Corner Case Tests"},{"location":"contributing/testing/#manual-test-plans","text":"Documentation in /tests/plans outlining test procedures for: - UI testing ( tests/plans/cypress-ui-test-plan.md ) - Installer testing ( tests/plans/installer-test-plan.md ) - Covers both regular installation flows and corner cases for properly testing the PowerAdmin installation process","title":"Manual Test Plans"},{"location":"contributing/testing/#running-tests","text":"","title":"Running Tests"},{"location":"contributing/testing/#php-tests","text":"# Run unit tests composer tests # Run integration tests composer tests:integration","title":"PHP Tests"},{"location":"contributing/testing/#cypress-tests","text":"# Open Cypress Test Runner npm run cypress:open # or yarn cypress:open # Run Cypress tests headlessly npm run cypress:run # or yarn cypress:run","title":"Cypress Tests"},{"location":"contributing/testing/#code-quality-checks","text":"For running code quality checks, please refer to the Coding Standards Guide for detailed command usage.","title":"Code Quality Checks"},{"location":"contributing/testing/#cicd-integration","text":"The test suite is integrated with CI/CD pipelines to ensure code quality and prevent regressions.","title":"CI/CD Integration"},{"location":"contributing/testing/#test-coverage","text":"Current test coverage focuses on: - Core DNS management functionality - User authentication and management - Configuration validation - UI workflows through Cypress tests","title":"Test Coverage"},{"location":"contributing/testing/#contributing-tests","text":"When adding new features or fixing bugs: 1. Add appropriate unit tests for new classes and methods 2. Update or add Cypress tests for UI changes 3. Run the full test suite before submitting PRs 4. Ensure all code quality checks pass","title":"Contributing Tests"},{"location":"database/mysql-configuration/","text":"MySQL Configuration for PowerAdmin Overview This guide explains how to configure PowerAdmin to use MySQL or MariaDB as your database backend. Requirements MySQL 5.7+ or MariaDB 10.3+ PHP with PDO MySQL extension enabled MySQL user with appropriate privileges Configuration Steps Create a configuration file at /config/settings.php based on the example below: <?php /** * PowerAdmin MySQL Configuration */ return [ /** * Database Settings */ 'database' => [ 'type' => 'mysql', // Set database type to MySQL 'host' => 'localhost', // MySQL server hostname 'port' => '3306', // Default MySQL port 'user' => 'poweradmin', // Database username 'password' => 'your_password', // Database password (change this!) 'name' => 'powerdns', // Database name 'charset' => 'utf8mb4', // Recommended: utf8mb4 for full Unicode support 'file' => '', // Not used for MySQL 'debug' => false, // Set to true to see SQL queries for debugging ], // Other configuration sections remain the same as in settings.defaults.php ]; Database Creation Creating the Database CREATE DATABASE powerdns CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; CREATE USER 'poweradmin'@'localhost' IDENTIFIED BY 'your_password'; GRANT ALL PRIVILEGES ON powerdns.* TO 'poweradmin'@'localhost'; FLUSH PRIVILEGES; Schema Installation The SQL schema files are located in the sql/ directory: For a new installation: Use sql/poweradmin-mysql-db-structure.sql For PowerDNS schema: Check the appropriate version in sql/pdns/[version]/schema.mysql.sql mysql -u poweradmin -p powerdns < sql/poweradmin-mysql-db-structure.sql mysql -u poweradmin -p powerdns < sql/pdns/[version]/schema.mysql.sql Optimization Guidelines Server Configuration For better performance with MySQL, consider these settings in your MySQL server configuration: # my.cnf or my.ini [mysqld] innodb_buffer_pool_size = 128M # Increase for better performance (adjust based on server RAM) max_connections = 100 # Maximum number of connections wait_timeout = 28800 # Timeout for idle connections (in seconds) character_set_server = utf8mb4 # For complete Unicode support collation_server = utf8mb4_general_ci # Case-insensitive collation innodb_flush_log_at_trx_commit = 1 # 1 = Most durable but slower, 2 = Good compromise InnoDB Migration PowerAdmin works best with InnoDB tables. If you're using an older installation with MyISAM tables, consider migrating to InnoDB. See sql/InnoDB-migration.md for detailed migration steps. Performance Considerations Indexes : Ensure indexes are properly set up, especially on frequently queried fields Query optimization : When experiencing slow performance, enable debug mode to review and optimize SQL queries Connection pooling : For high-traffic installations, consider implementing connection pooling Regular maintenance : Run OPTIMIZE TABLE periodically on tables with frequent deletions Consider setting up a maintenance plan for database backups Troubleshooting Common Issues Connection errors : Verify the host, port, user and password settings Character set issues : Make sure the charset in settings matches the database charset Permission problems : Ensure the database user has appropriate privileges Performance issues : Increase buffer pool size Check slow query log Ensure proper indexing","title":"MySQL/MariaDB"},{"location":"database/mysql-configuration/#mysql-configuration-for-poweradmin","text":"","title":"MySQL Configuration for PowerAdmin"},{"location":"database/mysql-configuration/#overview","text":"This guide explains how to configure PowerAdmin to use MySQL or MariaDB as your database backend.","title":"Overview"},{"location":"database/mysql-configuration/#requirements","text":"MySQL 5.7+ or MariaDB 10.3+ PHP with PDO MySQL extension enabled MySQL user with appropriate privileges","title":"Requirements"},{"location":"database/mysql-configuration/#configuration-steps","text":"Create a configuration file at /config/settings.php based on the example below: <?php /** * PowerAdmin MySQL Configuration */ return [ /** * Database Settings */ 'database' => [ 'type' => 'mysql', // Set database type to MySQL 'host' => 'localhost', // MySQL server hostname 'port' => '3306', // Default MySQL port 'user' => 'poweradmin', // Database username 'password' => 'your_password', // Database password (change this!) 'name' => 'powerdns', // Database name 'charset' => 'utf8mb4', // Recommended: utf8mb4 for full Unicode support 'file' => '', // Not used for MySQL 'debug' => false, // Set to true to see SQL queries for debugging ], // Other configuration sections remain the same as in settings.defaults.php ];","title":"Configuration Steps"},{"location":"database/mysql-configuration/#database-creation","text":"","title":"Database Creation"},{"location":"database/mysql-configuration/#creating-the-database","text":"CREATE DATABASE powerdns CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci; CREATE USER 'poweradmin'@'localhost' IDENTIFIED BY 'your_password'; GRANT ALL PRIVILEGES ON powerdns.* TO 'poweradmin'@'localhost'; FLUSH PRIVILEGES;","title":"Creating the Database"},{"location":"database/mysql-configuration/#schema-installation","text":"The SQL schema files are located in the sql/ directory: For a new installation: Use sql/poweradmin-mysql-db-structure.sql For PowerDNS schema: Check the appropriate version in sql/pdns/[version]/schema.mysql.sql mysql -u poweradmin -p powerdns < sql/poweradmin-mysql-db-structure.sql mysql -u poweradmin -p powerdns < sql/pdns/[version]/schema.mysql.sql","title":"Schema Installation"},{"location":"database/mysql-configuration/#optimization-guidelines","text":"","title":"Optimization Guidelines"},{"location":"database/mysql-configuration/#server-configuration","text":"For better performance with MySQL, consider these settings in your MySQL server configuration: # my.cnf or my.ini [mysqld] innodb_buffer_pool_size = 128M # Increase for better performance (adjust based on server RAM) max_connections = 100 # Maximum number of connections wait_timeout = 28800 # Timeout for idle connections (in seconds) character_set_server = utf8mb4 # For complete Unicode support collation_server = utf8mb4_general_ci # Case-insensitive collation innodb_flush_log_at_trx_commit = 1 # 1 = Most durable but slower, 2 = Good compromise","title":"Server Configuration"},{"location":"database/mysql-configuration/#innodb-migration","text":"PowerAdmin works best with InnoDB tables. If you're using an older installation with MyISAM tables, consider migrating to InnoDB. See sql/InnoDB-migration.md for detailed migration steps.","title":"InnoDB Migration"},{"location":"database/mysql-configuration/#performance-considerations","text":"Indexes : Ensure indexes are properly set up, especially on frequently queried fields Query optimization : When experiencing slow performance, enable debug mode to review and optimize SQL queries Connection pooling : For high-traffic installations, consider implementing connection pooling Regular maintenance : Run OPTIMIZE TABLE periodically on tables with frequent deletions Consider setting up a maintenance plan for database backups","title":"Performance Considerations"},{"location":"database/mysql-configuration/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"database/mysql-configuration/#common-issues","text":"Connection errors : Verify the host, port, user and password settings Character set issues : Make sure the charset in settings matches the database charset Permission problems : Ensure the database user has appropriate privileges Performance issues : Increase buffer pool size Check slow query log Ensure proper indexing","title":"Common Issues"},{"location":"database/postgresql-configuration/","text":"PostgreSQL Configuration for PowerAdmin Overview This guide explains how to configure PowerAdmin to use PostgreSQL as your database backend. Requirements PostgreSQL 10.0+ PHP with PDO PostgreSQL extension enabled PostgreSQL user with appropriate privileges Configuration Steps Create a configuration file at /config/settings.php based on the example below: <?php /** * PowerAdmin PostgreSQL Configuration */ return [ /** * Database Settings */ 'database' => [ 'type' => 'pgsql', // Set database type to PostgreSQL 'host' => 'localhost', // PostgreSQL server hostname 'port' => '5432', // Default PostgreSQL port 'user' => 'poweradmin', // Database username 'password' => 'your_password', // Database password (change this!) 'name' => 'powerdns', // Database name 'charset' => 'UTF8', // PostgreSQL uses uppercase charset names 'file' => '', // Not used for PostgreSQL 'debug' => false, // Set to true to see SQL queries for debugging ], // Other configuration sections remain the same as in settings.defaults.php ]; Database Creation Creating the Database CREATE DATABASE powerdns ENCODING 'UTF8'; CREATE USER poweradmin WITH ENCRYPTED PASSWORD 'your_password'; GRANT ALL PRIVILEGES ON DATABASE powerdns TO poweradmin; \\c powerdns GRANT ALL ON SCHEMA public TO poweradmin; Schema Installation The SQL schema files are located in the sql/ directory: For a new installation: Use sql/poweradmin-pgsql-db-structure.sql For PowerDNS schema: Check the appropriate version in sql/pdns/[version]/schema.pgsql.sql psql -U poweradmin -d powerdns -f sql/poweradmin-pgsql-db-structure.sql psql -U poweradmin -d powerdns -f sql/pdns/[version]/schema.pgsql.sql Optimization Guidelines Server Configuration For better performance with PostgreSQL, consider these settings in your PostgreSQL server configuration: # postgresql.conf max_connections = 100 # Maximum number of connections shared_buffers = 128MB # Start with 25% of RAM for small servers effective_cache_size = 4GB # Set to about 50-75% of available RAM work_mem = 4MB # Memory for query operations maintenance_work_mem = 64MB # Memory for maintenance operations random_page_cost = 4 # Lower for SSD (1.1-2.0), higher for HDD timezone = 'UTC' # Database timezone PostgreSQL-Specific Considerations Sequences PostgreSQL uses sequences for auto-incrementing primary keys. If you're migrating from MySQL or experiencing issues with IDs, you may need to reset sequences: SELECT setval('sequence_name', (SELECT MAX(id) FROM table_name)); Case Sensitivity PostgreSQL is case-sensitive for identifiers unless quoted. All table and column names in PowerAdmin should be accessed in lowercase. Performance Tuning VACUUM : Schedule regular VACUUM ANALYZE operations to maintain database health Indexing : Consider additional indexes for query patterns specific to your installation Statement Timeout : For web applications, consider setting statement_timeout to prevent long-running queries Troubleshooting Common Issues Connection errors : Verify the host, port, user and password settings Check pg_hba.conf for client authorization settings Permission problems : Ensure the database user has appropriate privileges Check both database and schema-level permissions Performance issues : Run EXPLAIN ANALYZE on slow queries Check for missing indexes Ensure autovacuum is properly configured SQL Compatibility Notes When developing custom queries or extensions for PowerAdmin with PostgreSQL, note these differences from MySQL: PostgreSQL uses SERIAL instead of AUTO_INCREMENT String concatenation uses || instead of CONCAT() or + Use IS NULL and IS NOT NULL instead of = NULL or != NULL Date functions differ significantly between MySQL and PostgreSQL PostgreSQL is generally stricter about SQL syntax and type casting","title":"PostgreSQL"},{"location":"database/postgresql-configuration/#postgresql-configuration-for-poweradmin","text":"","title":"PostgreSQL Configuration for PowerAdmin"},{"location":"database/postgresql-configuration/#overview","text":"This guide explains how to configure PowerAdmin to use PostgreSQL as your database backend.","title":"Overview"},{"location":"database/postgresql-configuration/#requirements","text":"PostgreSQL 10.0+ PHP with PDO PostgreSQL extension enabled PostgreSQL user with appropriate privileges","title":"Requirements"},{"location":"database/postgresql-configuration/#configuration-steps","text":"Create a configuration file at /config/settings.php based on the example below: <?php /** * PowerAdmin PostgreSQL Configuration */ return [ /** * Database Settings */ 'database' => [ 'type' => 'pgsql', // Set database type to PostgreSQL 'host' => 'localhost', // PostgreSQL server hostname 'port' => '5432', // Default PostgreSQL port 'user' => 'poweradmin', // Database username 'password' => 'your_password', // Database password (change this!) 'name' => 'powerdns', // Database name 'charset' => 'UTF8', // PostgreSQL uses uppercase charset names 'file' => '', // Not used for PostgreSQL 'debug' => false, // Set to true to see SQL queries for debugging ], // Other configuration sections remain the same as in settings.defaults.php ];","title":"Configuration Steps"},{"location":"database/postgresql-configuration/#database-creation","text":"","title":"Database Creation"},{"location":"database/postgresql-configuration/#creating-the-database","text":"CREATE DATABASE powerdns ENCODING 'UTF8'; CREATE USER poweradmin WITH ENCRYPTED PASSWORD 'your_password'; GRANT ALL PRIVILEGES ON DATABASE powerdns TO poweradmin; \\c powerdns GRANT ALL ON SCHEMA public TO poweradmin;","title":"Creating the Database"},{"location":"database/postgresql-configuration/#schema-installation","text":"The SQL schema files are located in the sql/ directory: For a new installation: Use sql/poweradmin-pgsql-db-structure.sql For PowerDNS schema: Check the appropriate version in sql/pdns/[version]/schema.pgsql.sql psql -U poweradmin -d powerdns -f sql/poweradmin-pgsql-db-structure.sql psql -U poweradmin -d powerdns -f sql/pdns/[version]/schema.pgsql.sql","title":"Schema Installation"},{"location":"database/postgresql-configuration/#optimization-guidelines","text":"","title":"Optimization Guidelines"},{"location":"database/postgresql-configuration/#server-configuration","text":"For better performance with PostgreSQL, consider these settings in your PostgreSQL server configuration: # postgresql.conf max_connections = 100 # Maximum number of connections shared_buffers = 128MB # Start with 25% of RAM for small servers effective_cache_size = 4GB # Set to about 50-75% of available RAM work_mem = 4MB # Memory for query operations maintenance_work_mem = 64MB # Memory for maintenance operations random_page_cost = 4 # Lower for SSD (1.1-2.0), higher for HDD timezone = 'UTC' # Database timezone","title":"Server Configuration"},{"location":"database/postgresql-configuration/#postgresql-specific-considerations","text":"","title":"PostgreSQL-Specific Considerations"},{"location":"database/postgresql-configuration/#sequences","text":"PostgreSQL uses sequences for auto-incrementing primary keys. If you're migrating from MySQL or experiencing issues with IDs, you may need to reset sequences: SELECT setval('sequence_name', (SELECT MAX(id) FROM table_name));","title":"Sequences"},{"location":"database/postgresql-configuration/#case-sensitivity","text":"PostgreSQL is case-sensitive for identifiers unless quoted. All table and column names in PowerAdmin should be accessed in lowercase.","title":"Case Sensitivity"},{"location":"database/postgresql-configuration/#performance-tuning","text":"VACUUM : Schedule regular VACUUM ANALYZE operations to maintain database health Indexing : Consider additional indexes for query patterns specific to your installation Statement Timeout : For web applications, consider setting statement_timeout to prevent long-running queries","title":"Performance Tuning"},{"location":"database/postgresql-configuration/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"database/postgresql-configuration/#common-issues","text":"Connection errors : Verify the host, port, user and password settings Check pg_hba.conf for client authorization settings Permission problems : Ensure the database user has appropriate privileges Check both database and schema-level permissions Performance issues : Run EXPLAIN ANALYZE on slow queries Check for missing indexes Ensure autovacuum is properly configured","title":"Common Issues"},{"location":"database/postgresql-configuration/#sql-compatibility-notes","text":"When developing custom queries or extensions for PowerAdmin with PostgreSQL, note these differences from MySQL: PostgreSQL uses SERIAL instead of AUTO_INCREMENT String concatenation uses || instead of CONCAT() or + Use IS NULL and IS NOT NULL instead of = NULL or != NULL Date functions differ significantly between MySQL and PostgreSQL PostgreSQL is generally stricter about SQL syntax and type casting","title":"SQL Compatibility Notes"},{"location":"database/sqlite/","text":"SQLite Configuration Guide for PowerAdmin Overview This guide explains how to configure PowerAdmin to use SQLite as your database backend. Requirements PHP with PDO SQLite extension enabled Write permissions on the directory where the SQLite database will be stored Configuration Steps Create a configuration file at /config/settings.php based on the example below: <?php /** * PowerAdmin SQLite Configuration */ return [ /** * Database Settings */ 'database' => [ 'type' => 'sqlite', // Set database type to SQLite 'file' => '/path/to/your/poweradmin.sqlite', // Absolute path to SQLite database file 'host' => '', // Not used for SQLite 'port' => '', // Not used for SQLite 'user' => '', // Not used for SQLite 'password' => '', // Not used for SQLite 'name' => '', // Not used for SQLite 'charset' => 'utf8', // Character set 'debug' => false, // Set to true to debug SQL queries ], // Other configuration sections remain the same as in settings.defaults.php ]; Ensure the directory containing the SQLite database file has appropriate permissions: The web server user (e.g., www-data, apache, nginx) needs read/write access to both the directory and database file Initialize your database structure using the appropriate SQL file: Use sql/poweradmin-sqlite-db-structure.sql for a new installation For upgrades, use the appropriate upgrade script from the sql/ directory Database Initialization You have two options to initialize a new SQLite database: Option 1: Manual Setup # Create the database file touch /path/to/your/poweradmin.sqlite # Set proper permissions chmod 664 /path/to/your/poweradmin.sqlite chown www-data:www-data /path/to/your/poweradmin.sqlite # Replace with your web server user # Import the schema sqlite3 /path/to/your/poweradmin.sqlite < /path/to/poweradmin/sql/poweradmin-sqlite-db-structure.sql Option 2: Using the Automated Script You can use the provided script from the PowerAdmin repository: https://github.com/poweradmin/poweradmin-scripts/blob/master/create_sqlite_db.sh Running the Installer After creating your SQLite database, run the PowerAdmin installer and select SQLite as the database type, then provide the full path to your database file: When the installation is complete, copy the generated configuration to inc.config.php: Performance Considerations Enable SQLite's WAL (Write-Ahead Logging) mode for better concurrency: // Can be added to your application initialization code $pdo->exec('PRAGMA journal_mode=WAL;'); Regularly perform VACUUM operations to optimize database size: VACUUM; For larger deployments, consider using MySQL or PostgreSQL instead Troubleshooting Check file permissions if you encounter \"unable to open database file\" errors Verify that the PHP PDO SQLite extension is enabled with php -m | grep pdo_sqlite Ensure the path to the SQLite file is absolute and accessible to the web server user Check PHP error logs for detailed error messages","title":"SQLite"},{"location":"database/sqlite/#sqlite-configuration-guide-for-poweradmin","text":"","title":"SQLite Configuration Guide for PowerAdmin"},{"location":"database/sqlite/#overview","text":"This guide explains how to configure PowerAdmin to use SQLite as your database backend.","title":"Overview"},{"location":"database/sqlite/#requirements","text":"PHP with PDO SQLite extension enabled Write permissions on the directory where the SQLite database will be stored","title":"Requirements"},{"location":"database/sqlite/#configuration-steps","text":"Create a configuration file at /config/settings.php based on the example below: <?php /** * PowerAdmin SQLite Configuration */ return [ /** * Database Settings */ 'database' => [ 'type' => 'sqlite', // Set database type to SQLite 'file' => '/path/to/your/poweradmin.sqlite', // Absolute path to SQLite database file 'host' => '', // Not used for SQLite 'port' => '', // Not used for SQLite 'user' => '', // Not used for SQLite 'password' => '', // Not used for SQLite 'name' => '', // Not used for SQLite 'charset' => 'utf8', // Character set 'debug' => false, // Set to true to debug SQL queries ], // Other configuration sections remain the same as in settings.defaults.php ]; Ensure the directory containing the SQLite database file has appropriate permissions: The web server user (e.g., www-data, apache, nginx) needs read/write access to both the directory and database file Initialize your database structure using the appropriate SQL file: Use sql/poweradmin-sqlite-db-structure.sql for a new installation For upgrades, use the appropriate upgrade script from the sql/ directory","title":"Configuration Steps"},{"location":"database/sqlite/#database-initialization","text":"You have two options to initialize a new SQLite database:","title":"Database Initialization"},{"location":"database/sqlite/#option-1-manual-setup","text":"# Create the database file touch /path/to/your/poweradmin.sqlite # Set proper permissions chmod 664 /path/to/your/poweradmin.sqlite chown www-data:www-data /path/to/your/poweradmin.sqlite # Replace with your web server user # Import the schema sqlite3 /path/to/your/poweradmin.sqlite < /path/to/poweradmin/sql/poweradmin-sqlite-db-structure.sql","title":"Option 1: Manual Setup"},{"location":"database/sqlite/#option-2-using-the-automated-script","text":"You can use the provided script from the PowerAdmin repository: https://github.com/poweradmin/poweradmin-scripts/blob/master/create_sqlite_db.sh","title":"Option 2: Using the Automated Script"},{"location":"database/sqlite/#running-the-installer","text":"After creating your SQLite database, run the PowerAdmin installer and select SQLite as the database type, then provide the full path to your database file: When the installation is complete, copy the generated configuration to inc.config.php:","title":"Running the Installer"},{"location":"database/sqlite/#performance-considerations","text":"Enable SQLite's WAL (Write-Ahead Logging) mode for better concurrency: // Can be added to your application initialization code $pdo->exec('PRAGMA journal_mode=WAL;'); Regularly perform VACUUM operations to optimize database size: VACUUM; For larger deployments, consider using MySQL or PostgreSQL instead","title":"Performance Considerations"},{"location":"database/sqlite/#troubleshooting","text":"Check file permissions if you encounter \"unable to open database file\" errors Verify that the PHP PDO SQLite extension is enabled with php -m | grep pdo_sqlite Ensure the path to the SQLite file is absolute and accessible to the web server user Check PHP error logs for detailed error messages","title":"Troubleshooting"},{"location":"getting-started/docker-demo/","text":"Docker Demo The easiest way to evaluate Poweradmin without actually connecting to PowerDNS is to use a Docker image. Steps to Evaluate Poweradmin Using Docker Get the Source Download the release file or use git to clone the repository. Change to the Directory Navigate to the directory where the files are located. Build the Docker Image Run the following command to build the Docker image: sh docker build --no-cache -t poweradmin . Run the Docker Container Execute the following command to run the Docker container: sh docker run -d --name poweradmin -p 8080:80 poweradmin Access Poweradmin Open your browser and go to http://localhost:8080 . Login Use the following credentials to log in: Username : admin Password : testadmin Note : This installation uses SQLite to store all the data.","title":"Docker Demo"},{"location":"getting-started/docker-demo/#docker-demo","text":"The easiest way to evaluate Poweradmin without actually connecting to PowerDNS is to use a Docker image.","title":"Docker Demo"},{"location":"getting-started/docker-demo/#steps-to-evaluate-poweradmin-using-docker","text":"Get the Source Download the release file or use git to clone the repository. Change to the Directory Navigate to the directory where the files are located. Build the Docker Image Run the following command to build the Docker image: sh docker build --no-cache -t poweradmin . Run the Docker Container Execute the following command to run the Docker container: sh docker run -d --name poweradmin -p 8080:80 poweradmin Access Poweradmin Open your browser and go to http://localhost:8080 . Login Use the following credentials to log in: Username : admin Password : testadmin Note : This installation uses SQLite to store all the data.","title":"Steps to Evaluate Poweradmin Using Docker"},{"location":"getting-started/features/","text":"PowerAdmin Features PowerAdmin provides comprehensive DNS management and administration capabilities. Here's an overview of the key features: Zone & Record Management Create and manage DNS zones (Master, Native, and Slave types) Support for supermasters for automatic provisioning of slave zones Full DNS record support: A and AAAA records CNAME records HINFO records MX records NS records PTR records (Reverse DNS) SOA records SRV records TXT records Other record types (supported but not validated) DNSSEC configuration and management IPv6 support Bulk Operations & Templates DNS record templates Default nameserver configuration Batch record creation PowerDNS API integration Security Features Authentication system: Account lockout protection IP-based access control LDAP/Active Directory integration with custom filter Custom password policies Protection mechanisms: CSRF prevention Session security SSL/TLS support System Integration Database support: MySQL/MariaDB integration PostgreSQL support SQLite support Optimized for large databases (tested with 15,000+ zones and 150,000+ records) Configurable connections Email notifications: Multiple transport methods Template customization Configuration: Default settings Environment-specific overrides User Interface Modern responsive design Multi-language support Light and dark themes Customizable elements Error management: Development mode Production mode Logging & Monitoring Logging features: Native system logging Syslog integration Change tracking Configurable levels Monitoring: System statistics Conflict detection Additional Documentation Security Configuration Database Setup DNS Configuration Logging Options","title":"Features"},{"location":"getting-started/features/#poweradmin-features","text":"PowerAdmin provides comprehensive DNS management and administration capabilities. Here's an overview of the key features:","title":"PowerAdmin Features"},{"location":"getting-started/features/#zone-record-management","text":"Create and manage DNS zones (Master, Native, and Slave types) Support for supermasters for automatic provisioning of slave zones Full DNS record support: A and AAAA records CNAME records HINFO records MX records NS records PTR records (Reverse DNS) SOA records SRV records TXT records Other record types (supported but not validated) DNSSEC configuration and management IPv6 support","title":"Zone &amp; Record Management"},{"location":"getting-started/features/#bulk-operations-templates","text":"DNS record templates Default nameserver configuration Batch record creation PowerDNS API integration","title":"Bulk Operations &amp; Templates"},{"location":"getting-started/features/#security-features","text":"Authentication system: Account lockout protection IP-based access control LDAP/Active Directory integration with custom filter Custom password policies Protection mechanisms: CSRF prevention Session security SSL/TLS support","title":"Security Features"},{"location":"getting-started/features/#system-integration","text":"Database support: MySQL/MariaDB integration PostgreSQL support SQLite support Optimized for large databases (tested with 15,000+ zones and 150,000+ records) Configurable connections Email notifications: Multiple transport methods Template customization Configuration: Default settings Environment-specific overrides","title":"System Integration"},{"location":"getting-started/features/#user-interface","text":"Modern responsive design Multi-language support Light and dark themes Customizable elements Error management: Development mode Production mode","title":"User Interface"},{"location":"getting-started/features/#logging-monitoring","text":"Logging features: Native system logging Syslog integration Change tracking Configurable levels Monitoring: System statistics Conflict detection","title":"Logging &amp; Monitoring"},{"location":"getting-started/features/#additional-documentation","text":"Security Configuration Database Setup DNS Configuration Logging Options","title":"Additional Documentation"},{"location":"getting-started/overview/","text":"Overview Welcome to the PowerAdmin documentation! This section will help you get started with PowerAdmin, a web-based administration tool for PowerDNS. Here, you will find an introduction to the tool, its features, and how to navigate through the documentation. Quick Evaluation If you want to quickly evaluate PowerAdmin, follow these guides: Docker Demo : Learn how to set up a demo environment using Docker. First Steps : Get started with the basic setup and configuration. Example Configurations : Explore example configurations to understand different use cases. System Requirements Before installing PowerAdmin, ensure your system meets the necessary requirements. This section covers the hardware and software prerequisites for running PowerAdmin efficiently.","title":"Overview"},{"location":"getting-started/overview/#overview","text":"Welcome to the PowerAdmin documentation! This section will help you get started with PowerAdmin, a web-based administration tool for PowerDNS. Here, you will find an introduction to the tool, its features, and how to navigate through the documentation.","title":"Overview"},{"location":"getting-started/overview/#quick-evaluation","text":"If you want to quickly evaluate PowerAdmin, follow these guides: Docker Demo : Learn how to set up a demo environment using Docker. First Steps : Get started with the basic setup and configuration. Example Configurations : Explore example configurations to understand different use cases.","title":"Quick Evaluation"},{"location":"getting-started/overview/#system-requirements","text":"Before installing PowerAdmin, ensure your system meets the necessary requirements. This section covers the hardware and software prerequisites for running PowerAdmin efficiently.","title":"System Requirements"},{"location":"getting-started/requirements/","text":"PowerAdmin System Requirements Overview PowerAdmin requires PHP 8.1 or higher to run. This document outlines the supported Linux and BSD distributions as well as those that are not supported due to PHP version constraints. For the best experience, ensure your system meets or exceeds the recommended requirements. Minimum Requirements PHP : 8.1 or higher (including 8.2, 8.3, 8.4, etc.) PHP Extensions : intl gettext openssl filter tokenizer pdo One of: pdo-mysql pdo-pgsql pdo-sqlite ldap (optional) Database : MySQL 5.7.x/8.x, MariaDB, PostgreSQL, or SQLite PowerDNS : PowerDNS authoritative server 4.0.0+ Web Server : Apache or NGINX Operating System : Linux or BSD Note : Other web server software, such as Caddy, might also be supported. However, these are usually not tested by the maintainer and may only work with help from the community. Supported Distributions Distribution PHP Version Notes Debian 12.7 8.2 Ubuntu 22.04 8.1 Ubuntu 24.04 8.3 Fedora 40 8.3 Apache included by default Fedora 41 8.3 Apache included by default OpenSuse 15.6 8.2 BSD Operating Systems PowerAdmin is compatible with BSD operating systems that meet the PHP 8.1+ requirement. While not extensively tested, it should work as long as the environment is properly configured. Unsupported Distributions Distribution PHP Version Reason for Lack of Support Debian 11 7.4 PHP below minimum version Ubuntu 20.04 7.4 PHP below minimum version CentOS Stream release 9 8.0 PHP below minimum version Rocky 8.10 7.2 PHP below minimum version Rocky 9.4 8.0 PHP below minimum version Alma 8.10 7.2 PHP below minimum version Alma 9.4 8.0 PHP below minimum version Notes Distributions listed as unsupported can potentially be configured manually with a custom PHP build, but this is not officially supported. Upgrade paths are recommended for unsupported distributions to maintain security and compatibility. Tested Environments PowerAdmin has been tested with the following software combinations: Poweradmin PHP PowerDNS MariaDB MySQL PostgreSQL SQLite 4.0.x 8.1.31 4.7.4 10.11.10 9.1.0 16.3 3.45.3 3.9.x 8.1.31 4.7.4 10.11.10 9.1.0 16.3 3.45.3 3.8.x 8.1.28 4.5.5 10.11.8 - 16.3 3.45.3 3.7.x 8.1.2 4.5.3 11.1.2 8.2.0 16.0 3.40.1 3.6.x 8.1.2 4.5.3 11.1.2 8.1.0 16.0 3.40.1 3.5.x 8.1.17 4.5.3 10.11.2 8.0.32 15.2 3.34.1 3.4.x 7.4.3 / 8.1.12 4.2.1 10.10.2 8.0.31 15.1 3.34.1","title":"System Requirements"},{"location":"getting-started/requirements/#poweradmin-system-requirements","text":"","title":"PowerAdmin System Requirements"},{"location":"getting-started/requirements/#overview","text":"PowerAdmin requires PHP 8.1 or higher to run. This document outlines the supported Linux and BSD distributions as well as those that are not supported due to PHP version constraints. For the best experience, ensure your system meets or exceeds the recommended requirements.","title":"Overview"},{"location":"getting-started/requirements/#minimum-requirements","text":"PHP : 8.1 or higher (including 8.2, 8.3, 8.4, etc.) PHP Extensions : intl gettext openssl filter tokenizer pdo One of: pdo-mysql pdo-pgsql pdo-sqlite ldap (optional) Database : MySQL 5.7.x/8.x, MariaDB, PostgreSQL, or SQLite PowerDNS : PowerDNS authoritative server 4.0.0+ Web Server : Apache or NGINX Operating System : Linux or BSD Note : Other web server software, such as Caddy, might also be supported. However, these are usually not tested by the maintainer and may only work with help from the community.","title":"Minimum Requirements"},{"location":"getting-started/requirements/#supported-distributions","text":"Distribution PHP Version Notes Debian 12.7 8.2 Ubuntu 22.04 8.1 Ubuntu 24.04 8.3 Fedora 40 8.3 Apache included by default Fedora 41 8.3 Apache included by default OpenSuse 15.6 8.2","title":"Supported Distributions"},{"location":"getting-started/requirements/#bsd-operating-systems","text":"PowerAdmin is compatible with BSD operating systems that meet the PHP 8.1+ requirement. While not extensively tested, it should work as long as the environment is properly configured.","title":"BSD Operating Systems"},{"location":"getting-started/requirements/#unsupported-distributions","text":"Distribution PHP Version Reason for Lack of Support Debian 11 7.4 PHP below minimum version Ubuntu 20.04 7.4 PHP below minimum version CentOS Stream release 9 8.0 PHP below minimum version Rocky 8.10 7.2 PHP below minimum version Rocky 9.4 8.0 PHP below minimum version Alma 8.10 7.2 PHP below minimum version Alma 9.4 8.0 PHP below minimum version","title":"Unsupported Distributions"},{"location":"getting-started/requirements/#notes","text":"Distributions listed as unsupported can potentially be configured manually with a custom PHP build, but this is not officially supported. Upgrade paths are recommended for unsupported distributions to maintain security and compatibility.","title":"Notes"},{"location":"getting-started/requirements/#tested-environments","text":"PowerAdmin has been tested with the following software combinations: Poweradmin PHP PowerDNS MariaDB MySQL PostgreSQL SQLite 4.0.x 8.1.31 4.7.4 10.11.10 9.1.0 16.3 3.45.3 3.9.x 8.1.31 4.7.4 10.11.10 9.1.0 16.3 3.45.3 3.8.x 8.1.28 4.5.5 10.11.8 - 16.3 3.45.3 3.7.x 8.1.2 4.5.3 11.1.2 8.2.0 16.0 3.40.1 3.6.x 8.1.2 4.5.3 11.1.2 8.1.0 16.0 3.40.1 3.5.x 8.1.17 4.5.3 10.11.2 8.0.32 15.2 3.34.1 3.4.x 7.4.3 / 8.1.12 4.2.1 10.10.2 8.0.31 15.1 3.34.1","title":"Tested Environments"},{"location":"installation/","text":"Installation Overview Poweradmin can be installed on various operating systems and with different database backends. This section provides installation guides for different environments. Operating Systems Debian - Installation guide for Debian Ubuntu - Installation guide for Ubuntu CentOS/RHEL - Installation guide for CentOS and Red Hat Enterprise Linux Installation Methods Manual Installation - Step-by-step guide for manual installation Composer Installation - Installing Poweradmin using Composer Database Setup MySQL/MariaDB - Setting up with MySQL or MariaDB PostgreSQL - Setting up with PostgreSQL SQLite - Setting up with SQLite Choose the installation method that best fits your environment and requirements.","title":"Overview"},{"location":"installation/#installation-overview","text":"Poweradmin can be installed on various operating systems and with different database backends. This section provides installation guides for different environments.","title":"Installation Overview"},{"location":"installation/#operating-systems","text":"Debian - Installation guide for Debian Ubuntu - Installation guide for Ubuntu CentOS/RHEL - Installation guide for CentOS and Red Hat Enterprise Linux","title":"Operating Systems"},{"location":"installation/#installation-methods","text":"Manual Installation - Step-by-step guide for manual installation Composer Installation - Installing Poweradmin using Composer","title":"Installation Methods"},{"location":"installation/#database-setup","text":"MySQL/MariaDB - Setting up with MySQL or MariaDB PostgreSQL - Setting up with PostgreSQL SQLite - Setting up with SQLite Choose the installation method that best fits your environment and requirements.","title":"Database Setup"},{"location":"installation/centos/","text":"CentOS/RHEL Installation This guide will help you install Poweradmin on CentOS, RHEL, and other RHEL-based distributions like Rocky Linux or AlmaLinux. Prerequisites Ensure you have the following PHP extensions installed: dnf install -y php php-intl php-gettext php-pdo php-fpm Database Support Install the appropriate PHP database driver based on your preferred database: # For MySQL/MariaDB dnf install -y php-mysqlnd # For PostgreSQL dnf install -y php-pgsql # For SQLite (if available in your repositories) dnf install -y php-sqlite3 Web Server Configuration Apache Install Apache if not already installed: bash dnf install -y httpd Enable and start the Apache service: bash systemctl enable httpd systemctl start httpd Configure SELinux if it's enabled: ```bash # Allow Apache to connect to the database setsebool -P httpd_can_network_connect_db 1 # If using a non-standard directory, set the correct context semanage fcontext -a -t httpd_sys_content_t \"/path/to/poweradmin(/.*)?\" restorecon -Rv /path/to/poweradmin ``` Configure your firewall: bash firewall-cmd --permanent --add-service=http firewall-cmd --permanent --add-service=https # If using HTTPS firewall-cmd --reload Nginx Configuration If you prefer Nginx: Install Nginx: bash dnf install -y nginx Create a configuration file for Poweradmin: server { listen 80; server_name localhost; # Replace with your domain root /var/www/html; # Path to Poweradmin files index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { fastcgi_pass unix:/var/run/php-fpm/www.sock; # RHEL/CentOS path fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; fastcgi_index index.php; } # Deny access to .htaccess and .htpasswd files for security reasons location ~ /\\.ht { deny all; } } Save this file to /etc/nginx/conf.d/poweradmin.conf Enable and start Nginx and PHP-FPM: bash systemctl enable nginx php-fpm systemctl start nginx php-fpm Configure SELinux and firewall as with Apache. Installing Poweradmin Obtain Poweradmin Source Code Download the latest release (v3.9.2) from GitHub Releases : curl -Lo v3.9.2.zip https://github.com/poweradmin/poweradmin/archive/refs/tags/v3.9.2.zip unzip v3.9.2.zip If you don't have curl or unzip installed: dnf install -y curl unzip Deploy to Web Server Move the Poweradmin files to your web server's document root: # For Apache (default directory) cp -r poweradmin-3.9.2/* /var/www/html/ chown -R apache:apache /var/www/html/ # For Nginx (if using a different directory) cp -r poweradmin-3.9.2/* /usr/share/nginx/html/ chown -R nginx:nginx /usr/share/nginx/html/ Complete the Installation Visit http://your-server/install/ in your browser Follow the installation steps Once installation is complete, remove the install directory for security Log in with the admin username and password created during installation Troubleshooting If you encounter issues: Check PHP error logs: /var/log/php-fpm/www-error.log Check web server logs: /var/log/httpd/error_log or /var/log/nginx/error.log Ensure SELinux permissions are properly set if SELinux is enabled Verify all required PHP extensions are installed and enabled Check that file permissions are correct for your web server user","title":"CentOS/RHEL"},{"location":"installation/centos/#centosrhel-installation","text":"This guide will help you install Poweradmin on CentOS, RHEL, and other RHEL-based distributions like Rocky Linux or AlmaLinux.","title":"CentOS/RHEL Installation"},{"location":"installation/centos/#prerequisites","text":"Ensure you have the following PHP extensions installed: dnf install -y php php-intl php-gettext php-pdo php-fpm","title":"Prerequisites"},{"location":"installation/centos/#database-support","text":"Install the appropriate PHP database driver based on your preferred database: # For MySQL/MariaDB dnf install -y php-mysqlnd # For PostgreSQL dnf install -y php-pgsql # For SQLite (if available in your repositories) dnf install -y php-sqlite3","title":"Database Support"},{"location":"installation/centos/#web-server-configuration","text":"","title":"Web Server Configuration"},{"location":"installation/centos/#apache","text":"Install Apache if not already installed: bash dnf install -y httpd Enable and start the Apache service: bash systemctl enable httpd systemctl start httpd Configure SELinux if it's enabled: ```bash # Allow Apache to connect to the database setsebool -P httpd_can_network_connect_db 1 # If using a non-standard directory, set the correct context semanage fcontext -a -t httpd_sys_content_t \"/path/to/poweradmin(/.*)?\" restorecon -Rv /path/to/poweradmin ``` Configure your firewall: bash firewall-cmd --permanent --add-service=http firewall-cmd --permanent --add-service=https # If using HTTPS firewall-cmd --reload","title":"Apache"},{"location":"installation/centos/#nginx-configuration","text":"If you prefer Nginx: Install Nginx: bash dnf install -y nginx Create a configuration file for Poweradmin: server { listen 80; server_name localhost; # Replace with your domain root /var/www/html; # Path to Poweradmin files index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { fastcgi_pass unix:/var/run/php-fpm/www.sock; # RHEL/CentOS path fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; fastcgi_index index.php; } # Deny access to .htaccess and .htpasswd files for security reasons location ~ /\\.ht { deny all; } } Save this file to /etc/nginx/conf.d/poweradmin.conf Enable and start Nginx and PHP-FPM: bash systemctl enable nginx php-fpm systemctl start nginx php-fpm Configure SELinux and firewall as with Apache.","title":"Nginx Configuration"},{"location":"installation/centos/#installing-poweradmin","text":"","title":"Installing Poweradmin"},{"location":"installation/centos/#obtain-poweradmin-source-code","text":"Download the latest release (v3.9.2) from GitHub Releases : curl -Lo v3.9.2.zip https://github.com/poweradmin/poweradmin/archive/refs/tags/v3.9.2.zip unzip v3.9.2.zip If you don't have curl or unzip installed: dnf install -y curl unzip","title":"Obtain Poweradmin Source Code"},{"location":"installation/centos/#deploy-to-web-server","text":"Move the Poweradmin files to your web server's document root: # For Apache (default directory) cp -r poweradmin-3.9.2/* /var/www/html/ chown -R apache:apache /var/www/html/ # For Nginx (if using a different directory) cp -r poweradmin-3.9.2/* /usr/share/nginx/html/ chown -R nginx:nginx /usr/share/nginx/html/","title":"Deploy to Web Server"},{"location":"installation/centos/#complete-the-installation","text":"Visit http://your-server/install/ in your browser Follow the installation steps Once installation is complete, remove the install directory for security Log in with the admin username and password created during installation","title":"Complete the Installation"},{"location":"installation/centos/#troubleshooting","text":"If you encounter issues: Check PHP error logs: /var/log/php-fpm/www-error.log Check web server logs: /var/log/httpd/error_log or /var/log/nginx/error.log Ensure SELinux permissions are properly set if SELinux is enabled Verify all required PHP extensions are installed and enabled Check that file permissions are correct for your web server user","title":"Troubleshooting"},{"location":"installation/composer/","text":"Installation (Composer) Note: This is an alternative way to install and update Poweradmin using Composer. Prerequisites PHP 8.1 or higher Composer installed on your system Required PHP extensions: pdo, pdo_mysql/pdo_pgsql/pdo_sqlite See System Requirements for detailed requirements. Installing Poweradmin To install the latest stable version of Poweradmin, you can use the following Composer command: composer create-project --no-dev poweradmin/poweradmin This command will create a poweradmin folder in the current directory, download, and set up Poweradmin without development dependencies. After running the Composer command, you need to create a simple configuration file at inc/config.inc.php with basic database settings. Directory Structure After installation, you should have the following structure: poweradmin/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 inc/ \u2502 \u2514\u2500\u2500 config.inc.php \u251c\u2500\u2500 lib/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 vendor/ \u251c\u2500\u2500 composer.json \u2514\u2500\u2500 composer.lock Basic Configuration Here is an example of what the inc/config.inc.php file should look like: <?php // Database settings $db_host = 'localhost'; $db_name = 'your_db_name'; $db_user = 'your_db_user'; $db_pass = 'your_db_password'; $db_type = 'mysql'; // or 'pgsql' See Basic Configuration for all available options. SQLite Database Settings If you are using SQLite, uncomment the following lines in the inc/config.inc.php file: // Database settings for SQLite $db_type = 'sqlite'; $db_file = '/path/to/your/sqlite.db'; Important: Ensure proper file permissions and directory location for the SQLite database file. Updating Poweradmin If you installed Poweradmin using composer create-project --no-dev poweradmin/poweradmin , here's how to update it later: Navigate to your project directory in the terminal: cd /path/to/poweradmin If you want to update to a newer version of the Poweradmin package itself, you'll need to modify the version constraint in your composer.json file, then run the update command. For specifically updating just the Poweradmin package: composer update poweradmin/poweradmin --no-dev If the project has specific update instructions, check the documentation or GitHub repository for any additional steps that might be required (such as database migrations). The --no-dev flag ensures that development dependencies aren't installed, keeping your production environment clean, just like when you initially installed the project. Post-Installation Steps Set up the database schema (see MySQL/MariaDB , PostgreSQL , or SQLite setup) Configure web server permissions Set up initial admin user Configure PowerDNS connection Troubleshooting For common installation issues and solutions, see Common Issues .","title":"Composer"},{"location":"installation/composer/#installation-composer","text":"Note: This is an alternative way to install and update Poweradmin using Composer.","title":"Installation (Composer)"},{"location":"installation/composer/#prerequisites","text":"PHP 8.1 or higher Composer installed on your system Required PHP extensions: pdo, pdo_mysql/pdo_pgsql/pdo_sqlite See System Requirements for detailed requirements.","title":"Prerequisites"},{"location":"installation/composer/#installing-poweradmin","text":"To install the latest stable version of Poweradmin, you can use the following Composer command: composer create-project --no-dev poweradmin/poweradmin This command will create a poweradmin folder in the current directory, download, and set up Poweradmin without development dependencies. After running the Composer command, you need to create a simple configuration file at inc/config.inc.php with basic database settings.","title":"Installing Poweradmin"},{"location":"installation/composer/#directory-structure","text":"After installation, you should have the following structure: poweradmin/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 inc/ \u2502 \u2514\u2500\u2500 config.inc.php \u251c\u2500\u2500 lib/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 vendor/ \u251c\u2500\u2500 composer.json \u2514\u2500\u2500 composer.lock","title":"Directory Structure"},{"location":"installation/composer/#basic-configuration","text":"Here is an example of what the inc/config.inc.php file should look like: <?php // Database settings $db_host = 'localhost'; $db_name = 'your_db_name'; $db_user = 'your_db_user'; $db_pass = 'your_db_password'; $db_type = 'mysql'; // or 'pgsql' See Basic Configuration for all available options.","title":"Basic Configuration"},{"location":"installation/composer/#sqlite-database-settings","text":"If you are using SQLite, uncomment the following lines in the inc/config.inc.php file: // Database settings for SQLite $db_type = 'sqlite'; $db_file = '/path/to/your/sqlite.db'; Important: Ensure proper file permissions and directory location for the SQLite database file.","title":"SQLite Database Settings"},{"location":"installation/composer/#updating-poweradmin","text":"If you installed Poweradmin using composer create-project --no-dev poweradmin/poweradmin , here's how to update it later: Navigate to your project directory in the terminal: cd /path/to/poweradmin If you want to update to a newer version of the Poweradmin package itself, you'll need to modify the version constraint in your composer.json file, then run the update command. For specifically updating just the Poweradmin package: composer update poweradmin/poweradmin --no-dev If the project has specific update instructions, check the documentation or GitHub repository for any additional steps that might be required (such as database migrations). The --no-dev flag ensures that development dependencies aren't installed, keeping your production environment clean, just like when you initially installed the project.","title":"Updating Poweradmin"},{"location":"installation/composer/#post-installation-steps","text":"Set up the database schema (see MySQL/MariaDB , PostgreSQL , or SQLite setup) Configure web server permissions Set up initial admin user Configure PowerDNS connection","title":"Post-Installation Steps"},{"location":"installation/composer/#troubleshooting","text":"For common installation issues and solutions, see Common Issues .","title":"Troubleshooting"},{"location":"installation/debian/","text":"Debian Installation This guide will help you install Poweradmin on Debian systems (Debian 12 or later recommended). Prerequisites Ensure you have the following PHP extensions installed: apt install php php-intl php-php-gettext php-tokenizer php-fpm Database Support Install the appropriate PHP database driver based on your preferred database: # For MySQL/MariaDB apt install php-mysql # For PostgreSQL apt install php-pgsql # For SQLite apt install php-sqlite3 Note: php-fpm is required only if you plan to use Nginx or choose not to use mod_php with Apache. Web Server Configuration Apache (Default on Debian) Apache is usually pre-installed and configured on Debian systems. You'll need to: Enable the required Apache modules: bash a2enmod rewrite Either place Poweradmin in the default webroot ( /var/www/html/ ) or create a virtual host configuration. Nginx Configuration If you prefer Nginx, create a configuration file like this: server { listen 80; server_name localhost; # Replace with your domain root /var/www/html; # Path to Poweradmin files index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/var/run/php/php-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } # Deny access to .htaccess and .htpasswd files for security reasons location ~ /\\.ht { deny all; } } Save this configuration to /etc/nginx/sites-available/poweradmin and enable it: ln -s /etc/nginx/sites-available/poweradmin /etc/nginx/sites-enabled/ nginx -t # Test the configuration systemctl reload nginx Installing Poweradmin Obtain Poweradmin Source Code Download the latest release (v3.9.2) from GitHub Releases : wget https://github.com/poweradmin/poweradmin/archive/refs/tags/v3.9.2.zip unzip v3.9.2.zip Or download directly from your browser and transfer the files to your server. Deploy to Web Server Move the Poweradmin files to your web server's document root: cp -r poweradmin-3.9.2/* /var/www/html/ chown -R www-data:www-data /var/www/html/ Complete the Installation Visit http://your-server/install/ in your browser Follow the installation steps Once installation is complete, remove the install directory for security Log in with the admin username and password created during installation Troubleshooting If you encounter issues: Check PHP error logs: /var/log/apache2/error.log or /var/log/nginx/error.log Ensure all required PHP extensions are installed and enabled Verify file permissions are set correctly for your web server user","title":"Debian"},{"location":"installation/debian/#debian-installation","text":"This guide will help you install Poweradmin on Debian systems (Debian 12 or later recommended).","title":"Debian Installation"},{"location":"installation/debian/#prerequisites","text":"Ensure you have the following PHP extensions installed: apt install php php-intl php-php-gettext php-tokenizer php-fpm","title":"Prerequisites"},{"location":"installation/debian/#database-support","text":"Install the appropriate PHP database driver based on your preferred database: # For MySQL/MariaDB apt install php-mysql # For PostgreSQL apt install php-pgsql # For SQLite apt install php-sqlite3 Note: php-fpm is required only if you plan to use Nginx or choose not to use mod_php with Apache.","title":"Database Support"},{"location":"installation/debian/#web-server-configuration","text":"","title":"Web Server Configuration"},{"location":"installation/debian/#apache-default-on-debian","text":"Apache is usually pre-installed and configured on Debian systems. You'll need to: Enable the required Apache modules: bash a2enmod rewrite Either place Poweradmin in the default webroot ( /var/www/html/ ) or create a virtual host configuration.","title":"Apache (Default on Debian)"},{"location":"installation/debian/#nginx-configuration","text":"If you prefer Nginx, create a configuration file like this: server { listen 80; server_name localhost; # Replace with your domain root /var/www/html; # Path to Poweradmin files index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/var/run/php/php-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } # Deny access to .htaccess and .htpasswd files for security reasons location ~ /\\.ht { deny all; } } Save this configuration to /etc/nginx/sites-available/poweradmin and enable it: ln -s /etc/nginx/sites-available/poweradmin /etc/nginx/sites-enabled/ nginx -t # Test the configuration systemctl reload nginx","title":"Nginx Configuration"},{"location":"installation/debian/#installing-poweradmin","text":"","title":"Installing Poweradmin"},{"location":"installation/debian/#obtain-poweradmin-source-code","text":"Download the latest release (v3.9.2) from GitHub Releases : wget https://github.com/poweradmin/poweradmin/archive/refs/tags/v3.9.2.zip unzip v3.9.2.zip Or download directly from your browser and transfer the files to your server.","title":"Obtain Poweradmin Source Code"},{"location":"installation/debian/#deploy-to-web-server","text":"Move the Poweradmin files to your web server's document root: cp -r poweradmin-3.9.2/* /var/www/html/ chown -R www-data:www-data /var/www/html/","title":"Deploy to Web Server"},{"location":"installation/debian/#complete-the-installation","text":"Visit http://your-server/install/ in your browser Follow the installation steps Once installation is complete, remove the install directory for security Log in with the admin username and password created during installation","title":"Complete the Installation"},{"location":"installation/debian/#troubleshooting","text":"If you encounter issues: Check PHP error logs: /var/log/apache2/error.log or /var/log/nginx/error.log Ensure all required PHP extensions are installed and enabled Verify file permissions are set correctly for your web server user","title":"Troubleshooting"},{"location":"installation/manual/","text":"Manual Installation This page describes the manual installation procedure for Poweradmin. While using the installer is recommended for most users, manual installation can be useful for automated deployments or advanced users. Prerequisites Verify that your setup meets the application requirements. For detailed requirements, including PHP version, required extensions, and supported databases, see System Requirements . Installation Steps 1. Prepare the Environment Unpack the Poweradmin archive in a location accessible via your web server. Ensure unpacked files are readable by the user that your web server/PHP runs as. 2. Create Database User Create a database user with SELECT, INSERT, UPDATE, DELETE rights on your PowerDNS database: For MySQL/MariaDB: CREATE USER 'poweradmin'@'localhost' IDENTIFIED BY 'secure_password'; GRANT SELECT, INSERT, UPDATE, DELETE ON powerdns.* TO 'poweradmin'@'localhost'; FLUSH PRIVILEGES; For PostgreSQL: CREATE USER poweradmin WITH PASSWORD 'secure_password'; GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO poweradmin; 3. Import Database Structure Import the Poweradmin database structure: For MySQL/MariaDB: mysql -u root -p powerdns < sql/poweradmin-mysql-db-structure.sql For PostgreSQL: psql -U postgres -d powerdns -f sql/poweradmin-pgsql-db-structure.sql For SQLite: sqlite3 /path/to/your/powerdns.db < sql/poweradmin-sqlite-db-structure.sql !!! danger \"Default Credentials\" The default login credentials are: * Username: `admin` * Password: `admin` You **must** change these credentials immediately after your first login for security reasons. 4. Create Configuration File Create a config/settings.php file using the template below. A full list of configuration options can be found in config/settings.defaults.php . <?php /** * Poweradmin Custom Settings Configuration File */ return [ /** * Database Settings */ 'database' => [ 'host' => 'localhost', 'user' => 'poweradmin', // Database user created in step 2 'password' => 'secure_password', 'name' => 'powerdns', // PowerDNS database name 'type' => 'mysql', // Options: 'mysql', 'pgsql', 'sqlite' // 'file' => '', // Only for SQLite, provide full path to database file ], /** * Security Settings */ 'security' => [ 'session_key' => 'generate_a_random_string_here', // IMPORTANT: Change this! ], /** * DNS Settings */ 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', ], ]; For detailed configuration options, see Basic Configuration and Database Configuration . 5. Secure the Installation Set appropriate permissions on configuration files Remove the install directory after installation Change the default admin password immediately after first login 6. Optional: Migrating from Legacy Configuration If you're upgrading from an older version of Poweradmin, you can migrate your legacy configuration: php scripts/migrate-config.php This will convert your old inc/config.inc.php settings to the new config/settings.php format. Post-Installation Steps Configure web server permissions Set up proper DNS settings (see DNS Settings ) Configure additional features as needed: LDAP Integration PowerDNS API DNSSEC Troubleshooting For common installation issues and solutions, see Common Issues . `","title":"Manual Installation"},{"location":"installation/manual/#manual-installation","text":"This page describes the manual installation procedure for Poweradmin. While using the installer is recommended for most users, manual installation can be useful for automated deployments or advanced users.","title":"Manual Installation"},{"location":"installation/manual/#prerequisites","text":"Verify that your setup meets the application requirements. For detailed requirements, including PHP version, required extensions, and supported databases, see System Requirements .","title":"Prerequisites"},{"location":"installation/manual/#installation-steps","text":"","title":"Installation Steps"},{"location":"installation/manual/#1-prepare-the-environment","text":"Unpack the Poweradmin archive in a location accessible via your web server. Ensure unpacked files are readable by the user that your web server/PHP runs as.","title":"1. Prepare the Environment"},{"location":"installation/manual/#2-create-database-user","text":"Create a database user with SELECT, INSERT, UPDATE, DELETE rights on your PowerDNS database:","title":"2. Create Database User"},{"location":"installation/manual/#for-mysqlmariadb","text":"CREATE USER 'poweradmin'@'localhost' IDENTIFIED BY 'secure_password'; GRANT SELECT, INSERT, UPDATE, DELETE ON powerdns.* TO 'poweradmin'@'localhost'; FLUSH PRIVILEGES;","title":"For MySQL/MariaDB:"},{"location":"installation/manual/#for-postgresql","text":"CREATE USER poweradmin WITH PASSWORD 'secure_password'; GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO poweradmin;","title":"For PostgreSQL:"},{"location":"installation/manual/#3-import-database-structure","text":"Import the Poweradmin database structure:","title":"3. Import Database Structure"},{"location":"installation/manual/#for-mysqlmariadb_1","text":"mysql -u root -p powerdns < sql/poweradmin-mysql-db-structure.sql","title":"For MySQL/MariaDB:"},{"location":"installation/manual/#for-postgresql_1","text":"psql -U postgres -d powerdns -f sql/poweradmin-pgsql-db-structure.sql","title":"For PostgreSQL:"},{"location":"installation/manual/#for-sqlite","text":"sqlite3 /path/to/your/powerdns.db < sql/poweradmin-sqlite-db-structure.sql !!! danger \"Default Credentials\" The default login credentials are: * Username: `admin` * Password: `admin` You **must** change these credentials immediately after your first login for security reasons.","title":"For SQLite:"},{"location":"installation/manual/#4-create-configuration-file","text":"Create a config/settings.php file using the template below. A full list of configuration options can be found in config/settings.defaults.php . <?php /** * Poweradmin Custom Settings Configuration File */ return [ /** * Database Settings */ 'database' => [ 'host' => 'localhost', 'user' => 'poweradmin', // Database user created in step 2 'password' => 'secure_password', 'name' => 'powerdns', // PowerDNS database name 'type' => 'mysql', // Options: 'mysql', 'pgsql', 'sqlite' // 'file' => '', // Only for SQLite, provide full path to database file ], /** * Security Settings */ 'security' => [ 'session_key' => 'generate_a_random_string_here', // IMPORTANT: Change this! ], /** * DNS Settings */ 'dns' => [ 'hostmaster' => 'hostmaster.example.com', 'ns1' => 'ns1.example.com', 'ns2' => 'ns2.example.com', ], ]; For detailed configuration options, see Basic Configuration and Database Configuration .","title":"4. Create Configuration File"},{"location":"installation/manual/#5-secure-the-installation","text":"Set appropriate permissions on configuration files Remove the install directory after installation Change the default admin password immediately after first login","title":"5. Secure the Installation"},{"location":"installation/manual/#6-optional-migrating-from-legacy-configuration","text":"If you're upgrading from an older version of Poweradmin, you can migrate your legacy configuration: php scripts/migrate-config.php This will convert your old inc/config.inc.php settings to the new config/settings.php format.","title":"6. Optional: Migrating from Legacy Configuration"},{"location":"installation/manual/#post-installation-steps","text":"Configure web server permissions Set up proper DNS settings (see DNS Settings ) Configure additional features as needed: LDAP Integration PowerDNS API DNSSEC","title":"Post-Installation Steps"},{"location":"installation/manual/#troubleshooting","text":"For common installation issues and solutions, see Common Issues . `","title":"Troubleshooting"},{"location":"installation/ubuntu/","text":"Ubuntu Installation This guide will help you install Poweradmin on Ubuntu systems. Prerequisites Ensure you have the following PHP extensions installed: apt install php php-intl php-php-gettext php-tokenizer php-fpm Database Support Install the appropriate PHP database driver based on your preferred database: # For MySQL/MariaDB apt install php-mysql # For PostgreSQL apt install php-pgsql # For SQLite apt install php-sqlite3 Note: php-fpm is required only if you plan to use Nginx or choose not to use mod_php with Apache. Web Server Configuration Apache (Default on Ubuntu) Apache is usually pre-installed and configured on Ubuntu systems. You'll need to: Enable the required Apache modules: bash a2enmod rewrite Either place Poweradmin in the default webroot ( /var/www/html/ ) or create a virtual host configuration. Nginx Configuration If you prefer Nginx, first install it: apt install nginx Then create a configuration file like this: server { listen 80; server_name localhost; # Replace with your domain root /var/www/html; # Path to Poweradmin files index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/var/run/php/php-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } # Deny access to .htaccess and .htpasswd files for security reasons location ~ /\\.ht { deny all; } } Save this configuration to /etc/nginx/sites-available/poweradmin and enable it: ln -s /etc/nginx/sites-available/poweradmin /etc/nginx/sites-enabled/ nginx -t # Test the configuration systemctl reload nginx Installing Poweradmin Obtain Poweradmin Source Code Download the latest release (v3.9.2) from GitHub Releases : wget https://github.com/poweradmin/poweradmin/archive/refs/tags/v3.9.2.zip unzip v3.9.2.zip Or download directly from your browser and transfer the files to your server. Deploy to Web Server Move the Poweradmin files to your web server's document root: cp -r poweradmin-3.9.2/* /var/www/html/ chown -R www-data:www-data /var/www/html/ Note: You can safely remove the default index.html (or derivative) if it exists. Complete the Installation Visit http://your-server/install/ in your browser Follow the installation steps Once installation is complete, remove the install directory for security Log in with the admin username and password created during installation Troubleshooting If you encounter issues: Check PHP error logs: /var/log/apache2/error.log or /var/log/nginx/error.log Ensure all required PHP extensions are installed and enabled Verify file permissions are set correctly for your web server user","title":"Ubuntu"},{"location":"installation/ubuntu/#ubuntu-installation","text":"This guide will help you install Poweradmin on Ubuntu systems.","title":"Ubuntu Installation"},{"location":"installation/ubuntu/#prerequisites","text":"Ensure you have the following PHP extensions installed: apt install php php-intl php-php-gettext php-tokenizer php-fpm","title":"Prerequisites"},{"location":"installation/ubuntu/#database-support","text":"Install the appropriate PHP database driver based on your preferred database: # For MySQL/MariaDB apt install php-mysql # For PostgreSQL apt install php-pgsql # For SQLite apt install php-sqlite3 Note: php-fpm is required only if you plan to use Nginx or choose not to use mod_php with Apache.","title":"Database Support"},{"location":"installation/ubuntu/#web-server-configuration","text":"","title":"Web Server Configuration"},{"location":"installation/ubuntu/#apache-default-on-ubuntu","text":"Apache is usually pre-installed and configured on Ubuntu systems. You'll need to: Enable the required Apache modules: bash a2enmod rewrite Either place Poweradmin in the default webroot ( /var/www/html/ ) or create a virtual host configuration.","title":"Apache (Default on Ubuntu)"},{"location":"installation/ubuntu/#nginx-configuration","text":"If you prefer Nginx, first install it: apt install nginx Then create a configuration file like this: server { listen 80; server_name localhost; # Replace with your domain root /var/www/html; # Path to Poweradmin files index index.php index.html index.htm; location / { try_files $uri $uri/ /index.php?$args; } location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/var/run/php/php-fpm.sock; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } # Deny access to .htaccess and .htpasswd files for security reasons location ~ /\\.ht { deny all; } } Save this configuration to /etc/nginx/sites-available/poweradmin and enable it: ln -s /etc/nginx/sites-available/poweradmin /etc/nginx/sites-enabled/ nginx -t # Test the configuration systemctl reload nginx","title":"Nginx Configuration"},{"location":"installation/ubuntu/#installing-poweradmin","text":"","title":"Installing Poweradmin"},{"location":"installation/ubuntu/#obtain-poweradmin-source-code","text":"Download the latest release (v3.9.2) from GitHub Releases : wget https://github.com/poweradmin/poweradmin/archive/refs/tags/v3.9.2.zip unzip v3.9.2.zip Or download directly from your browser and transfer the files to your server.","title":"Obtain Poweradmin Source Code"},{"location":"installation/ubuntu/#deploy-to-web-server","text":"Move the Poweradmin files to your web server's document root: cp -r poweradmin-3.9.2/* /var/www/html/ chown -R www-data:www-data /var/www/html/ Note: You can safely remove the default index.html (or derivative) if it exists.","title":"Deploy to Web Server"},{"location":"installation/ubuntu/#complete-the-installation","text":"Visit http://your-server/install/ in your browser Follow the installation steps Once installation is complete, remove the install directory for security Log in with the admin username and password created during installation","title":"Complete the Installation"},{"location":"installation/ubuntu/#troubleshooting","text":"If you encounter issues: Check PHP error logs: /var/log/apache2/error.log or /var/log/nginx/error.log Ensure all required PHP extensions are installed and enabled Verify file permissions are set correctly for your web server user","title":"Troubleshooting"},{"location":"maintenance/","text":"Maintenance Guide This section provides guidance on maintaining your PowerAdmin installation and ensuring its long-term performance and security. Regular Maintenance Tasks Database Maintenance Regular database maintenance helps keep your PowerAdmin installation running smoothly: MySQL/MariaDB -- Optimize tables to reclaim space and improve performance OPTIMIZE TABLE users; OPTIMIZE TABLE zones; OPTIMIZE TABLE records; OPTIMIZE TABLE domains; OPTIMIZE TABLE supermasters; OPTIMIZE TABLE domainmetadata; -- Analyze tables to update statistics for the query optimizer ANALYZE TABLE users; ANALYZE TABLE zones; ANALYZE TABLE records; ANALYZE TABLE domains; ANALYZE TABLE supermasters; ANALYZE TABLE domainmetadata; PostgreSQL -- Update statistics VACUUM ANALYZE users; VACUUM ANALYZE zones; VACUUM ANALYZE records; VACUUM ANALYZE domains; VACUUM ANALYZE supermasters; VACUUM ANALYZE domainmetadata; SQLite -- Rebuild the database to optimize performance VACUUM; Log Management To prevent logs from consuming excessive disk space: Database Logs : Implement a log rotation strategy for PowerAdmin's database logs: sql -- Example log cleanup (retain only the last 90 days) DELETE FROM log_users WHERE created < DATE_SUB(NOW(), INTERVAL 90 DAY); DELETE FROM log_zones WHERE created < DATE_SUB(NOW(), INTERVAL 90 DAY); System Logs : Configure log rotation for your web server and PHP logs: # Example logrotate configuration (/etc/logrotate.d/poweradmin) /var/log/apache2/poweradmin-*.log { rotate 14 daily compress delaycompress missingok notifempty create 640 www-data adm } Backup Procedures Database Backup Regular database backups are essential: # MySQL/MariaDB backup mysqldump -u username -p --opt powerdns > powerdns_$(date +%Y%m%d).sql # PostgreSQL backup pg_dump -U username powerdns > powerdns_$(date +%Y%m%d).sql # SQLite backup sqlite3 poweradmin.sqlite .dump > poweradmin_$(date +%Y%m%d).sql Configuration Backup Back up your PowerAdmin configuration files: # Create a compressed archive of configuration files tar -czf poweradmin_config_$(date +%Y%m%d).tar.gz /path/to/poweradmin/inc/config.inc.php /path/to/poweradmin/config/ Security Updates PowerAdmin Updates : Regularly check for and apply updates to PowerAdmin Dependency Updates : Keep PHP, web server, and other components updated Security Scans : Periodically scan for vulnerabilities using tools like OWASP ZAP Monitoring Performance Monitoring Monitor system resource usage: Database Query Performance : Enable slow query logging temporarily to identify performance bottlenecks Web Server Performance : Monitor response times and resource utilization Disk Space : Set up alerts for low disk space conditions Error Monitoring Regularly check error logs for issues: # Check PowerAdmin-related PHP errors grep -i \"poweradmin\" /var/log/php/error.log # Check web server errors grep -i \"poweradmin\" /var/log/apache2/error.log Routine Checks Establish a routine maintenance schedule: Daily : Check for errors in logs Weekly : Monitor database size and performance Monthly : Run database optimization, prune old logs Quarterly : Test backups by performing a restore Bi-annually : Review user accounts and permissions Disaster Recovery Prepare for potential system failures: Recovery Plan : Document step-by-step recovery procedures Test Restores : Regularly test your backup and restore procedures Alternate Access : Ensure DNS records can be managed directly via PowerDNS if PowerAdmin becomes unavailable For more detailed guidance on specific maintenance tasks, refer to the other sections in this documentation.","title":"Overview"},{"location":"maintenance/#maintenance-guide","text":"This section provides guidance on maintaining your PowerAdmin installation and ensuring its long-term performance and security.","title":"Maintenance Guide"},{"location":"maintenance/#regular-maintenance-tasks","text":"","title":"Regular Maintenance Tasks"},{"location":"maintenance/#database-maintenance","text":"Regular database maintenance helps keep your PowerAdmin installation running smoothly:","title":"Database Maintenance"},{"location":"maintenance/#mysqlmariadb","text":"-- Optimize tables to reclaim space and improve performance OPTIMIZE TABLE users; OPTIMIZE TABLE zones; OPTIMIZE TABLE records; OPTIMIZE TABLE domains; OPTIMIZE TABLE supermasters; OPTIMIZE TABLE domainmetadata; -- Analyze tables to update statistics for the query optimizer ANALYZE TABLE users; ANALYZE TABLE zones; ANALYZE TABLE records; ANALYZE TABLE domains; ANALYZE TABLE supermasters; ANALYZE TABLE domainmetadata;","title":"MySQL/MariaDB"},{"location":"maintenance/#postgresql","text":"-- Update statistics VACUUM ANALYZE users; VACUUM ANALYZE zones; VACUUM ANALYZE records; VACUUM ANALYZE domains; VACUUM ANALYZE supermasters; VACUUM ANALYZE domainmetadata;","title":"PostgreSQL"},{"location":"maintenance/#sqlite","text":"-- Rebuild the database to optimize performance VACUUM;","title":"SQLite"},{"location":"maintenance/#log-management","text":"To prevent logs from consuming excessive disk space: Database Logs : Implement a log rotation strategy for PowerAdmin's database logs: sql -- Example log cleanup (retain only the last 90 days) DELETE FROM log_users WHERE created < DATE_SUB(NOW(), INTERVAL 90 DAY); DELETE FROM log_zones WHERE created < DATE_SUB(NOW(), INTERVAL 90 DAY); System Logs : Configure log rotation for your web server and PHP logs: # Example logrotate configuration (/etc/logrotate.d/poweradmin) /var/log/apache2/poweradmin-*.log { rotate 14 daily compress delaycompress missingok notifempty create 640 www-data adm }","title":"Log Management"},{"location":"maintenance/#backup-procedures","text":"","title":"Backup Procedures"},{"location":"maintenance/#database-backup","text":"Regular database backups are essential: # MySQL/MariaDB backup mysqldump -u username -p --opt powerdns > powerdns_$(date +%Y%m%d).sql # PostgreSQL backup pg_dump -U username powerdns > powerdns_$(date +%Y%m%d).sql # SQLite backup sqlite3 poweradmin.sqlite .dump > poweradmin_$(date +%Y%m%d).sql","title":"Database Backup"},{"location":"maintenance/#configuration-backup","text":"Back up your PowerAdmin configuration files: # Create a compressed archive of configuration files tar -czf poweradmin_config_$(date +%Y%m%d).tar.gz /path/to/poweradmin/inc/config.inc.php /path/to/poweradmin/config/","title":"Configuration Backup"},{"location":"maintenance/#security-updates","text":"PowerAdmin Updates : Regularly check for and apply updates to PowerAdmin Dependency Updates : Keep PHP, web server, and other components updated Security Scans : Periodically scan for vulnerabilities using tools like OWASP ZAP","title":"Security Updates"},{"location":"maintenance/#monitoring","text":"","title":"Monitoring"},{"location":"maintenance/#performance-monitoring","text":"Monitor system resource usage: Database Query Performance : Enable slow query logging temporarily to identify performance bottlenecks Web Server Performance : Monitor response times and resource utilization Disk Space : Set up alerts for low disk space conditions","title":"Performance Monitoring"},{"location":"maintenance/#error-monitoring","text":"Regularly check error logs for issues: # Check PowerAdmin-related PHP errors grep -i \"poweradmin\" /var/log/php/error.log # Check web server errors grep -i \"poweradmin\" /var/log/apache2/error.log","title":"Error Monitoring"},{"location":"maintenance/#routine-checks","text":"Establish a routine maintenance schedule: Daily : Check for errors in logs Weekly : Monitor database size and performance Monthly : Run database optimization, prune old logs Quarterly : Test backups by performing a restore Bi-annually : Review user accounts and permissions","title":"Routine Checks"},{"location":"maintenance/#disaster-recovery","text":"Prepare for potential system failures: Recovery Plan : Document step-by-step recovery procedures Test Restores : Regularly test your backup and restore procedures Alternate Access : Ensure DNS records can be managed directly via PowerDNS if PowerAdmin becomes unavailable For more detailed guidance on specific maintenance tasks, refer to the other sections in this documentation.","title":"Disaster Recovery"},{"location":"troubleshooting/debugging/","text":"Debugging Poweradmin To help diagnose issues, you can enable various debug settings in your Poweradmin configuration. Below are the available debug settings and how to enable them. Configuration Location Debugging settings should be added to your config/settings.php file. If you're still using the legacy configuration in inc/config.inc.php , consider migrating to the new configuration format using the provided script: php scripts/migrate-config.php Available Debug Settings 1. PHP Error Reporting To display PHP errors directly in the browser, add the following lines to your index.php or any other entry point file: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL); 2. Logger Settings Configure the logging settings in your config/settings.php : return [ // Other settings... 'logging' => [ 'type' => 'native', // Options: 'null', 'native' 'level' => 'debug', // Options: 'debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency' // Other logging settings... ], // Other settings... ]; These settings are primarily used for logging authentication issues and other system events. 3. Database Debugging Enable or disable database debugging to log detailed database operations and errors: return [ // Other settings... 'database' => [ // Other database settings... 'debug' => true, // Show all SQL queries ], // Other settings... ]; 4. DNSSEC Debugging Enable or disable DNSSEC debugging to log detailed DNSSEC operations and errors: return [ // Other settings... 'dnssec' => [ // Other DNSSEC settings... 'debug' => true, // Enable DNSSEC debug logging ], // Other settings... ]; 5. LDAP Debugging Enable or disable LDAP debugging to log detailed LDAP operations and errors: return [ // Other settings... 'ldap' => [ // Other LDAP settings... 'debug' => true, // Enable LDAP debug logging ], // Other settings... ]; Display Statistics To see memory usage and execution time at the bottom of each page, enable the display_stats option: return [ // Other settings... 'misc' => [ // Other miscellaneous settings... 'display_stats' => true, // Display memory usage and execution time ], // Other settings... ]; By enabling these settings, you can gain more insight into the application's behavior and troubleshoot issues more effectively.","title":"Debugging"},{"location":"troubleshooting/debugging/#debugging-poweradmin","text":"To help diagnose issues, you can enable various debug settings in your Poweradmin configuration. Below are the available debug settings and how to enable them.","title":"Debugging Poweradmin"},{"location":"troubleshooting/debugging/#configuration-location","text":"Debugging settings should be added to your config/settings.php file. If you're still using the legacy configuration in inc/config.inc.php , consider migrating to the new configuration format using the provided script: php scripts/migrate-config.php","title":"Configuration Location"},{"location":"troubleshooting/debugging/#available-debug-settings","text":"","title":"Available Debug Settings"},{"location":"troubleshooting/debugging/#1-php-error-reporting","text":"To display PHP errors directly in the browser, add the following lines to your index.php or any other entry point file: ini_set('display_errors', 1); ini_set('display_startup_errors', 1); error_reporting(E_ALL);","title":"1. PHP Error Reporting"},{"location":"troubleshooting/debugging/#2-logger-settings","text":"Configure the logging settings in your config/settings.php : return [ // Other settings... 'logging' => [ 'type' => 'native', // Options: 'null', 'native' 'level' => 'debug', // Options: 'debug', 'info', 'notice', 'warning', 'error', 'critical', 'alert', 'emergency' // Other logging settings... ], // Other settings... ]; These settings are primarily used for logging authentication issues and other system events.","title":"2. Logger Settings"},{"location":"troubleshooting/debugging/#3-database-debugging","text":"Enable or disable database debugging to log detailed database operations and errors: return [ // Other settings... 'database' => [ // Other database settings... 'debug' => true, // Show all SQL queries ], // Other settings... ];","title":"3. Database Debugging"},{"location":"troubleshooting/debugging/#4-dnssec-debugging","text":"Enable or disable DNSSEC debugging to log detailed DNSSEC operations and errors: return [ // Other settings... 'dnssec' => [ // Other DNSSEC settings... 'debug' => true, // Enable DNSSEC debug logging ], // Other settings... ];","title":"4. DNSSEC Debugging"},{"location":"troubleshooting/debugging/#5-ldap-debugging","text":"Enable or disable LDAP debugging to log detailed LDAP operations and errors: return [ // Other settings... 'ldap' => [ // Other LDAP settings... 'debug' => true, // Enable LDAP debug logging ], // Other settings... ];","title":"5. LDAP Debugging"},{"location":"troubleshooting/debugging/#display-statistics","text":"To see memory usage and execution time at the bottom of each page, enable the display_stats option: return [ // Other settings... 'misc' => [ // Other miscellaneous settings... 'display_stats' => true, // Display memory usage and execution time ], // Other settings... ]; By enabling these settings, you can gain more insight into the application's behavior and troubleshoot issues more effectively.","title":"Display Statistics"},{"location":"upgrading/","text":"Upgrading Poweradmin General Upgrade Instructions When upgrading Poweradmin from any version to a newer one, follow these general steps: Backup your database - This is critical before any upgrade Backup your existing files - Make a complete backup of your current installation Replace files - Replace all files with the new version's files Restore configuration - Depending on your version: For versions < 4.x: Restore inc/config.inc.php from your backup For versions \u2265 4.x: Restore config/settings.php from your backup Update database structure - If required by the specific version upgrade Test functionality - Verify all features work correctly after upgrade Important Considerations Always read the release notes for the version you're upgrading to and any intermediate versions Neglecting to follow proper upgrade procedures may result in a non-functioning installation It's recommended to perform upgrades in a test environment first before applying to production After upgrading, check the system for any warnings or errors Verify that zones and records remain accessible and editable Report any bugs or issues you encounter during the upgrade process Upgrade Path If you're upgrading across multiple major versions, it's often safest to upgrade incrementally through each major version rather than jumping directly to the latest version. Troubleshooting If you encounter issues during or after an upgrade: Check the PHP and web server error logs Verify database connectivity and permissions Ensure file permissions are set correctly Review the specific upgrade instructions for the version you're upgrading to","title":"Overview"},{"location":"upgrading/#upgrading-poweradmin","text":"","title":"Upgrading Poweradmin"},{"location":"upgrading/#general-upgrade-instructions","text":"When upgrading Poweradmin from any version to a newer one, follow these general steps: Backup your database - This is critical before any upgrade Backup your existing files - Make a complete backup of your current installation Replace files - Replace all files with the new version's files Restore configuration - Depending on your version: For versions < 4.x: Restore inc/config.inc.php from your backup For versions \u2265 4.x: Restore config/settings.php from your backup Update database structure - If required by the specific version upgrade Test functionality - Verify all features work correctly after upgrade","title":"General Upgrade Instructions"},{"location":"upgrading/#important-considerations","text":"Always read the release notes for the version you're upgrading to and any intermediate versions Neglecting to follow proper upgrade procedures may result in a non-functioning installation It's recommended to perform upgrades in a test environment first before applying to production After upgrading, check the system for any warnings or errors Verify that zones and records remain accessible and editable Report any bugs or issues you encounter during the upgrade process","title":"Important Considerations"},{"location":"upgrading/#upgrade-path","text":"If you're upgrading across multiple major versions, it's often safest to upgrade incrementally through each major version rather than jumping directly to the latest version.","title":"Upgrade Path"},{"location":"upgrading/#troubleshooting","text":"If you encounter issues during or after an upgrade: Check the PHP and web server error logs Verify database connectivity and permissions Ensure file permissions are set correctly Review the specific upgrade instructions for the version you're upgrading to","title":"Troubleshooting"},{"location":"upgrading/v2.1.4/","text":"Upgrading to v2.1.4 Overview Version 2.1.4 is a maintenance release focusing on security improvements and better handling of reverse DNS zones. Detailed upgrade instructions will be added later.","title":"v2.1.4"},{"location":"upgrading/v2.1.4/#upgrading-to-v214","text":"","title":"Upgrading to v2.1.4"},{"location":"upgrading/v2.1.4/#overview","text":"Version 2.1.4 is a maintenance release focusing on security improvements and better handling of reverse DNS zones. Detailed upgrade instructions will be added later.","title":"Overview"},{"location":"upgrading/v2.1.5/","text":"Upgrading to v2.1.5 Overview Version 2.1.5 adds improved LDAP integration and fixes several issues related to user management and zone permissions. Detailed upgrade instructions will be added later.","title":"v2.1.5"},{"location":"upgrading/v2.1.5/#upgrading-to-v215","text":"","title":"Upgrading to v2.1.5"},{"location":"upgrading/v2.1.5/#overview","text":"Version 2.1.5 adds improved LDAP integration and fixes several issues related to user management and zone permissions. Detailed upgrade instructions will be added later.","title":"Overview"},{"location":"upgrading/v2.1.6/","text":"Upgrading to v2.1.6 Overview Version 2.1.6 focuses on performance improvements and adds better support for record types and search functionality. Detailed upgrade instructions will be added later.","title":"v2.1.6"},{"location":"upgrading/v2.1.6/#upgrading-to-v216","text":"","title":"Upgrading to v2.1.6"},{"location":"upgrading/v2.1.6/#overview","text":"Version 2.1.6 focuses on performance improvements and adds better support for record types and search functionality. Detailed upgrade instructions will be added later.","title":"Overview"},{"location":"upgrading/v2.1.7/","text":"Upgrading to v2.1.7 Overview Version 2.1.7 introduces several bug fixes and usability improvements, particularly for zone management and DNSSEC handling. Detailed upgrade instructions will be added later.","title":"v2.1.7"},{"location":"upgrading/v2.1.7/#upgrading-to-v217","text":"","title":"Upgrading to v2.1.7"},{"location":"upgrading/v2.1.7/#overview","text":"Version 2.1.7 introduces several bug fixes and usability improvements, particularly for zone management and DNSSEC handling. Detailed upgrade instructions will be added later.","title":"Overview"},{"location":"upgrading/v2.1.8/","text":"Upgrading to v2.1.8 Overview Version 2.1.8 includes security improvements and minor bugfixes. This is a maintenance release that focuses on security enhancements and code quality improvements. Detailed upgrade instructions will be added later.","title":"v2.1.8"},{"location":"upgrading/v2.1.8/#upgrading-to-v218","text":"","title":"Upgrading to v2.1.8"},{"location":"upgrading/v2.1.8/#overview","text":"Version 2.1.8 includes security improvements and minor bugfixes. This is a maintenance release that focuses on security enhancements and code quality improvements. Detailed upgrade instructions will be added later.","title":"Overview"},{"location":"upgrading/v2.x.x/","text":"Upgrading to Poweradmin v2.x.x Overview Version 2.x.x represents a major update to the Poweradmin system with significant changes to the codebase, features, and requirements. Detailed upgrade instructions will be added later.","title":"v2.x.x"},{"location":"upgrading/v2.x.x/#upgrading-to-poweradmin-v2xx","text":"","title":"Upgrading to Poweradmin v2.x.x"},{"location":"upgrading/v2.x.x/#overview","text":"Version 2.x.x represents a major update to the Poweradmin system with significant changes to the codebase, features, and requirements. Detailed upgrade instructions will be added later.","title":"Overview"},{"location":"user-guide/permissions/","text":"User Permissions This document provides detailed explanations of all user permissions available in Poweradmin. For information about user roles and general permission concepts, see Users and Roles . Zone Permissions zone_master_add Allows the user to add a master zone User can create new authoritative DNS zones Required for creating zones from templates zone_slave_add Allows the user to add a slave zone User can create zones that pull data from a master server Requires specifying the IP address of the master server zone_content_view_own Allows the user to view the content of zones they own This includes viewing all records within the zone Basic permission needed for zone management zone_content_edit_own Allows the user to edit the content of zones they own This includes adding, modifying, and deleting records Essential for managing DNS records in owned zones zone_meta_edit_own Allows the user to add additional owners to their zone (if user_view_others is set to true) User can remove owners (including themselves) User cannot orphan a zone (at least one user must remain) User can change zone type (i.e. from native to slave) User can set IP of master server for slave zone User can change used zone template (requires zone_master_add and zone_content_edit_own permissions) zone_content_view_others Allows the user to view the content of zones owned by other users This is a read-only permission for zones the user doesn't own Useful for administrators or team environments zone_content_edit_others Allows the user to edit the content of zones owned by other users User can modify records in zones they don't own Powerful permission that should be granted cautiously zone_meta_edit_others Allows the user to edit the metadata of zones owned by other users Can change owners, zone types, and master server IPs for others' zones High-level permission typically reserved for administrators zone_content_edit_own_as_client Allows the user to edit record content in zones they own, except SOA and NS records Limited permission for users who should only modify certain record types Provides restricted zone management capabilities Search Permissions search Allows the user to perform searches across the system User can search for zones, records, and other elements Basic functionality for finding resources in larger deployments User Permissions user_view_others Allows the user to view information about other users Can see usernames and access levels of others Required for assigning zone ownership to other users user_edit_own Allows the user to edit their own user information User can change their password and other personal details Basic self-service permission user_edit_others Allows the user to edit information for other users Can modify other users' details and access rights High-level administrative permission user_add_new Allows the user to add new users to the system Can create accounts for others to access Poweradmin Administrative permission for expanding system access user_passwd_edit_others Allows the user to change passwords for other users Can reset passwords when users are locked out Administrative security management permission user_edit_templ_perm Allows the user to change the permission template assigned to users Can modify user access by applying different templates Streamlines permission management for administrators user_is_ueberuser Grants superuser status with full access to all functions User has unlimited privileges throughout Poweradmin Bypasses normal permission checks Should be granted very selectively Template Permissions templ_perm_add Allows the user to add new permission templates Templates define sets of permissions that can be assigned to users Streamlines user permission management templ_perm_edit Allows the user to edit existing permission templates Can modify permission sets used for multiple users Useful for maintaining consistent permission groups Supermaster Permissions supermaster_view Allows the user to view supermaster servers Can see the list of authoritative name servers Read-only access to supermaster configurations supermaster_add Allows the user to add new supermaster servers Can configure authoritative name servers for PowerDNS Advanced configuration permission supermaster_edit Allows the user to edit existing supermaster servers Can modify authoritative name server configurations Advanced permission for managing DNS infrastructure","title":"Permissions"},{"location":"user-guide/permissions/#user-permissions","text":"This document provides detailed explanations of all user permissions available in Poweradmin. For information about user roles and general permission concepts, see Users and Roles .","title":"User Permissions"},{"location":"user-guide/permissions/#zone-permissions","text":"","title":"Zone Permissions"},{"location":"user-guide/permissions/#zone_master_add","text":"Allows the user to add a master zone User can create new authoritative DNS zones Required for creating zones from templates","title":"zone_master_add"},{"location":"user-guide/permissions/#zone_slave_add","text":"Allows the user to add a slave zone User can create zones that pull data from a master server Requires specifying the IP address of the master server","title":"zone_slave_add"},{"location":"user-guide/permissions/#zone_content_view_own","text":"Allows the user to view the content of zones they own This includes viewing all records within the zone Basic permission needed for zone management","title":"zone_content_view_own"},{"location":"user-guide/permissions/#zone_content_edit_own","text":"Allows the user to edit the content of zones they own This includes adding, modifying, and deleting records Essential for managing DNS records in owned zones","title":"zone_content_edit_own"},{"location":"user-guide/permissions/#zone_meta_edit_own","text":"Allows the user to add additional owners to their zone (if user_view_others is set to true) User can remove owners (including themselves) User cannot orphan a zone (at least one user must remain) User can change zone type (i.e. from native to slave) User can set IP of master server for slave zone User can change used zone template (requires zone_master_add and zone_content_edit_own permissions)","title":"zone_meta_edit_own"},{"location":"user-guide/permissions/#zone_content_view_others","text":"Allows the user to view the content of zones owned by other users This is a read-only permission for zones the user doesn't own Useful for administrators or team environments","title":"zone_content_view_others"},{"location":"user-guide/permissions/#zone_content_edit_others","text":"Allows the user to edit the content of zones owned by other users User can modify records in zones they don't own Powerful permission that should be granted cautiously","title":"zone_content_edit_others"},{"location":"user-guide/permissions/#zone_meta_edit_others","text":"Allows the user to edit the metadata of zones owned by other users Can change owners, zone types, and master server IPs for others' zones High-level permission typically reserved for administrators","title":"zone_meta_edit_others"},{"location":"user-guide/permissions/#zone_content_edit_own_as_client","text":"Allows the user to edit record content in zones they own, except SOA and NS records Limited permission for users who should only modify certain record types Provides restricted zone management capabilities","title":"zone_content_edit_own_as_client"},{"location":"user-guide/permissions/#search-permissions","text":"","title":"Search Permissions"},{"location":"user-guide/permissions/#search","text":"Allows the user to perform searches across the system User can search for zones, records, and other elements Basic functionality for finding resources in larger deployments","title":"search"},{"location":"user-guide/permissions/#user-permissions_1","text":"","title":"User Permissions"},{"location":"user-guide/permissions/#user_view_others","text":"Allows the user to view information about other users Can see usernames and access levels of others Required for assigning zone ownership to other users","title":"user_view_others"},{"location":"user-guide/permissions/#user_edit_own","text":"Allows the user to edit their own user information User can change their password and other personal details Basic self-service permission","title":"user_edit_own"},{"location":"user-guide/permissions/#user_edit_others","text":"Allows the user to edit information for other users Can modify other users' details and access rights High-level administrative permission","title":"user_edit_others"},{"location":"user-guide/permissions/#user_add_new","text":"Allows the user to add new users to the system Can create accounts for others to access Poweradmin Administrative permission for expanding system access","title":"user_add_new"},{"location":"user-guide/permissions/#user_passwd_edit_others","text":"Allows the user to change passwords for other users Can reset passwords when users are locked out Administrative security management permission","title":"user_passwd_edit_others"},{"location":"user-guide/permissions/#user_edit_templ_perm","text":"Allows the user to change the permission template assigned to users Can modify user access by applying different templates Streamlines permission management for administrators","title":"user_edit_templ_perm"},{"location":"user-guide/permissions/#user_is_ueberuser","text":"Grants superuser status with full access to all functions User has unlimited privileges throughout Poweradmin Bypasses normal permission checks Should be granted very selectively","title":"user_is_ueberuser"},{"location":"user-guide/permissions/#template-permissions","text":"","title":"Template Permissions"},{"location":"user-guide/permissions/#templ_perm_add","text":"Allows the user to add new permission templates Templates define sets of permissions that can be assigned to users Streamlines user permission management","title":"templ_perm_add"},{"location":"user-guide/permissions/#templ_perm_edit","text":"Allows the user to edit existing permission templates Can modify permission sets used for multiple users Useful for maintaining consistent permission groups","title":"templ_perm_edit"},{"location":"user-guide/permissions/#supermaster-permissions","text":"","title":"Supermaster Permissions"},{"location":"user-guide/permissions/#supermaster_view","text":"Allows the user to view supermaster servers Can see the list of authoritative name servers Read-only access to supermaster configurations","title":"supermaster_view"},{"location":"user-guide/permissions/#supermaster_add","text":"Allows the user to add new supermaster servers Can configure authoritative name servers for PowerDNS Advanced configuration permission","title":"supermaster_add"},{"location":"user-guide/permissions/#supermaster_edit","text":"Allows the user to edit existing supermaster servers Can modify authoritative name server configurations Advanced permission for managing DNS infrastructure","title":"supermaster_edit"},{"location":"user-guide/reverse-dns/","text":"Reverse DNS (PTR Records) Guide This guide explains how to create and manage Reverse DNS (PTR) records in PowerAdmin for PowerDNS. What are PTR Records? PTR (Pointer) records provide reverse DNS resolution, mapping IP addresses to hostnames. They are used for: Email server verification Security controls and authentication Network troubleshooting Server identification Prerequisites Before creating PTR records, you need: The appropriate reverse zone must exist in PowerDNS For IPv4: Create a zone like 1.168.192.in-addr.arpa for the 192.168.1.0/24 network For IPv6: Create a zone like 0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa for 2001:db8::/64 Proper permissions to add records to these zones: You need at least one of these permissions: zone_content_edit_own - To edit zones you own zone_content_edit_others - To edit any zone For creating reverse zones, you need: zone_master_add or zone_slave_add permissions Method 1: Adding Individual PTR Records For single PTR records: Go to the reverse zone's record list (e.g., 1.168.192.in-addr.arpa ) Click \"Add Record\" at the top of the zone edit page Enter the information: Name : The last octet of the IP address (e.g., 42 for 192.168.1.42) Type : PTR Content : The fully qualified domain name (FQDN) this IP should resolve to (e.g., host42.example.com. ) TTL : Time-to-live value (e.g., 86400 for 1 day) Click \"Add Record\" Method 2: Using Batch PTR Records Feature For creating multiple PTR records at once: Access the Batch PTR Records feature: From the top navigation: Zones \u2192 Batch PTR Records From the dashboard: Click the \"Batch PTR Records\" card Complete the form: IP Version : Choose IPv4 or IPv6 Network Prefix : For IPv4: The first three octets (e.g., 192.168.1 ) For IPv6: The /64 prefix (e.g., 2001:db8:1:1 ) Host Prefix : Base name for the hosts (e.g., server ) Domain : Domain suffix for PTR records (e.g., example.com ) Number of IPv6 Records : (IPv6 only) How many records to create TTL : Time-to-live value Priority : Usually 0 for PTR records Click \"Create PTR Records\" Examples IPv4 Example Network Prefix: 192.168.1 Host Prefix: server Domain: example.com This will create 256 PTR records: - 0.1.168.192.in-addr.arpa \u2192 server-0.example.com. - 1.1.168.192.in-addr.arpa \u2192 server-1.example.com. - ...through... - 255.1.168.192.in-addr.arpa \u2192 server-255.example.com. IPv6 Example Network Prefix: 2001:db8:1:1 Host Prefix: vm Domain: example.com Number of records: 100 This will create 100 PTR records with hostnames like vm-0.example.com through vm-99.example.com Tips for Batch PTR Records Run Multiple Times Safely : You can run the batch tool multiple times - existing records will be skipped Progress Reporting : The tool reports how many records were created, skipped, or failed Reverse Zone Required : The appropriate reverse zone must exist before using this feature Automated Creation : All hostnames are generated automatically based on the pattern {prefix}-{number}.{domain} Permissions and Access Control The Batch PTR Records feature follows PowerAdmin's permission system: Required Feature Flag : The add_reverse_record option must be enabled in the PowerAdmin configuration Required User Permissions : Either the zone_content_edit_own or zone_content_edit_others permission is required to access this feature When accessed from a specific zone page, you also need ownership of that zone (if using zone_content_edit_own ) Permission Hierarchy : zone_content_edit_others gives access to all zones zone_content_edit_own limits access to zones you own No edit permissions means no access to batch PTR records Administrative Setup : Administrators can assign these permissions through permission templates Users who can only view zones will not see the Batch PTR Records option Troubleshooting No matching reverse zone found : Create the appropriate reverse zone first Permission denied : Ensure you have rights to add records to the reverse zone No records created : Check if records already exist (they will be skipped) Feature not visible : Check if you have the required permissions Best Practices Use meaningful host prefixes that identify the purpose of the servers Use consistent TTL values across your reverse zones Ensure your forward (A/AAAA) and reverse (PTR) records match Consider using shorter TTLs during migration periods","title":"Reverse DNS (PTR)"},{"location":"user-guide/reverse-dns/#reverse-dns-ptr-records-guide","text":"This guide explains how to create and manage Reverse DNS (PTR) records in PowerAdmin for PowerDNS.","title":"Reverse DNS (PTR Records) Guide"},{"location":"user-guide/reverse-dns/#what-are-ptr-records","text":"PTR (Pointer) records provide reverse DNS resolution, mapping IP addresses to hostnames. They are used for: Email server verification Security controls and authentication Network troubleshooting Server identification","title":"What are PTR Records?"},{"location":"user-guide/reverse-dns/#prerequisites","text":"Before creating PTR records, you need: The appropriate reverse zone must exist in PowerDNS For IPv4: Create a zone like 1.168.192.in-addr.arpa for the 192.168.1.0/24 network For IPv6: Create a zone like 0.0.0.0.0.0.0.0.8.b.d.0.1.0.0.2.ip6.arpa for 2001:db8::/64 Proper permissions to add records to these zones: You need at least one of these permissions: zone_content_edit_own - To edit zones you own zone_content_edit_others - To edit any zone For creating reverse zones, you need: zone_master_add or zone_slave_add permissions","title":"Prerequisites"},{"location":"user-guide/reverse-dns/#method-1-adding-individual-ptr-records","text":"For single PTR records: Go to the reverse zone's record list (e.g., 1.168.192.in-addr.arpa ) Click \"Add Record\" at the top of the zone edit page Enter the information: Name : The last octet of the IP address (e.g., 42 for 192.168.1.42) Type : PTR Content : The fully qualified domain name (FQDN) this IP should resolve to (e.g., host42.example.com. ) TTL : Time-to-live value (e.g., 86400 for 1 day) Click \"Add Record\"","title":"Method 1: Adding Individual PTR Records"},{"location":"user-guide/reverse-dns/#method-2-using-batch-ptr-records-feature","text":"For creating multiple PTR records at once: Access the Batch PTR Records feature: From the top navigation: Zones \u2192 Batch PTR Records From the dashboard: Click the \"Batch PTR Records\" card Complete the form: IP Version : Choose IPv4 or IPv6 Network Prefix : For IPv4: The first three octets (e.g., 192.168.1 ) For IPv6: The /64 prefix (e.g., 2001:db8:1:1 ) Host Prefix : Base name for the hosts (e.g., server ) Domain : Domain suffix for PTR records (e.g., example.com ) Number of IPv6 Records : (IPv6 only) How many records to create TTL : Time-to-live value Priority : Usually 0 for PTR records Click \"Create PTR Records\"","title":"Method 2: Using Batch PTR Records Feature"},{"location":"user-guide/reverse-dns/#examples","text":"","title":"Examples"},{"location":"user-guide/reverse-dns/#ipv4-example","text":"Network Prefix: 192.168.1 Host Prefix: server Domain: example.com This will create 256 PTR records: - 0.1.168.192.in-addr.arpa \u2192 server-0.example.com. - 1.1.168.192.in-addr.arpa \u2192 server-1.example.com. - ...through... - 255.1.168.192.in-addr.arpa \u2192 server-255.example.com.","title":"IPv4 Example"},{"location":"user-guide/reverse-dns/#ipv6-example","text":"Network Prefix: 2001:db8:1:1 Host Prefix: vm Domain: example.com Number of records: 100 This will create 100 PTR records with hostnames like vm-0.example.com through vm-99.example.com","title":"IPv6 Example"},{"location":"user-guide/reverse-dns/#tips-for-batch-ptr-records","text":"Run Multiple Times Safely : You can run the batch tool multiple times - existing records will be skipped Progress Reporting : The tool reports how many records were created, skipped, or failed Reverse Zone Required : The appropriate reverse zone must exist before using this feature Automated Creation : All hostnames are generated automatically based on the pattern {prefix}-{number}.{domain}","title":"Tips for Batch PTR Records"},{"location":"user-guide/reverse-dns/#permissions-and-access-control","text":"The Batch PTR Records feature follows PowerAdmin's permission system: Required Feature Flag : The add_reverse_record option must be enabled in the PowerAdmin configuration Required User Permissions : Either the zone_content_edit_own or zone_content_edit_others permission is required to access this feature When accessed from a specific zone page, you also need ownership of that zone (if using zone_content_edit_own ) Permission Hierarchy : zone_content_edit_others gives access to all zones zone_content_edit_own limits access to zones you own No edit permissions means no access to batch PTR records Administrative Setup : Administrators can assign these permissions through permission templates Users who can only view zones will not see the Batch PTR Records option","title":"Permissions and Access Control"},{"location":"user-guide/reverse-dns/#troubleshooting","text":"No matching reverse zone found : Create the appropriate reverse zone first Permission denied : Ensure you have rights to add records to the reverse zone No records created : Check if records already exist (they will be skipped) Feature not visible : Check if you have the required permissions","title":"Troubleshooting"},{"location":"user-guide/reverse-dns/#best-practices","text":"Use meaningful host prefixes that identify the purpose of the servers Use consistent TTL values across your reverse zones Ensure your forward (A/AAAA) and reverse (PTR) records match Consider using shorter TTLs during migration periods","title":"Best Practices"},{"location":"user-guide/users-roles/","text":"Users and Roles This document provides an overview of user roles and the permission management system in Poweradmin. Basics of User Management Poweradmin implements a permission-based user management system with two primary user levels: Uberusers - Users that can do anything within the interface (administrators) Limited users - Users with restricted permissions based on assigned templates Permission Templates Permission templates were introduced in version 2.0.0 and are built from a set of individual permissions. Each permission allows users to perform specific actions, such as viewing zone contents, editing zones, or creating supermasters. By adding or removing permissions to a template and assigning that template to users, you can control user access rights. Understanding Uberuser Status The user_is_ueberuser permission overrules any other permission the user may or may not have been assigned. It grants full access to all features that would otherwise require specific permissions. This is typically reserved for administrators. Zone Ownership Ownership is a designation that marks users as \"owners\" for specific zones. However, ownership alone doesn't grant any privileges for these zones. The actual abilities are determined by the permissions in the user's assigned template. For example, if a user owns zones but lacks the zone_content_view_own permission, they won't be able to see those zones. Edit Access and Zone Integrity Poweradmin assumes that users with edit permissions for a zone can be trusted with full access to that zone. This is because even partial edit access would allow a user to potentially break the zone's functionality. Therefore, if a user can edit a zone, they're also granted delete permissions. Security Pitfalls Be aware that granting any of these permissions can indirectly give users extensive rights: user_edit_templ_perm templ_perm_edit user_add_new Users with these permissions can potentially create or modify templates to grant themselves user_is_ueberuser rights. Additionally, anyone with root shell access to the server running Poweradmin or the PowerDNS database server effectively has uberuser rights. Additional Information When configuring user permissions, keep the principle of least privilege in mind - only grant the permissions necessary for a user to perform their required functions.","title":"Users and Roles"},{"location":"user-guide/users-roles/#users-and-roles","text":"This document provides an overview of user roles and the permission management system in Poweradmin.","title":"Users and Roles"},{"location":"user-guide/users-roles/#basics-of-user-management","text":"Poweradmin implements a permission-based user management system with two primary user levels: Uberusers - Users that can do anything within the interface (administrators) Limited users - Users with restricted permissions based on assigned templates","title":"Basics of User Management"},{"location":"user-guide/users-roles/#permission-templates","text":"Permission templates were introduced in version 2.0.0 and are built from a set of individual permissions. Each permission allows users to perform specific actions, such as viewing zone contents, editing zones, or creating supermasters. By adding or removing permissions to a template and assigning that template to users, you can control user access rights.","title":"Permission Templates"},{"location":"user-guide/users-roles/#understanding-uberuser-status","text":"The user_is_ueberuser permission overrules any other permission the user may or may not have been assigned. It grants full access to all features that would otherwise require specific permissions. This is typically reserved for administrators.","title":"Understanding Uberuser Status"},{"location":"user-guide/users-roles/#zone-ownership","text":"Ownership is a designation that marks users as \"owners\" for specific zones. However, ownership alone doesn't grant any privileges for these zones. The actual abilities are determined by the permissions in the user's assigned template. For example, if a user owns zones but lacks the zone_content_view_own permission, they won't be able to see those zones.","title":"Zone Ownership"},{"location":"user-guide/users-roles/#edit-access-and-zone-integrity","text":"Poweradmin assumes that users with edit permissions for a zone can be trusted with full access to that zone. This is because even partial edit access would allow a user to potentially break the zone's functionality. Therefore, if a user can edit a zone, they're also granted delete permissions.","title":"Edit Access and Zone Integrity"},{"location":"user-guide/users-roles/#security-pitfalls","text":"Be aware that granting any of these permissions can indirectly give users extensive rights: user_edit_templ_perm templ_perm_edit user_add_new Users with these permissions can potentially create or modify templates to grant themselves user_is_ueberuser rights. Additionally, anyone with root shell access to the server running Poweradmin or the PowerDNS database server effectively has uberuser rights.","title":"Security Pitfalls"},{"location":"user-guide/users-roles/#additional-information","text":"When configuring user permissions, keep the principle of least privilege in mind - only grant the permissions necessary for a user to perform their required functions.","title":"Additional Information"},{"location":"user-guide/ddns/client-setup/","text":"Client Setup Update Methods The Dynamic DNS update system supports several ways to update records: HTTP Basic Authentication URL parameters Automatic IP detection Supported Parameters username - Your Poweradmin username (if not using HTTP Basic Auth) password - Your Poweradmin password (if not using HTTP Basic Auth) hostname - The FQDN to update myip or ip - IPv4 address(es), comma-separated myip6 or ip6 - IPv6 address(es), comma-separated dualstack_update - Set to 1 to update both IPv4 and IPv6 verbose - Enable verbose response messages Special Values You can use whatismyip for the IP parameters to automatically detect your address: curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=whatismyip\" Multiple IP Management The system supports managing multiple IP addresses per host: # Update multiple IPv4 addresses curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2\" # Update multiple IPv6 addresses curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip6=2001:db8::1,2001:db8::2\" # Update both IPv4 and IPv6 with cleanup curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2&myip6=2001:db8::1,2001:db8::2&dualstack_update=1\" When using multiple IPs: Omitted record types are preserved Use dualstack_update=1 to clean up both A and AAAA records Records not included in the update are automatically removed Changes are atomic and maintain zone consistency Using the Shell Script Download the dynamic DNS client script Make it executable and run: chmod 755 dynamic_dns_client.sh ./dynamic_dns_client.sh Basic Authentication You can also create a client that uses HTTP basic authentication with username and password. Client Script Installation Shell Script chmod 755 dynamic_dns_client.sh ./dynamic_dns_client.sh Python Script Install required dependencies: pip install requests Run the script: python dynamic_dns_client.py Perl Script Install required modules: cpan install LWP::UserAgent Run the script: perl dynamic_dns_client.pl","title":"Client Setup"},{"location":"user-guide/ddns/client-setup/#client-setup","text":"","title":"Client Setup"},{"location":"user-guide/ddns/client-setup/#update-methods","text":"The Dynamic DNS update system supports several ways to update records: HTTP Basic Authentication URL parameters Automatic IP detection","title":"Update Methods"},{"location":"user-guide/ddns/client-setup/#supported-parameters","text":"username - Your Poweradmin username (if not using HTTP Basic Auth) password - Your Poweradmin password (if not using HTTP Basic Auth) hostname - The FQDN to update myip or ip - IPv4 address(es), comma-separated myip6 or ip6 - IPv6 address(es), comma-separated dualstack_update - Set to 1 to update both IPv4 and IPv6 verbose - Enable verbose response messages","title":"Supported Parameters"},{"location":"user-guide/ddns/client-setup/#special-values","text":"You can use whatismyip for the IP parameters to automatically detect your address: curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=whatismyip\"","title":"Special Values"},{"location":"user-guide/ddns/client-setup/#multiple-ip-management","text":"The system supports managing multiple IP addresses per host: # Update multiple IPv4 addresses curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2\" # Update multiple IPv6 addresses curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip6=2001:db8::1,2001:db8::2\" # Update both IPv4 and IPv6 with cleanup curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2&myip6=2001:db8::1,2001:db8::2&dualstack_update=1\" When using multiple IPs: Omitted record types are preserved Use dualstack_update=1 to clean up both A and AAAA records Records not included in the update are automatically removed Changes are atomic and maintain zone consistency","title":"Multiple IP Management"},{"location":"user-guide/ddns/client-setup/#using-the-shell-script","text":"Download the dynamic DNS client script Make it executable and run: chmod 755 dynamic_dns_client.sh ./dynamic_dns_client.sh","title":"Using the Shell Script"},{"location":"user-guide/ddns/client-setup/#basic-authentication","text":"You can also create a client that uses HTTP basic authentication with username and password.","title":"Basic Authentication"},{"location":"user-guide/ddns/client-setup/#client-script-installation","text":"","title":"Client Script Installation"},{"location":"user-guide/ddns/client-setup/#shell-script","text":"chmod 755 dynamic_dns_client.sh ./dynamic_dns_client.sh","title":"Shell Script"},{"location":"user-guide/ddns/client-setup/#python-script","text":"Install required dependencies: pip install requests Run the script: python dynamic_dns_client.py","title":"Python Script"},{"location":"user-guide/ddns/client-setup/#perl-script","text":"Install required modules: cpan install LWP::UserAgent Run the script: perl dynamic_dns_client.pl","title":"Perl Script"},{"location":"user-guide/ddns/configuration/","text":"Dynamic DNS Configuration This guide will walk you through the process of setting up Dynamic DNS (DDNS) in Poweradmin. Setting Up User Permissions You'll need to create a user with specific permissions for DDNS updates: Create a permission template: Navigate to Users > Add permission template Provide a meaningful name (e.g., \"dynamic\") and description Select required permissions: zone_master_add zone_content_view_own zone_content_edit_own or zone_content_edit_own_as_client or zone_content_edit_others Create a new user: Navigate to Users > Add user Fill in user details Apply the previously created template Configuring DNS Zone After creating a user with appropriate permissions: Log in as the new user Select \"Add master zone\" Enter your domain name Navigate to the created zone Add a record for dynamic updates Server-Side Configuration The Dynamic DNS functionality in Poweradmin is provided by the dynamic_update.php script, which handles DNS record updates when IP addresses change. Configuration Options The main configuration is controlled through Poweradmin's settings: return [ 'dynamicdns' => [ 'enabled' => true, // Enable or disable DDNS functionality 'ttl' => 60, // Default TTL for dynamic records (in seconds) 'allow_auto_detect' => true, // Allow automatic IP detection 'allow_ipv4' => true, // Allow IPv4 updates 'allow_ipv6' => true, // Allow IPv6 updates 'require_authentication' => true, // Require user authentication ], ]; Security Considerations Use HTTPS : Always use HTTPS for DDNS updates to prevent credentials and updates from being intercepted. Create dedicated users : Create specific users for DDNS updates with minimal permissions. IP restrictions : Consider implementing IP restrictions for DDNS user accounts if your update sources have static IP addresses. Regular auditing : Periodically review DDNS activity in logs to detect unusual patterns. Testing Your Configuration After setup, you can test your configuration using: curl -u username:password \"https://yourserver.com/dynamic_update.php?hostname=host.yourdomain.com&myip=auto\" A successful response will look like: good 192.168.1.100 Troubleshooting If you encounter issues with your DDNS setup: Check permissions : Ensure the user has proper permissions for zone editing Verify zone ownership : The user must own or have access to the zone being updated Check authentication : Verify credentials are correctly configured Review logs : Check Poweradmin logs for detailed error messages Test manually : Try manual updates with cURL to isolate client vs. server issues For client setup instructions, see Client Setup .","title":"Configuration"},{"location":"user-guide/ddns/configuration/#dynamic-dns-configuration","text":"This guide will walk you through the process of setting up Dynamic DNS (DDNS) in Poweradmin.","title":"Dynamic DNS Configuration"},{"location":"user-guide/ddns/configuration/#setting-up-user-permissions","text":"You'll need to create a user with specific permissions for DDNS updates: Create a permission template: Navigate to Users > Add permission template Provide a meaningful name (e.g., \"dynamic\") and description Select required permissions: zone_master_add zone_content_view_own zone_content_edit_own or zone_content_edit_own_as_client or zone_content_edit_others Create a new user: Navigate to Users > Add user Fill in user details Apply the previously created template","title":"Setting Up User Permissions"},{"location":"user-guide/ddns/configuration/#configuring-dns-zone","text":"After creating a user with appropriate permissions: Log in as the new user Select \"Add master zone\" Enter your domain name Navigate to the created zone Add a record for dynamic updates","title":"Configuring DNS Zone"},{"location":"user-guide/ddns/configuration/#server-side-configuration","text":"The Dynamic DNS functionality in Poweradmin is provided by the dynamic_update.php script, which handles DNS record updates when IP addresses change.","title":"Server-Side Configuration"},{"location":"user-guide/ddns/configuration/#configuration-options","text":"The main configuration is controlled through Poweradmin's settings: return [ 'dynamicdns' => [ 'enabled' => true, // Enable or disable DDNS functionality 'ttl' => 60, // Default TTL for dynamic records (in seconds) 'allow_auto_detect' => true, // Allow automatic IP detection 'allow_ipv4' => true, // Allow IPv4 updates 'allow_ipv6' => true, // Allow IPv6 updates 'require_authentication' => true, // Require user authentication ], ];","title":"Configuration Options"},{"location":"user-guide/ddns/configuration/#security-considerations","text":"Use HTTPS : Always use HTTPS for DDNS updates to prevent credentials and updates from being intercepted. Create dedicated users : Create specific users for DDNS updates with minimal permissions. IP restrictions : Consider implementing IP restrictions for DDNS user accounts if your update sources have static IP addresses. Regular auditing : Periodically review DDNS activity in logs to detect unusual patterns.","title":"Security Considerations"},{"location":"user-guide/ddns/configuration/#testing-your-configuration","text":"After setup, you can test your configuration using: curl -u username:password \"https://yourserver.com/dynamic_update.php?hostname=host.yourdomain.com&myip=auto\" A successful response will look like: good 192.168.1.100","title":"Testing Your Configuration"},{"location":"user-guide/ddns/configuration/#troubleshooting","text":"If you encounter issues with your DDNS setup: Check permissions : Ensure the user has proper permissions for zone editing Verify zone ownership : The user must own or have access to the zone being updated Check authentication : Verify credentials are correctly configured Review logs : Check Poweradmin logs for detailed error messages Test manually : Try manual updates with cURL to isolate client vs. server issues For client setup instructions, see Client Setup .","title":"Troubleshooting"},{"location":"user-guide/ddns/overview/","text":"Dynamic DNS Overview Dynamic DNS (DDNS) allows you to automatically update DNS records when your IP address changes. This is essential for: Hosting services on connections with dynamic IP addresses Maintaining DNS records for home servers or networks Providing consistent domain name access to systems with changing IP addresses Enabling remote access to home networks or IoT devices Poweradmin's Dynamic DNS implementation offers a flexible API that can be integrated with various automation tools and scripts to keep DNS records up to date. It supports both IPv4 and IPv6 addresses through various update methods. Requirements Before setting up Dynamic DNS, ensure you have: PowerDNS server with Poweradmin interface User account with appropriate permissions One of the following clients: Bash shell environment Python 3.x with requests module Perl with LWP::UserAgent module cURL or any HTTP client tool Features IPv4 and IPv6 support (dual-stack) Multiple IP management : Support for comma-separated IP lists Simultaneous management of multiple A/AAAA records Selective record type updating Intelligent record synchronization : Automatic cleanup of outdated records Database and DNS zone consistency maintenance Optional full sync with dual-stack support Automatic SOA serial updates Flexible authentication (Basic HTTP Authentication and query parameters) TTL management (default 60 seconds) Debugging support with verbose response mode Backward compatibility with legacy clients Implementation Components Server-Side Components dynamic_update.php - Main script for processing DNS updates, supporting: Single or multiple IPv4/IPv6 addresses Automatic IP detection using 'whatismyip' Comma-separated IP lists Dual-stack updates addons/clientip.php - Script that provides the client's public IP address Client-Side Tools Official client scripts: addons/dynamic_dns_client.sh - Bash client script addons/dynamic_dns_client.py - Python client script addons/dynamic_dns_client.pl - Perl client script You can also use cURL or any HTTP client to update DNS records. See the Using cURL guide for examples. Security Features Basic HTTP Authentication Permission-based access control User activity validation IP address validation Domain ownership verification Getting Started To set up and use Dynamic DNS with Poweradmin: Configure Dynamic DNS - Set up user permissions and DNS zones Set up clients - Configure update clients on your devices Using cURL - For manual updates or custom implementations","title":"Overview"},{"location":"user-guide/ddns/overview/#dynamic-dns-overview","text":"Dynamic DNS (DDNS) allows you to automatically update DNS records when your IP address changes. This is essential for: Hosting services on connections with dynamic IP addresses Maintaining DNS records for home servers or networks Providing consistent domain name access to systems with changing IP addresses Enabling remote access to home networks or IoT devices Poweradmin's Dynamic DNS implementation offers a flexible API that can be integrated with various automation tools and scripts to keep DNS records up to date. It supports both IPv4 and IPv6 addresses through various update methods.","title":"Dynamic DNS Overview"},{"location":"user-guide/ddns/overview/#requirements","text":"Before setting up Dynamic DNS, ensure you have: PowerDNS server with Poweradmin interface User account with appropriate permissions One of the following clients: Bash shell environment Python 3.x with requests module Perl with LWP::UserAgent module cURL or any HTTP client tool","title":"Requirements"},{"location":"user-guide/ddns/overview/#features","text":"IPv4 and IPv6 support (dual-stack) Multiple IP management : Support for comma-separated IP lists Simultaneous management of multiple A/AAAA records Selective record type updating Intelligent record synchronization : Automatic cleanup of outdated records Database and DNS zone consistency maintenance Optional full sync with dual-stack support Automatic SOA serial updates Flexible authentication (Basic HTTP Authentication and query parameters) TTL management (default 60 seconds) Debugging support with verbose response mode Backward compatibility with legacy clients","title":"Features"},{"location":"user-guide/ddns/overview/#implementation-components","text":"","title":"Implementation Components"},{"location":"user-guide/ddns/overview/#server-side-components","text":"dynamic_update.php - Main script for processing DNS updates, supporting: Single or multiple IPv4/IPv6 addresses Automatic IP detection using 'whatismyip' Comma-separated IP lists Dual-stack updates addons/clientip.php - Script that provides the client's public IP address","title":"Server-Side Components"},{"location":"user-guide/ddns/overview/#client-side-tools","text":"Official client scripts: addons/dynamic_dns_client.sh - Bash client script addons/dynamic_dns_client.py - Python client script addons/dynamic_dns_client.pl - Perl client script You can also use cURL or any HTTP client to update DNS records. See the Using cURL guide for examples.","title":"Client-Side Tools"},{"location":"user-guide/ddns/overview/#security-features","text":"Basic HTTP Authentication Permission-based access control User activity validation IP address validation Domain ownership verification","title":"Security Features"},{"location":"user-guide/ddns/overview/#getting-started","text":"To set up and use Dynamic DNS with Poweradmin: Configure Dynamic DNS - Set up user permissions and DNS zones Set up clients - Configure update clients on your devices Using cURL - For manual updates or custom implementations","title":"Getting Started"},{"location":"user-guide/ddns/using-curl/","text":"Using cURL for Dynamic DNS Updates cURL is a versatile command-line tool that can be used to update DNS records in Poweradmin. Here are various examples of using cURL with the Dynamic DNS update system. Basic Update Examples Update IPv4 Address curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1\" Automatic IP Detection curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=whatismyip\" Update IPv6 Address curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip6=2001:db8::1\" Advanced Usage Combined Multiple IPv4 and IPv6 Update # Update multiple A records and single AAAA record in one request curl -u user:pass \"https://yourhost/dynamic_update.php?hostname=host.example.com&myip=1.2.3.4,5.6.7.8&myip6=2001:db8::1&dualstack_update=1\" Dual-Stack Update curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1&myip6=2001:db8::1&dualstack_update=1\" Multiple IP Addresses curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2\" Using URL Parameters Instead of Basic Auth curl \"https://dns.example.com/dynamic_update.php?username=user&password=pass&hostname=host.example.com&myip=192.0.2.1\" Scripting Examples Basic Update Script #!/bin/bash USERNAME=\"your_username\" PASSWORD=\"your_password\" HOSTNAME=\"your.hostname.com\" SERVER=\"https://dns.example.com/dynamic_update.php\" curl -s -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\" Periodic Update Script #!/bin/bash USERNAME=\"your_username\" PASSWORD=\"your_password\" HOSTNAME=\"your.hostname.com\" SERVER=\"https://dns.example.com/dynamic_update.php\" INTERVAL=300 # Update every 5 minutes while true; do curl -s -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\" sleep $INTERVAL done Error Handling The update script returns HTTP status codes and messages that can be captured: response=$(curl -s -w \"%{http_code}\" -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\") if [ $response -eq 200 ]; then echo \"Update successful\" else echo \"Update failed with code: $response\" fi Security Considerations Always use HTTPS to protect credentials Consider using Basic Authentication instead of URL parameters Store credentials securely, not in plain text Use specific IP ranges if possible Monitor for unusual update patterns","title":"Using cURL"},{"location":"user-guide/ddns/using-curl/#using-curl-for-dynamic-dns-updates","text":"cURL is a versatile command-line tool that can be used to update DNS records in Poweradmin. Here are various examples of using cURL with the Dynamic DNS update system.","title":"Using cURL for Dynamic DNS Updates"},{"location":"user-guide/ddns/using-curl/#basic-update-examples","text":"","title":"Basic Update Examples"},{"location":"user-guide/ddns/using-curl/#update-ipv4-address","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1\"","title":"Update IPv4 Address"},{"location":"user-guide/ddns/using-curl/#automatic-ip-detection","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=whatismyip\"","title":"Automatic IP Detection"},{"location":"user-guide/ddns/using-curl/#update-ipv6-address","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip6=2001:db8::1\"","title":"Update IPv6 Address"},{"location":"user-guide/ddns/using-curl/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"user-guide/ddns/using-curl/#combined-multiple-ipv4-and-ipv6-update","text":"# Update multiple A records and single AAAA record in one request curl -u user:pass \"https://yourhost/dynamic_update.php?hostname=host.example.com&myip=1.2.3.4,5.6.7.8&myip6=2001:db8::1&dualstack_update=1\"","title":"Combined Multiple IPv4 and IPv6 Update"},{"location":"user-guide/ddns/using-curl/#dual-stack-update","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1&myip6=2001:db8::1&dualstack_update=1\"","title":"Dual-Stack Update"},{"location":"user-guide/ddns/using-curl/#multiple-ip-addresses","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2\"","title":"Multiple IP Addresses"},{"location":"user-guide/ddns/using-curl/#using-url-parameters-instead-of-basic-auth","text":"curl \"https://dns.example.com/dynamic_update.php?username=user&password=pass&hostname=host.example.com&myip=192.0.2.1\"","title":"Using URL Parameters Instead of Basic Auth"},{"location":"user-guide/ddns/using-curl/#scripting-examples","text":"","title":"Scripting Examples"},{"location":"user-guide/ddns/using-curl/#basic-update-script","text":"#!/bin/bash USERNAME=\"your_username\" PASSWORD=\"your_password\" HOSTNAME=\"your.hostname.com\" SERVER=\"https://dns.example.com/dynamic_update.php\" curl -s -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\"","title":"Basic Update Script"},{"location":"user-guide/ddns/using-curl/#periodic-update-script","text":"#!/bin/bash USERNAME=\"your_username\" PASSWORD=\"your_password\" HOSTNAME=\"your.hostname.com\" SERVER=\"https://dns.example.com/dynamic_update.php\" INTERVAL=300 # Update every 5 minutes while true; do curl -s -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\" sleep $INTERVAL done","title":"Periodic Update Script"},{"location":"user-guide/ddns/using-curl/#error-handling","text":"The update script returns HTTP status codes and messages that can be captured: response=$(curl -s -w \"%{http_code}\" -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\") if [ $response -eq 200 ]; then echo \"Update successful\" else echo \"Update failed with code: $response\" fi","title":"Error Handling"},{"location":"user-guide/ddns/using-curl/#security-considerations","text":"Always use HTTPS to protect credentials Consider using Basic Authentication instead of URL parameters Store credentials securely, not in plain text Use specific IP ranges if possible Monitor for unusual update patterns","title":"Security Considerations"}]}