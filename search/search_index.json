{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Poweradmin Documentation Welcome to the official documentation for Poweradmin, a web-based administration tool for PowerDNS. Overview Poweradmin is a friendly web interface for managing PowerDNS. It allows you to manage DNS zones and records with ease. Features User Management : Manage users and roles with different permissions. DNS Management : Create, update, and delete DNS zones and records. Templates : Use templates for bulk operations. Dynamic DNS : Configure and manage dynamic DNS settings. Security : Implement best practices for securing your DNS infrastructure. Logging and Monitoring : Configure logging and monitor your DNS setup. API : Access and manage your DNS data programmatically using the Poweradmin API. Getting Started To get started with Poweradmin, follow these steps: Installation : Refer to the Installation Guide for detailed instructions on how to install Poweradmin. Configuration : Check the Configuration Guide to set up your Poweradmin instance. User Guide : Learn how to use Poweradmin with the User Guide . Community and Support Join our community for support and discussions: GitHub Repository Issue Tracker Discussions Contributing We welcome contributions! Please see the Contributing Guide for more information on how to contribute to the project. License Poweradmin is licensed under the GPL-3.0 License . Thank you for using Poweradmin!","title":"Home"},{"location":"#poweradmin-documentation","text":"Welcome to the official documentation for Poweradmin, a web-based administration tool for PowerDNS.","title":"Poweradmin Documentation"},{"location":"#overview","text":"Poweradmin is a friendly web interface for managing PowerDNS. It allows you to manage DNS zones and records with ease.","title":"Overview"},{"location":"#features","text":"User Management : Manage users and roles with different permissions. DNS Management : Create, update, and delete DNS zones and records. Templates : Use templates for bulk operations. Dynamic DNS : Configure and manage dynamic DNS settings. Security : Implement best practices for securing your DNS infrastructure. Logging and Monitoring : Configure logging and monitor your DNS setup. API : Access and manage your DNS data programmatically using the Poweradmin API.","title":"Features"},{"location":"#getting-started","text":"To get started with Poweradmin, follow these steps: Installation : Refer to the Installation Guide for detailed instructions on how to install Poweradmin. Configuration : Check the Configuration Guide to set up your Poweradmin instance. User Guide : Learn how to use Poweradmin with the User Guide .","title":"Getting Started"},{"location":"#community-and-support","text":"Join our community for support and discussions: GitHub Repository Issue Tracker Discussions","title":"Community and Support"},{"location":"#contributing","text":"We welcome contributions! Please see the Contributing Guide for more information on how to contribute to the project.","title":"Contributing"},{"location":"#license","text":"Poweradmin is licensed under the GPL-3.0 License . Thank you for using Poweradmin!","title":"License"},{"location":"configuration/password-policies/","text":"Password Policies Poweradmin allows you to enforce password policies to enhance the security of user accounts. All security configurations, including password policies, are now configured in a single config/settings.php file under the security section. This consolidates all security-related settings into one location for easier management. Password Rules enable_password_rules : Enable or disable password rules enforcement. Default: false . min_length : Minimum length of the password. Default: 6 . require_uppercase : Require at least one uppercase letter. Default: true . require_lowercase : Require at least one lowercase letter. Default: true . require_numbers : Require at least one numeric digit. Default: true . require_special : Require at least one special character. Default: false . special_characters : List of allowed special characters. Default: !@#$%^&*()+-=[]{}|;:,.<>? . Password Security Settings The following additional security settings are available in the security section: password_encryption : Choose the password hashing algorithm. Options: 'md5', 'md5salt', 'bcrypt', 'argon2i', ' argon2id'. Default: bcrypt . password_cost : Cost factor for bcrypt algorithm. Default: 12 . Password Expiration Note: The following settings are not implemented yet. enable_expiration : Enable or disable password expiration. Default: false . max_age_days : Maximum age of the password in days before it expires. Default: 90 . Password Reuse Prevention Note: The following settings are not implemented yet. enable_reuse_prevention : Enable or disable prevention of password reuse. Default: false . prevent_reuse : Number of previous passwords to check against for reuse. Default: 5 . Example Configuration To enable password rules with custom settings, add the following configuration to your config/settings.php : <?php return [ 'security' => [ 'password_encryption' => 'bcrypt', 'password_cost' => 12, 'password_policy' => [ 'enable_password_rules' => true, 'min_length' => 8, 'require_special' => true, ], ], ]; When enable_password_rules is set to true , passwords will be validated according to the configured rules. In this example, passwords must be at least 8 characters long and include special characters, along with the default requirements for uppercase letters, lowercase letters, and numbers.","title":"Password Policies"},{"location":"configuration/password-policies/#password-policies","text":"Poweradmin allows you to enforce password policies to enhance the security of user accounts. All security configurations, including password policies, are now configured in a single config/settings.php file under the security section. This consolidates all security-related settings into one location for easier management.","title":"Password Policies"},{"location":"configuration/password-policies/#password-rules","text":"enable_password_rules : Enable or disable password rules enforcement. Default: false . min_length : Minimum length of the password. Default: 6 . require_uppercase : Require at least one uppercase letter. Default: true . require_lowercase : Require at least one lowercase letter. Default: true . require_numbers : Require at least one numeric digit. Default: true . require_special : Require at least one special character. Default: false . special_characters : List of allowed special characters. Default: !@#$%^&*()+-=[]{}|;:,.<>? .","title":"Password Rules"},{"location":"configuration/password-policies/#password-security-settings","text":"The following additional security settings are available in the security section: password_encryption : Choose the password hashing algorithm. Options: 'md5', 'md5salt', 'bcrypt', 'argon2i', ' argon2id'. Default: bcrypt . password_cost : Cost factor for bcrypt algorithm. Default: 12 .","title":"Password Security Settings"},{"location":"configuration/password-policies/#password-expiration","text":"Note: The following settings are not implemented yet. enable_expiration : Enable or disable password expiration. Default: false . max_age_days : Maximum age of the password in days before it expires. Default: 90 .","title":"Password Expiration"},{"location":"configuration/password-policies/#password-reuse-prevention","text":"Note: The following settings are not implemented yet. enable_reuse_prevention : Enable or disable prevention of password reuse. Default: false . prevent_reuse : Number of previous passwords to check against for reuse. Default: 5 .","title":"Password Reuse Prevention"},{"location":"configuration/password-policies/#example-configuration","text":"To enable password rules with custom settings, add the following configuration to your config/settings.php : <?php return [ 'security' => [ 'password_encryption' => 'bcrypt', 'password_cost' => 12, 'password_policy' => [ 'enable_password_rules' => true, 'min_length' => 8, 'require_special' => true, ], ], ]; When enable_password_rules is set to true , passwords will be validated according to the configured rules. In this example, passwords must be at least 8 characters long and include special characters, along with the default requirements for uppercase letters, lowercase letters, and numbers.","title":"Example Configuration"},{"location":"configuration/security-policies/","text":"Password Policies Poweradmin allows you to enforce password policies to enhance the security of user accounts. All security configurations, including account lockout and IP management policies, are now configured in the config/settings.php file under the security section. Account Lockout enable_lockout : Enable or disable account lockout after multiple failed login attempts. Default: false . lockout_attempts : Number of failed login attempts before account is locked. Default: 5 . lockout_duration : Duration of the lockout in minutes. Default: 15 . track_ip_address : Enable tracking of IP addresses for failed login attempts. Default: true . clear_attempts_on_success : Clear failed attempt counter after successful login. Default: true . IP Address Management whitelist_ip_addresses : List of IP addresses that are always allowed to access the system. Supports IPs, CIDRs, and wildcards. Takes priority over blacklist. Default: [] . blacklist_ip_addresses : List of IP addresses that are blocked from accessing the system. Supports IPs, CIDRs, and wildcards. Default: [] . These settings can be found in the security.account_lockout section of your config/settings.php file. Example Configuration To enable account lockout and configure IP whitelisting, you can use the following configuration in your config/settings.php : <?php return [ 'security' => [ 'account_lockout' => [ 'enable_lockout' => true, 'whitelist_ip_addresses' => ['192.168.1.0/24', '10.0.0.*'], 'blacklist_ip_addresses' => ['1.2.3.4', '5.6.7.0/24'], ], ], ]; When enable_lockout is set to true , an account will be locked for 15 minutes after 5 failed login attempts. The system tracks IP addresses by default and resets the failed attempts counter after a successful login. Whitelisted IPs will never be locked out, while blacklisted IPs will always be blocked.","title":"Security Policies"},{"location":"configuration/security-policies/#password-policies","text":"Poweradmin allows you to enforce password policies to enhance the security of user accounts. All security configurations, including account lockout and IP management policies, are now configured in the config/settings.php file under the security section.","title":"Password Policies"},{"location":"configuration/security-policies/#account-lockout","text":"enable_lockout : Enable or disable account lockout after multiple failed login attempts. Default: false . lockout_attempts : Number of failed login attempts before account is locked. Default: 5 . lockout_duration : Duration of the lockout in minutes. Default: 15 . track_ip_address : Enable tracking of IP addresses for failed login attempts. Default: true . clear_attempts_on_success : Clear failed attempt counter after successful login. Default: true .","title":"Account Lockout"},{"location":"configuration/security-policies/#ip-address-management","text":"whitelist_ip_addresses : List of IP addresses that are always allowed to access the system. Supports IPs, CIDRs, and wildcards. Takes priority over blacklist. Default: [] . blacklist_ip_addresses : List of IP addresses that are blocked from accessing the system. Supports IPs, CIDRs, and wildcards. Default: [] . These settings can be found in the security.account_lockout section of your config/settings.php file.","title":"IP Address Management"},{"location":"configuration/security-policies/#example-configuration","text":"To enable account lockout and configure IP whitelisting, you can use the following configuration in your config/settings.php : <?php return [ 'security' => [ 'account_lockout' => [ 'enable_lockout' => true, 'whitelist_ip_addresses' => ['192.168.1.0/24', '10.0.0.*'], 'blacklist_ip_addresses' => ['1.2.3.4', '5.6.7.0/24'], ], ], ]; When enable_lockout is set to true , an account will be locked for 15 minutes after 5 failed login attempts. The system tracks IP addresses by default and resets the failed attempts counter after a successful login. Whitelisted IPs will never be locked out, while blacklisted IPs will always be blocked.","title":"Example Configuration"},{"location":"getting-started/docker-demo/","text":"Docker Demo The easiest way to evaluate Poweradmin without actually connecting to PowerDNS is to use a Docker image. Steps to Evaluate Poweradmin Using Docker Get the Source Download the release file or use git to clone the repository. Change to the Directory Navigate to the directory where the files are located. Build the Docker Image Run the following command to build the Docker image: sh docker build --no-cache -t poweradmin . Run the Docker Container Execute the following command to run the Docker container: sh docker run -d --name poweradmin -p 8080:80 poweradmin Access Poweradmin Open your browser and go to http://localhost:8080 . Login Use the following credentials to log in: Username : admin Password : testadmin Note : This installation uses SQLite to store all the data.","title":"Docker Demo"},{"location":"getting-started/docker-demo/#docker-demo","text":"The easiest way to evaluate Poweradmin without actually connecting to PowerDNS is to use a Docker image.","title":"Docker Demo"},{"location":"getting-started/docker-demo/#steps-to-evaluate-poweradmin-using-docker","text":"Get the Source Download the release file or use git to clone the repository. Change to the Directory Navigate to the directory where the files are located. Build the Docker Image Run the following command to build the Docker image: sh docker build --no-cache -t poweradmin . Run the Docker Container Execute the following command to run the Docker container: sh docker run -d --name poweradmin -p 8080:80 poweradmin Access Poweradmin Open your browser and go to http://localhost:8080 . Login Use the following credentials to log in: Username : admin Password : testadmin Note : This installation uses SQLite to store all the data.","title":"Steps to Evaluate Poweradmin Using Docker"},{"location":"getting-started/overview/","text":"Overview Welcome to the PowerAdmin documentation! This section will help you get started with PowerAdmin, a web-based administration tool for PowerDNS. Here, you will find an introduction to the tool, its features, and how to navigate through the documentation. Quick Evaluation If you want to quickly evaluate PowerAdmin, follow these guides: Docker Demo : Learn how to set up a demo environment using Docker. First Steps : Get started with the basic setup and configuration. Example Configurations : Explore example configurations to understand different use cases. System Requirements Before installing PowerAdmin, ensure your system meets the necessary requirements. This section covers the hardware and software prerequisites for running PowerAdmin efficiently.","title":"Overview"},{"location":"getting-started/overview/#overview","text":"Welcome to the PowerAdmin documentation! This section will help you get started with PowerAdmin, a web-based administration tool for PowerDNS. Here, you will find an introduction to the tool, its features, and how to navigate through the documentation.","title":"Overview"},{"location":"getting-started/overview/#quick-evaluation","text":"If you want to quickly evaluate PowerAdmin, follow these guides: Docker Demo : Learn how to set up a demo environment using Docker. First Steps : Get started with the basic setup and configuration. Example Configurations : Explore example configurations to understand different use cases.","title":"Quick Evaluation"},{"location":"getting-started/overview/#system-requirements","text":"Before installing PowerAdmin, ensure your system meets the necessary requirements. This section covers the hardware and software prerequisites for running PowerAdmin efficiently.","title":"System Requirements"},{"location":"getting-started/requirements/","text":"PowerAdmin System Requirements Overview PowerAdmin requires PHP 8.1 or higher to run. This document outlines the supported Linux and BSD distributions as well as those that are not supported due to PHP version constraints. For the best experience, ensure your system meets or exceeds the recommended requirements. Minimum Requirements PHP : 8.1 or higher Web Server : Apache or NGINX Operating System : Linux or BSD Note : Other web server software, such as Caddy, might also be supported. However, these are usually not tested by the maintainer and may only work with help from the community. Supported Distributions Distribution PHP Version Notes Debian 12.7 8.2 Ubuntu 22.04 8.1 Ubuntu 24.04 8.3 Fedora 40 8.3 Apache included by default Fedora 41 8.3 Apache included by default OpenSuse 15.6 8.2 BSD Operating Systems PowerAdmin is compatible with BSD operating systems that meet the PHP 8.1+ requirement. While not extensively tested, it should work as long as the environment is properly configured. Unsupported Distributions Distribution PHP Version Reason for Lack of Support Debian 11 7.4 PHP below minimum version Ubuntu 20.04 7.4 PHP below minimum version CentOS Stream release 9 8.0 PHP below minimum version Rocky 8.10 7.2 PHP below minimum version Rocky 9.4 8.0 PHP below minimum version Alma 8.10 7.2 PHP below minimum version Alma 9.4 8.0 PHP below minimum version Notes Distributions listed as unsupported can potentially be configured manually with a custom PHP build, but this is not officially supported. Upgrade paths are recommended for unsupported distributions to maintain security and compatibility.","title":"System Requirements"},{"location":"getting-started/requirements/#poweradmin-system-requirements","text":"","title":"PowerAdmin System Requirements"},{"location":"getting-started/requirements/#overview","text":"PowerAdmin requires PHP 8.1 or higher to run. This document outlines the supported Linux and BSD distributions as well as those that are not supported due to PHP version constraints. For the best experience, ensure your system meets or exceeds the recommended requirements.","title":"Overview"},{"location":"getting-started/requirements/#minimum-requirements","text":"PHP : 8.1 or higher Web Server : Apache or NGINX Operating System : Linux or BSD Note : Other web server software, such as Caddy, might also be supported. However, these are usually not tested by the maintainer and may only work with help from the community.","title":"Minimum Requirements"},{"location":"getting-started/requirements/#supported-distributions","text":"Distribution PHP Version Notes Debian 12.7 8.2 Ubuntu 22.04 8.1 Ubuntu 24.04 8.3 Fedora 40 8.3 Apache included by default Fedora 41 8.3 Apache included by default OpenSuse 15.6 8.2","title":"Supported Distributions"},{"location":"getting-started/requirements/#bsd-operating-systems","text":"PowerAdmin is compatible with BSD operating systems that meet the PHP 8.1+ requirement. While not extensively tested, it should work as long as the environment is properly configured.","title":"BSD Operating Systems"},{"location":"getting-started/requirements/#unsupported-distributions","text":"Distribution PHP Version Reason for Lack of Support Debian 11 7.4 PHP below minimum version Ubuntu 20.04 7.4 PHP below minimum version CentOS Stream release 9 8.0 PHP below minimum version Rocky 8.10 7.2 PHP below minimum version Rocky 9.4 8.0 PHP below minimum version Alma 8.10 7.2 PHP below minimum version Alma 9.4 8.0 PHP below minimum version","title":"Unsupported Distributions"},{"location":"getting-started/requirements/#notes","text":"Distributions listed as unsupported can potentially be configured manually with a custom PHP build, but this is not officially supported. Upgrade paths are recommended for unsupported distributions to maintain security and compatibility.","title":"Notes"},{"location":"installation/composer/","text":"Installation (Composer) Note: This is an alternative way to install and update Poweradmin using Composer. Prerequisites PHP 8.1 or higher Composer installed on your system Required PHP extensions: pdo, pdo_mysql/pdo_pgsql/pdo_sqlite See System Requirements for detailed requirements. Installing Poweradmin To install the latest stable version of Poweradmin, you can use the following Composer command: composer create-project --no-dev poweradmin/poweradmin This command will create a poweradmin folder in the current directory, download, and set up Poweradmin without development dependencies. After running the Composer command, you need to create a simple configuration file at inc/config.inc.php with basic database settings. Directory Structure After installation, you should have the following structure: poweradmin/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 inc/ \u2502 \u2514\u2500\u2500 config.inc.php \u251c\u2500\u2500 lib/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 vendor/ \u251c\u2500\u2500 composer.json \u2514\u2500\u2500 composer.lock Basic Configuration Here is an example of what the inc/config.inc.php file should look like: <?php // Database settings $db_host = 'localhost'; $db_name = 'your_db_name'; $db_user = 'your_db_user'; $db_pass = 'your_db_password'; $db_type = 'mysql'; // or 'pgsql' See Basic Configuration for all available options. SQLite Database Settings If you are using SQLite, uncomment the following lines in the inc/config.inc.php file: // Database settings for SQLite $db_type = 'sqlite'; $db_file = '/path/to/your/sqlite.db'; Important: Ensure proper file permissions and directory location for the SQLite database file. Updating Poweradmin If you installed Poweradmin using composer create-project --no-dev poweradmin/poweradmin , here's how to update it later: Navigate to your project directory in the terminal: cd /path/to/poweradmin If you want to update to a newer version of the Poweradmin package itself, you'll need to modify the version constraint in your composer.json file, then run the update command. For specifically updating just the Poweradmin package: composer update poweradmin/poweradmin --no-dev If the project has specific update instructions, check the documentation or GitHub repository for any additional steps that might be required (such as database migrations). The --no-dev flag ensures that development dependencies aren't installed, keeping your production environment clean, just like when you initially installed the project. Post-Installation Steps Set up the database schema (see MySQL/MariaDB , PostgreSQL , or SQLite setup) Configure web server permissions Set up initial admin user Configure PowerDNS connection Troubleshooting For common installation issues and solutions, see Common Issues .","title":"Composer"},{"location":"installation/composer/#installation-composer","text":"Note: This is an alternative way to install and update Poweradmin using Composer.","title":"Installation (Composer)"},{"location":"installation/composer/#prerequisites","text":"PHP 8.1 or higher Composer installed on your system Required PHP extensions: pdo, pdo_mysql/pdo_pgsql/pdo_sqlite See System Requirements for detailed requirements.","title":"Prerequisites"},{"location":"installation/composer/#installing-poweradmin","text":"To install the latest stable version of Poweradmin, you can use the following Composer command: composer create-project --no-dev poweradmin/poweradmin This command will create a poweradmin folder in the current directory, download, and set up Poweradmin without development dependencies. After running the Composer command, you need to create a simple configuration file at inc/config.inc.php with basic database settings.","title":"Installing Poweradmin"},{"location":"installation/composer/#directory-structure","text":"After installation, you should have the following structure: poweradmin/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 inc/ \u2502 \u2514\u2500\u2500 config.inc.php \u251c\u2500\u2500 lib/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 vendor/ \u251c\u2500\u2500 composer.json \u2514\u2500\u2500 composer.lock","title":"Directory Structure"},{"location":"installation/composer/#basic-configuration","text":"Here is an example of what the inc/config.inc.php file should look like: <?php // Database settings $db_host = 'localhost'; $db_name = 'your_db_name'; $db_user = 'your_db_user'; $db_pass = 'your_db_password'; $db_type = 'mysql'; // or 'pgsql' See Basic Configuration for all available options.","title":"Basic Configuration"},{"location":"installation/composer/#sqlite-database-settings","text":"If you are using SQLite, uncomment the following lines in the inc/config.inc.php file: // Database settings for SQLite $db_type = 'sqlite'; $db_file = '/path/to/your/sqlite.db'; Important: Ensure proper file permissions and directory location for the SQLite database file.","title":"SQLite Database Settings"},{"location":"installation/composer/#updating-poweradmin","text":"If you installed Poweradmin using composer create-project --no-dev poweradmin/poweradmin , here's how to update it later: Navigate to your project directory in the terminal: cd /path/to/poweradmin If you want to update to a newer version of the Poweradmin package itself, you'll need to modify the version constraint in your composer.json file, then run the update command. For specifically updating just the Poweradmin package: composer update poweradmin/poweradmin --no-dev If the project has specific update instructions, check the documentation or GitHub repository for any additional steps that might be required (such as database migrations). The --no-dev flag ensures that development dependencies aren't installed, keeping your production environment clean, just like when you initially installed the project.","title":"Updating Poweradmin"},{"location":"installation/composer/#post-installation-steps","text":"Set up the database schema (see MySQL/MariaDB , PostgreSQL , or SQLite setup) Configure web server permissions Set up initial admin user Configure PowerDNS connection","title":"Post-Installation Steps"},{"location":"installation/composer/#troubleshooting","text":"For common installation issues and solutions, see Common Issues .","title":"Troubleshooting"},{"location":"user-guide/ddns/client-setup/","text":"Client Setup Update Methods The Dynamic DNS update system supports several ways to update records: HTTP Basic Authentication URL parameters Automatic IP detection Supported Parameters username - Your Poweradmin username (if not using HTTP Basic Auth) password - Your Poweradmin password (if not using HTTP Basic Auth) hostname - The FQDN to update myip or ip - IPv4 address(es), comma-separated myip6 or ip6 - IPv6 address(es), comma-separated dualstack_update - Set to 1 to update both IPv4 and IPv6 verbose - Enable verbose response messages Special Values You can use whatismyip for the IP parameters to automatically detect your address: curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=whatismyip\" Multiple IP Management The system supports managing multiple IP addresses per host: # Update multiple IPv4 addresses curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2\" # Update multiple IPv6 addresses curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip6=2001:db8::1,2001:db8::2\" # Update both IPv4 and IPv6 with cleanup curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2&myip6=2001:db8::1,2001:db8::2&dualstack_update=1\" When using multiple IPs: Omitted record types are preserved Use dualstack_update=1 to clean up both A and AAAA records Records not included in the update are automatically removed Changes are atomic and maintain zone consistency Using the Shell Script Download the dynamic DNS client script Make it executable and run: chmod 755 dynamic_dns_client.sh ./dynamic_dns_client.sh Basic Authentication You can also create a client that uses HTTP basic authentication with username and password. Client Script Installation Shell Script chmod 755 dynamic_dns_client.sh ./dynamic_dns_client.sh Python Script Install required dependencies: pip install requests Run the script: python dynamic_dns_client.py Perl Script Install required modules: cpan install LWP::UserAgent Run the script: perl dynamic_dns_client.pl","title":"Client Setup"},{"location":"user-guide/ddns/client-setup/#client-setup","text":"","title":"Client Setup"},{"location":"user-guide/ddns/client-setup/#update-methods","text":"The Dynamic DNS update system supports several ways to update records: HTTP Basic Authentication URL parameters Automatic IP detection","title":"Update Methods"},{"location":"user-guide/ddns/client-setup/#supported-parameters","text":"username - Your Poweradmin username (if not using HTTP Basic Auth) password - Your Poweradmin password (if not using HTTP Basic Auth) hostname - The FQDN to update myip or ip - IPv4 address(es), comma-separated myip6 or ip6 - IPv6 address(es), comma-separated dualstack_update - Set to 1 to update both IPv4 and IPv6 verbose - Enable verbose response messages","title":"Supported Parameters"},{"location":"user-guide/ddns/client-setup/#special-values","text":"You can use whatismyip for the IP parameters to automatically detect your address: curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=whatismyip\"","title":"Special Values"},{"location":"user-guide/ddns/client-setup/#multiple-ip-management","text":"The system supports managing multiple IP addresses per host: # Update multiple IPv4 addresses curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2\" # Update multiple IPv6 addresses curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip6=2001:db8::1,2001:db8::2\" # Update both IPv4 and IPv6 with cleanup curl \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2&myip6=2001:db8::1,2001:db8::2&dualstack_update=1\" When using multiple IPs: Omitted record types are preserved Use dualstack_update=1 to clean up both A and AAAA records Records not included in the update are automatically removed Changes are atomic and maintain zone consistency","title":"Multiple IP Management"},{"location":"user-guide/ddns/client-setup/#using-the-shell-script","text":"Download the dynamic DNS client script Make it executable and run: chmod 755 dynamic_dns_client.sh ./dynamic_dns_client.sh","title":"Using the Shell Script"},{"location":"user-guide/ddns/client-setup/#basic-authentication","text":"You can also create a client that uses HTTP basic authentication with username and password.","title":"Basic Authentication"},{"location":"user-guide/ddns/client-setup/#client-script-installation","text":"","title":"Client Script Installation"},{"location":"user-guide/ddns/client-setup/#shell-script","text":"chmod 755 dynamic_dns_client.sh ./dynamic_dns_client.sh","title":"Shell Script"},{"location":"user-guide/ddns/client-setup/#python-script","text":"Install required dependencies: pip install requests Run the script: python dynamic_dns_client.py","title":"Python Script"},{"location":"user-guide/ddns/client-setup/#perl-script","text":"Install required modules: cpan install LWP::UserAgent Run the script: perl dynamic_dns_client.pl","title":"Perl Script"},{"location":"user-guide/ddns/configuration/","text":"Dynamic DNS Configuration Setting Up User Permissions Create a permission template: Navigate to Users > Add permission template Provide a meaningful name (e.g., \"dynamic\") and description Select required permissions: zone_master_add zone_content_view_own zone_content_edit_own or zone_content_edit_own_as_client or zone_content_edit_others Create a new user: Navigate to Users > Add user Fill in user details Apply the previously created template Configuring DNS Zone Log in as the new user Select \"Add master zone\" Enter your domain name Navigate to the created zone Add a record for dynamic updates","title":"Configuration"},{"location":"user-guide/ddns/configuration/#dynamic-dns-configuration","text":"","title":"Dynamic DNS Configuration"},{"location":"user-guide/ddns/configuration/#setting-up-user-permissions","text":"Create a permission template: Navigate to Users > Add permission template Provide a meaningful name (e.g., \"dynamic\") and description Select required permissions: zone_master_add zone_content_view_own zone_content_edit_own or zone_content_edit_own_as_client or zone_content_edit_others Create a new user: Navigate to Users > Add user Fill in user details Apply the previously created template","title":"Setting Up User Permissions"},{"location":"user-guide/ddns/configuration/#configuring-dns-zone","text":"Log in as the new user Select \"Add master zone\" Enter your domain name Navigate to the created zone Add a record for dynamic updates","title":"Configuring DNS Zone"},{"location":"user-guide/ddns/overview/","text":"Dynamic DNS Overview Dynamic DNS (DDNS) provides a way to update DNS records when an IP address changes. While the updates are not automatic by default, the service can be automated through scheduled tasks (like cron jobs) or scripts that periodically check and update the DNS records. This is particularly useful for: Hosting services on a connection with a dynamic IP address Maintaining DNS records for home servers or networks Providing consistent domain name access to systems with changing IP addresses Remote access to home networks or IoT devices Poweradmin's Dynamic DNS implementation offers a flexible API that can be integrated with various automation tools and scripts to keep DNS records up to date. It supports both IPv4 and IPv6 addresses through various update methods. Requirements Before setting up Dynamic DNS, ensure you have: PowerDNS server with Poweradmin interface User account with appropriate permissions One of the following clients: Bash shell environment Python 3.x with requests module Perl with LWP::UserAgent module cURL or any HTTP client tool Features IPv4 and IPv6 support (dual-stack) Multiple IP management capabilities: Support for comma-separated IP lists Simultaneous management of multiple A/AAAA records Selective record type updating Intelligent record synchronization: Automatic cleanup of outdated records Database and DNS zone consistency maintenance Optional full sync with dual-stack support Automatic SOA serial updates Support for both Basic HTTP Authentication and query parameters TTL management (default 60 seconds) Verbose response mode for debugging Backward compatibility with legacy clients Available Scripts Backend Components dynamic_update.php - Main server-side script for processing DNS updates, supporting: Single or multiple IPv4/IPv6 addresses Automatic IP detection using 'whatismyip' Comma-separated IP lists Dual-stack updates addons/clientip.php - Server-side script that provides the client's public IP address Client Tools Official client scripts: addons/dynamic_dns_client.sh - Bash client script for updating IP addresses addons/dynamic_dns_client.py - Python client script for updating IP addresses addons/dynamic_dns_client.pl - Perl client script for updating IP addresses You can also use cURL or any HTTP client to update DNS records. See the Using cURL guide for examples and best practices. Security Features Basic HTTP Authentication Permission-based access control User activity validation IP address validation Domain ownership verification For detailed configuration steps, see the Configuration section.","title":"Overview"},{"location":"user-guide/ddns/overview/#dynamic-dns-overview","text":"Dynamic DNS (DDNS) provides a way to update DNS records when an IP address changes. While the updates are not automatic by default, the service can be automated through scheduled tasks (like cron jobs) or scripts that periodically check and update the DNS records. This is particularly useful for: Hosting services on a connection with a dynamic IP address Maintaining DNS records for home servers or networks Providing consistent domain name access to systems with changing IP addresses Remote access to home networks or IoT devices Poweradmin's Dynamic DNS implementation offers a flexible API that can be integrated with various automation tools and scripts to keep DNS records up to date. It supports both IPv4 and IPv6 addresses through various update methods.","title":"Dynamic DNS Overview"},{"location":"user-guide/ddns/overview/#requirements","text":"Before setting up Dynamic DNS, ensure you have: PowerDNS server with Poweradmin interface User account with appropriate permissions One of the following clients: Bash shell environment Python 3.x with requests module Perl with LWP::UserAgent module cURL or any HTTP client tool","title":"Requirements"},{"location":"user-guide/ddns/overview/#features","text":"IPv4 and IPv6 support (dual-stack) Multiple IP management capabilities: Support for comma-separated IP lists Simultaneous management of multiple A/AAAA records Selective record type updating Intelligent record synchronization: Automatic cleanup of outdated records Database and DNS zone consistency maintenance Optional full sync with dual-stack support Automatic SOA serial updates Support for both Basic HTTP Authentication and query parameters TTL management (default 60 seconds) Verbose response mode for debugging Backward compatibility with legacy clients","title":"Features"},{"location":"user-guide/ddns/overview/#available-scripts","text":"","title":"Available Scripts"},{"location":"user-guide/ddns/overview/#backend-components","text":"dynamic_update.php - Main server-side script for processing DNS updates, supporting: Single or multiple IPv4/IPv6 addresses Automatic IP detection using 'whatismyip' Comma-separated IP lists Dual-stack updates addons/clientip.php - Server-side script that provides the client's public IP address","title":"Backend Components"},{"location":"user-guide/ddns/overview/#client-tools","text":"Official client scripts: addons/dynamic_dns_client.sh - Bash client script for updating IP addresses addons/dynamic_dns_client.py - Python client script for updating IP addresses addons/dynamic_dns_client.pl - Perl client script for updating IP addresses You can also use cURL or any HTTP client to update DNS records. See the Using cURL guide for examples and best practices.","title":"Client Tools"},{"location":"user-guide/ddns/overview/#security-features","text":"Basic HTTP Authentication Permission-based access control User activity validation IP address validation Domain ownership verification For detailed configuration steps, see the Configuration section.","title":"Security Features"},{"location":"user-guide/ddns/using-curl/","text":"Using cURL for Dynamic DNS Updates cURL is a versatile command-line tool that can be used to update DNS records in Poweradmin. Here are various examples of using cURL with the Dynamic DNS update system. Basic Update Examples Update IPv4 Address curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1\" Automatic IP Detection curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=whatismyip\" Update IPv6 Address curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip6=2001:db8::1\" Advanced Usage Combined Multiple IPv4 and IPv6 Update # Update multiple A records and single AAAA record in one request curl -u user:pass \"https://yourhost/dynamic_update.php?hostname=host.example.com&myip=1.2.3.4,5.6.7.8&myip6=2001:db8::1&dualstack_update=1\" Dual-Stack Update curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1&myip6=2001:db8::1&dualstack_update=1\" Multiple IP Addresses curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2\" Using URL Parameters Instead of Basic Auth curl \"https://dns.example.com/dynamic_update.php?username=user&password=pass&hostname=host.example.com&myip=192.0.2.1\" Scripting Examples Basic Update Script #!/bin/bash USERNAME=\"your_username\" PASSWORD=\"your_password\" HOSTNAME=\"your.hostname.com\" SERVER=\"https://dns.example.com/dynamic_update.php\" curl -s -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\" Periodic Update Script #!/bin/bash USERNAME=\"your_username\" PASSWORD=\"your_password\" HOSTNAME=\"your.hostname.com\" SERVER=\"https://dns.example.com/dynamic_update.php\" INTERVAL=300 # Update every 5 minutes while true; do curl -s -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\" sleep $INTERVAL done Error Handling The update script returns HTTP status codes and messages that can be captured: response=$(curl -s -w \"%{http_code}\" -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\") if [ $response -eq 200 ]; then echo \"Update successful\" else echo \"Update failed with code: $response\" fi Security Considerations Always use HTTPS to protect credentials Consider using Basic Authentication instead of URL parameters Store credentials securely, not in plain text Use specific IP ranges if possible Monitor for unusual update patterns","title":"Using cURL"},{"location":"user-guide/ddns/using-curl/#using-curl-for-dynamic-dns-updates","text":"cURL is a versatile command-line tool that can be used to update DNS records in Poweradmin. Here are various examples of using cURL with the Dynamic DNS update system.","title":"Using cURL for Dynamic DNS Updates"},{"location":"user-guide/ddns/using-curl/#basic-update-examples","text":"","title":"Basic Update Examples"},{"location":"user-guide/ddns/using-curl/#update-ipv4-address","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1\"","title":"Update IPv4 Address"},{"location":"user-guide/ddns/using-curl/#automatic-ip-detection","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=whatismyip\"","title":"Automatic IP Detection"},{"location":"user-guide/ddns/using-curl/#update-ipv6-address","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip6=2001:db8::1\"","title":"Update IPv6 Address"},{"location":"user-guide/ddns/using-curl/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"user-guide/ddns/using-curl/#combined-multiple-ipv4-and-ipv6-update","text":"# Update multiple A records and single AAAA record in one request curl -u user:pass \"https://yourhost/dynamic_update.php?hostname=host.example.com&myip=1.2.3.4,5.6.7.8&myip6=2001:db8::1&dualstack_update=1\"","title":"Combined Multiple IPv4 and IPv6 Update"},{"location":"user-guide/ddns/using-curl/#dual-stack-update","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1&myip6=2001:db8::1&dualstack_update=1\"","title":"Dual-Stack Update"},{"location":"user-guide/ddns/using-curl/#multiple-ip-addresses","text":"curl -u username:password \"https://dns.example.com/dynamic_update.php?hostname=host.example.com&myip=192.0.2.1,192.0.2.2\"","title":"Multiple IP Addresses"},{"location":"user-guide/ddns/using-curl/#using-url-parameters-instead-of-basic-auth","text":"curl \"https://dns.example.com/dynamic_update.php?username=user&password=pass&hostname=host.example.com&myip=192.0.2.1\"","title":"Using URL Parameters Instead of Basic Auth"},{"location":"user-guide/ddns/using-curl/#scripting-examples","text":"","title":"Scripting Examples"},{"location":"user-guide/ddns/using-curl/#basic-update-script","text":"#!/bin/bash USERNAME=\"your_username\" PASSWORD=\"your_password\" HOSTNAME=\"your.hostname.com\" SERVER=\"https://dns.example.com/dynamic_update.php\" curl -s -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\"","title":"Basic Update Script"},{"location":"user-guide/ddns/using-curl/#periodic-update-script","text":"#!/bin/bash USERNAME=\"your_username\" PASSWORD=\"your_password\" HOSTNAME=\"your.hostname.com\" SERVER=\"https://dns.example.com/dynamic_update.php\" INTERVAL=300 # Update every 5 minutes while true; do curl -s -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\" sleep $INTERVAL done","title":"Periodic Update Script"},{"location":"user-guide/ddns/using-curl/#error-handling","text":"The update script returns HTTP status codes and messages that can be captured: response=$(curl -s -w \"%{http_code}\" -u \"$USERNAME:$PASSWORD\" \"$SERVER?hostname=$HOSTNAME&myip=whatismyip\") if [ $response -eq 200 ]; then echo \"Update successful\" else echo \"Update failed with code: $response\" fi","title":"Error Handling"},{"location":"user-guide/ddns/using-curl/#security-considerations","text":"Always use HTTPS to protect credentials Consider using Basic Authentication instead of URL parameters Store credentials securely, not in plain text Use specific IP ranges if possible Monitor for unusual update patterns","title":"Security Considerations"}]}