{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Poweradmin Documentation Welcome to the official documentation for Poweradmin, a web-based administration tool for PowerDNS. Overview Poweradmin is a friendly web interface for managing PowerDNS. It allows you to manage DNS zones and records with ease. Features User Management : Manage users and roles with different permissions. DNS Management : Create, update, and delete DNS zones and records. Templates : Use templates for bulk operations. Dynamic DNS : Configure and manage dynamic DNS settings. Security : Implement best practices for securing your DNS infrastructure. Logging and Monitoring : Configure logging and monitor your DNS setup. API : Access and manage your DNS data programmatically using the Poweradmin API. Getting Started To get started with Poweradmin, follow these steps: Installation : Refer to the Installation Guide for detailed instructions on how to install Poweradmin. Configuration : Check the Configuration Guide to set up your Poweradmin instance. User Guide : Learn how to use Poweradmin with the User Guide . Community and Support Join our community for support and discussions: GitHub Repository Issue Tracker Discussions Contributing We welcome contributions! Please see the Contributing Guide for more information on how to contribute to the project. License Poweradmin is licensed under the GPL-3.0 License . Thank you for using Poweradmin!","title":"Home"},{"location":"#poweradmin-documentation","text":"Welcome to the official documentation for Poweradmin, a web-based administration tool for PowerDNS.","title":"Poweradmin Documentation"},{"location":"#overview","text":"Poweradmin is a friendly web interface for managing PowerDNS. It allows you to manage DNS zones and records with ease.","title":"Overview"},{"location":"#features","text":"User Management : Manage users and roles with different permissions. DNS Management : Create, update, and delete DNS zones and records. Templates : Use templates for bulk operations. Dynamic DNS : Configure and manage dynamic DNS settings. Security : Implement best practices for securing your DNS infrastructure. Logging and Monitoring : Configure logging and monitor your DNS setup. API : Access and manage your DNS data programmatically using the Poweradmin API.","title":"Features"},{"location":"#getting-started","text":"To get started with Poweradmin, follow these steps: Installation : Refer to the Installation Guide for detailed instructions on how to install Poweradmin. Configuration : Check the Configuration Guide to set up your Poweradmin instance. User Guide : Learn how to use Poweradmin with the User Guide .","title":"Getting Started"},{"location":"#community-and-support","text":"Join our community for support and discussions: GitHub Repository Issue Tracker Discussions","title":"Community and Support"},{"location":"#contributing","text":"We welcome contributions! Please see the Contributing Guide for more information on how to contribute to the project.","title":"Contributing"},{"location":"#license","text":"Poweradmin is licensed under the GPL-3.0 License . Thank you for using Poweradmin!","title":"License"},{"location":"configuration/password-policies/","text":"Password Policies Poweradmin allows you to enforce password policies to enhance the security of user accounts. These policies are configured in the config/password_policy.php file. Below are the available options: Password Rules enable_password_rules : Enable or disable password rules enforcement. Default: false . min_length : Minimum length of the password. Default: 6 . require_uppercase : Require at least one uppercase letter. Default: true . require_lowercase : Require at least one lowercase letter. Default: true . require_numbers : Require at least one numeric digit. Default: true . require_special : Require at least one special character. Default: false . special_characters : List of allowed special characters. Default: !@#$%^&*()+-=[]{}|;:,.<>? . Password Expiration Note: The following settings are not implemented yet. enable_expiration : Enable or disable password expiration. Default: false . max_age_days : Maximum age of the password in days before it expires. Default: 90 . Password Reuse Prevention Note: The following settings are not implemented yet. enable_reuse_prevention : Enable or disable prevention of password reuse. Default: false . prevent_reuse : Number of previous passwords to check against for reuse. Default: 5 . These settings can be customized by modifying the config/password_policy.php file. The default values are provided by the PasswordPolicyDefaults class. Example Configuration To enable the currently defined password policies, you can update the config/password_policy.php file with the following content: <?php return [ 'enable_password_rules' => true, ]; When enable_password_rules is set to true , passwords will be required to be at least 6 characters long and contain at least one uppercase letter, one lowercase letter, and one number. Special characters are not required by default, but when used, they must be from the allowed set: !@#$%^&*()+-=[]{}|;:,.<>?","title":"Password Policies"},{"location":"configuration/password-policies/#password-policies","text":"Poweradmin allows you to enforce password policies to enhance the security of user accounts. These policies are configured in the config/password_policy.php file. Below are the available options:","title":"Password Policies"},{"location":"configuration/password-policies/#password-rules","text":"enable_password_rules : Enable or disable password rules enforcement. Default: false . min_length : Minimum length of the password. Default: 6 . require_uppercase : Require at least one uppercase letter. Default: true . require_lowercase : Require at least one lowercase letter. Default: true . require_numbers : Require at least one numeric digit. Default: true . require_special : Require at least one special character. Default: false . special_characters : List of allowed special characters. Default: !@#$%^&*()+-=[]{}|;:,.<>? .","title":"Password Rules"},{"location":"configuration/password-policies/#password-expiration","text":"Note: The following settings are not implemented yet. enable_expiration : Enable or disable password expiration. Default: false . max_age_days : Maximum age of the password in days before it expires. Default: 90 .","title":"Password Expiration"},{"location":"configuration/password-policies/#password-reuse-prevention","text":"Note: The following settings are not implemented yet. enable_reuse_prevention : Enable or disable prevention of password reuse. Default: false . prevent_reuse : Number of previous passwords to check against for reuse. Default: 5 . These settings can be customized by modifying the config/password_policy.php file. The default values are provided by the PasswordPolicyDefaults class.","title":"Password Reuse Prevention"},{"location":"configuration/password-policies/#example-configuration","text":"To enable the currently defined password policies, you can update the config/password_policy.php file with the following content: <?php return [ 'enable_password_rules' => true, ]; When enable_password_rules is set to true , passwords will be required to be at least 6 characters long and contain at least one uppercase letter, one lowercase letter, and one number. Special characters are not required by default, but when used, they must be from the allowed set: !@#$%^&*()+-=[]{}|;:,.<>?","title":"Example Configuration"},{"location":"configuration/security-policies/","text":"Password Policies Poweradmin allows you to enforce password policies to enhance the security of user accounts. These policies are configured in the config/security_policy.php file. Below are the available options: Account Lockout enable_lockout : Enable or disable account lockout after multiple failed login attempts. Default: false . lockout_attempts : Number of failed login attempts before account is locked. Default: 5 . lockout_duration : Duration of the lockout in minutes. Default: 15 . track_ip_address : Enable tracking of IP addresses for failed login attempts. Default: true . clear_attempts_on_success : Clear failed attempt counter after successful login. Default: true . IP Address Management Note: The following settings are not implemented yet. whitelist_ip_addresses : List of IP addresses that are always allowed to access the system. Default: [] . blacklist_ip_addresses : List of IP addresses that are blocked from accessing the system. Default: [] . These settings can be customized by modifying the config/security_policy.php file. The default values are provided by the SecurityPolicyDefaults class. Example Configuration To enable the currently defined security policies, you can update the config/security_policy.php file with the following content: <?php return [ 'enable_lockout' => true, ]; When enable_lockout is set to true , an account will be locked for 15 minutes after 5 failed login attempts. The system tracks IP addresses by default and resets the failed attempts counter after a successful login. Setting this to false disables the entire account lockout mechanism, regardless of other lockout-related settings.","title":"Security Policies"},{"location":"configuration/security-policies/#password-policies","text":"Poweradmin allows you to enforce password policies to enhance the security of user accounts. These policies are configured in the config/security_policy.php file. Below are the available options:","title":"Password Policies"},{"location":"configuration/security-policies/#account-lockout","text":"enable_lockout : Enable or disable account lockout after multiple failed login attempts. Default: false . lockout_attempts : Number of failed login attempts before account is locked. Default: 5 . lockout_duration : Duration of the lockout in minutes. Default: 15 . track_ip_address : Enable tracking of IP addresses for failed login attempts. Default: true . clear_attempts_on_success : Clear failed attempt counter after successful login. Default: true .","title":"Account Lockout"},{"location":"configuration/security-policies/#ip-address-management","text":"Note: The following settings are not implemented yet. whitelist_ip_addresses : List of IP addresses that are always allowed to access the system. Default: [] . blacklist_ip_addresses : List of IP addresses that are blocked from accessing the system. Default: [] . These settings can be customized by modifying the config/security_policy.php file. The default values are provided by the SecurityPolicyDefaults class.","title":"IP Address Management"},{"location":"configuration/security-policies/#example-configuration","text":"To enable the currently defined security policies, you can update the config/security_policy.php file with the following content: <?php return [ 'enable_lockout' => true, ]; When enable_lockout is set to true , an account will be locked for 15 minutes after 5 failed login attempts. The system tracks IP addresses by default and resets the failed attempts counter after a successful login. Setting this to false disables the entire account lockout mechanism, regardless of other lockout-related settings.","title":"Example Configuration"},{"location":"getting-started/docker-demo/","text":"Docker Demo The easiest way to evaluate Poweradmin without actually connecting to PowerDNS is to use a Docker image. Steps to Evaluate Poweradmin Using Docker Get the Source Download the release file or use git to clone the repository. Change to the Directory Navigate to the directory where the files are located. Build the Docker Image Run the following command to build the Docker image: sh docker build --no-cache -t poweradmin . Run the Docker Container Execute the following command to run the Docker container: sh docker run -d --name poweradmin -p 8080:80 poweradmin Access Poweradmin Open your browser and go to http://localhost:8080 . Login Use the following credentials to log in: Username : admin Password : testadmin Note : This installation uses SQLite to store all the data.","title":"Docker Demo"},{"location":"getting-started/docker-demo/#docker-demo","text":"The easiest way to evaluate Poweradmin without actually connecting to PowerDNS is to use a Docker image.","title":"Docker Demo"},{"location":"getting-started/docker-demo/#steps-to-evaluate-poweradmin-using-docker","text":"Get the Source Download the release file or use git to clone the repository. Change to the Directory Navigate to the directory where the files are located. Build the Docker Image Run the following command to build the Docker image: sh docker build --no-cache -t poweradmin . Run the Docker Container Execute the following command to run the Docker container: sh docker run -d --name poweradmin -p 8080:80 poweradmin Access Poweradmin Open your browser and go to http://localhost:8080 . Login Use the following credentials to log in: Username : admin Password : testadmin Note : This installation uses SQLite to store all the data.","title":"Steps to Evaluate Poweradmin Using Docker"},{"location":"getting-started/overview/","text":"Overview Welcome to the PowerAdmin documentation! This section will help you get started with PowerAdmin, a web-based administration tool for PowerDNS. Here, you will find an introduction to the tool, its features, and how to navigate through the documentation. Quick Evaluation If you want to quickly evaluate PowerAdmin, follow these guides: Docker Demo : Learn how to set up a demo environment using Docker. First Steps : Get started with the basic setup and configuration. Example Configurations : Explore example configurations to understand different use cases. System Requirements Before installing PowerAdmin, ensure your system meets the necessary requirements. This section covers the hardware and software prerequisites for running PowerAdmin efficiently.","title":"Overview"},{"location":"getting-started/overview/#overview","text":"Welcome to the PowerAdmin documentation! This section will help you get started with PowerAdmin, a web-based administration tool for PowerDNS. Here, you will find an introduction to the tool, its features, and how to navigate through the documentation.","title":"Overview"},{"location":"getting-started/overview/#quick-evaluation","text":"If you want to quickly evaluate PowerAdmin, follow these guides: Docker Demo : Learn how to set up a demo environment using Docker. First Steps : Get started with the basic setup and configuration. Example Configurations : Explore example configurations to understand different use cases.","title":"Quick Evaluation"},{"location":"getting-started/overview/#system-requirements","text":"Before installing PowerAdmin, ensure your system meets the necessary requirements. This section covers the hardware and software prerequisites for running PowerAdmin efficiently.","title":"System Requirements"},{"location":"getting-started/requirements/","text":"PowerAdmin System Requirements Overview PowerAdmin requires PHP 8.1 or higher to run. This document outlines the supported Linux and BSD distributions as well as those that are not supported due to PHP version constraints. For the best experience, ensure your system meets or exceeds the recommended requirements. Minimum Requirements PHP : 8.1 or higher Web Server : Apache or NGINX Operating System : Linux or BSD Note : Other web server software, such as Caddy, might also be supported. However, these are usually not tested by the maintainer and may only work with help from the community. Supported Distributions Distribution PHP Version Notes Debian 12.7 8.2 Ubuntu 22.04 8.1 Ubuntu 24.04 8.3 Fedora 40 8.3 Apache included by default Fedora 41 8.3 Apache included by default OpenSuse 15.6 8.2 BSD Operating Systems PowerAdmin is compatible with BSD operating systems that meet the PHP 8.1+ requirement. While not extensively tested, it should work as long as the environment is properly configured. Unsupported Distributions Distribution PHP Version Reason for Lack of Support Debian 11 7.4 PHP below minimum version Ubuntu 20.04 7.4 PHP below minimum version CentOS Stream release 9 8.0 PHP below minimum version Rocky 8.10 7.2 PHP below minimum version Rocky 9.4 8.0 PHP below minimum version Alma 8.10 7.2 PHP below minimum version Alma 9.4 8.0 PHP below minimum version Notes Distributions listed as unsupported can potentially be configured manually with a custom PHP build, but this is not officially supported. Upgrade paths are recommended for unsupported distributions to maintain security and compatibility.","title":"System Requirements"},{"location":"getting-started/requirements/#poweradmin-system-requirements","text":"","title":"PowerAdmin System Requirements"},{"location":"getting-started/requirements/#overview","text":"PowerAdmin requires PHP 8.1 or higher to run. This document outlines the supported Linux and BSD distributions as well as those that are not supported due to PHP version constraints. For the best experience, ensure your system meets or exceeds the recommended requirements.","title":"Overview"},{"location":"getting-started/requirements/#minimum-requirements","text":"PHP : 8.1 or higher Web Server : Apache or NGINX Operating System : Linux or BSD Note : Other web server software, such as Caddy, might also be supported. However, these are usually not tested by the maintainer and may only work with help from the community.","title":"Minimum Requirements"},{"location":"getting-started/requirements/#supported-distributions","text":"Distribution PHP Version Notes Debian 12.7 8.2 Ubuntu 22.04 8.1 Ubuntu 24.04 8.3 Fedora 40 8.3 Apache included by default Fedora 41 8.3 Apache included by default OpenSuse 15.6 8.2","title":"Supported Distributions"},{"location":"getting-started/requirements/#bsd-operating-systems","text":"PowerAdmin is compatible with BSD operating systems that meet the PHP 8.1+ requirement. While not extensively tested, it should work as long as the environment is properly configured.","title":"BSD Operating Systems"},{"location":"getting-started/requirements/#unsupported-distributions","text":"Distribution PHP Version Reason for Lack of Support Debian 11 7.4 PHP below minimum version Ubuntu 20.04 7.4 PHP below minimum version CentOS Stream release 9 8.0 PHP below minimum version Rocky 8.10 7.2 PHP below minimum version Rocky 9.4 8.0 PHP below minimum version Alma 8.10 7.2 PHP below minimum version Alma 9.4 8.0 PHP below minimum version","title":"Unsupported Distributions"},{"location":"getting-started/requirements/#notes","text":"Distributions listed as unsupported can potentially be configured manually with a custom PHP build, but this is not officially supported. Upgrade paths are recommended for unsupported distributions to maintain security and compatibility.","title":"Notes"},{"location":"installation/composer/","text":"Installation (Composer) Note: This is an alternative way to install and update Poweradmin using Composer. Prerequisites PHP 8.1 or higher Composer installed on your system Required PHP extensions: pdo, pdo_mysql/pdo_pgsql/pdo_sqlite See System Requirements for detailed requirements. Installing Poweradmin To install the latest stable version of Poweradmin, you can use the following Composer command: composer create-project --no-dev poweradmin/poweradmin This command will create a poweradmin folder in the current directory, download, and set up Poweradmin without development dependencies. After running the Composer command, you need to create a simple configuration file at inc/config.inc.php with basic database settings. Directory Structure After installation, you should have the following structure: poweradmin/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 inc/ \u2502 \u2514\u2500\u2500 config.inc.php \u251c\u2500\u2500 lib/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 vendor/ \u251c\u2500\u2500 composer.json \u2514\u2500\u2500 composer.lock Basic Configuration Here is an example of what the inc/config.inc.php file should look like: <?php // Database settings $db_host = 'localhost'; $db_name = 'your_db_name'; $db_user = 'your_db_user'; $db_pass = 'your_db_password'; $db_type = 'mysql'; // or 'pgsql' See Basic Configuration for all available options. SQLite Database Settings If you are using SQLite, uncomment the following lines in the inc/config.inc.php file: // Database settings for SQLite $db_type = 'sqlite'; $db_file = '/path/to/your/sqlite.db'; Important: Ensure proper file permissions and directory location for the SQLite database file. Updating Poweradmin If you installed Poweradmin using composer create-project --no-dev poweradmin/poweradmin , here's how to update it later: Navigate to your project directory in the terminal: cd /path/to/poweradmin If you want to update to a newer version of the Poweradmin package itself, you'll need to modify the version constraint in your composer.json file, then run the update command. For specifically updating just the Poweradmin package: composer update poweradmin/poweradmin --no-dev If the project has specific update instructions, check the documentation or GitHub repository for any additional steps that might be required (such as database migrations). The --no-dev flag ensures that development dependencies aren't installed, keeping your production environment clean, just like when you initially installed the project. Post-Installation Steps Set up the database schema (see MySQL/MariaDB , PostgreSQL , or SQLite setup) Configure web server permissions Set up initial admin user Configure PowerDNS connection Troubleshooting For common installation issues and solutions, see Common Issues .","title":"Composer"},{"location":"installation/composer/#installation-composer","text":"Note: This is an alternative way to install and update Poweradmin using Composer.","title":"Installation (Composer)"},{"location":"installation/composer/#prerequisites","text":"PHP 8.1 or higher Composer installed on your system Required PHP extensions: pdo, pdo_mysql/pdo_pgsql/pdo_sqlite See System Requirements for detailed requirements.","title":"Prerequisites"},{"location":"installation/composer/#installing-poweradmin","text":"To install the latest stable version of Poweradmin, you can use the following Composer command: composer create-project --no-dev poweradmin/poweradmin This command will create a poweradmin folder in the current directory, download, and set up Poweradmin without development dependencies. After running the Composer command, you need to create a simple configuration file at inc/config.inc.php with basic database settings.","title":"Installing Poweradmin"},{"location":"installation/composer/#directory-structure","text":"After installation, you should have the following structure: poweradmin/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 inc/ \u2502 \u2514\u2500\u2500 config.inc.php \u251c\u2500\u2500 lib/ \u251c\u2500\u2500 ... \u251c\u2500\u2500 vendor/ \u251c\u2500\u2500 composer.json \u2514\u2500\u2500 composer.lock","title":"Directory Structure"},{"location":"installation/composer/#basic-configuration","text":"Here is an example of what the inc/config.inc.php file should look like: <?php // Database settings $db_host = 'localhost'; $db_name = 'your_db_name'; $db_user = 'your_db_user'; $db_pass = 'your_db_password'; $db_type = 'mysql'; // or 'pgsql' See Basic Configuration for all available options.","title":"Basic Configuration"},{"location":"installation/composer/#sqlite-database-settings","text":"If you are using SQLite, uncomment the following lines in the inc/config.inc.php file: // Database settings for SQLite $db_type = 'sqlite'; $db_file = '/path/to/your/sqlite.db'; Important: Ensure proper file permissions and directory location for the SQLite database file.","title":"SQLite Database Settings"},{"location":"installation/composer/#updating-poweradmin","text":"If you installed Poweradmin using composer create-project --no-dev poweradmin/poweradmin , here's how to update it later: Navigate to your project directory in the terminal: cd /path/to/poweradmin If you want to update to a newer version of the Poweradmin package itself, you'll need to modify the version constraint in your composer.json file, then run the update command. For specifically updating just the Poweradmin package: composer update poweradmin/poweradmin --no-dev If the project has specific update instructions, check the documentation or GitHub repository for any additional steps that might be required (such as database migrations). The --no-dev flag ensures that development dependencies aren't installed, keeping your production environment clean, just like when you initially installed the project.","title":"Updating Poweradmin"},{"location":"installation/composer/#post-installation-steps","text":"Set up the database schema (see MySQL/MariaDB , PostgreSQL , or SQLite setup) Configure web server permissions Set up initial admin user Configure PowerDNS connection","title":"Post-Installation Steps"},{"location":"installation/composer/#troubleshooting","text":"For common installation issues and solutions, see Common Issues .","title":"Troubleshooting"}]}